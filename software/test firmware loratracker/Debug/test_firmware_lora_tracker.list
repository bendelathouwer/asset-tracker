
test_firmware_lora_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003570  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08003854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  20000010  08003864  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000008c  08003864  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016100  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002697  00000000  00000000  0003613e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a40  00000000  00000000  000387d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000958  00000000  00000000  00039218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031b31  00000000  00000000  00039b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d962  00000000  00000000  0006b6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013d3d5  00000000  00000000  00079003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001b63d8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028c4  00000000  00000000  001b642c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	20000010 	.word	0x20000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08003824 	.word	0x08003824

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	20000014 	.word	0x20000014
 8000308:	08003824 	.word	0x08003824

0800030c <SanityCheck>:

//lis3dh registers
static const int who_am_i_register = 0x0F;

int SanityCheck(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af02      	add	r7, sp, #8
	buf[0] = who_am_i_register;
 8000312:	230f      	movs	r3, #15
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <SanityCheck+0x50>)
 8000318:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c4, lis_adder, buf, 1, 1);
 800031a:	2332      	movs	r3, #50	; 0x32
 800031c:	b299      	uxth	r1, r3
 800031e:	2301      	movs	r3, #1
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2301      	movs	r3, #1
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <SanityCheck+0x50>)
 8000326:	480e      	ldr	r0, [pc, #56]	; (8000360 <SanityCheck+0x54>)
 8000328:	f000 fe78 	bl	800101c <HAL_I2C_Master_Transmit>

	ret = HAL_I2C_Master_Receive(&hi2c4, lis_adder, buf, 7, 1);
 800032c:	2332      	movs	r3, #50	; 0x32
 800032e:	b299      	uxth	r1, r3
 8000330:	2301      	movs	r3, #1
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2307      	movs	r3, #7
 8000336:	4a09      	ldr	r2, [pc, #36]	; (800035c <SanityCheck+0x50>)
 8000338:	4809      	ldr	r0, [pc, #36]	; (8000360 <SanityCheck+0x54>)
 800033a:	f000 ff63 	bl	8001204 <HAL_I2C_Master_Receive>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <SanityCheck+0x58>)
 8000344:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <SanityCheck+0x58>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SanityCheck+0x46>
	{
		return 0;
 800034e:	2300      	movs	r3, #0
 8000350:	e000      	b.n	8000354 <SanityCheck+0x48>
	}
	else {
		return 1;
 8000352:	2301      	movs	r3, #1
	}
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000078 	.word	0x20000078
 8000360:	2000002c 	.word	0x2000002c
 8000364:	20000084 	.word	0x20000084

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036e:	f000 fa69 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000372:	f000 f80f 	bl	8000394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000376:	f000 f8bb 	bl	80004f0 <MX_GPIO_Init>
  MX_I2C4_Init();
 800037a:	f000 f879 	bl	8000470 <MX_I2C4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int statuscode=8;
 800037e:	2308      	movs	r3, #8
 8000380:	607b      	str	r3, [r7, #4]
	  statuscode = SanityCheck();
 8000382:	f7ff ffc3 	bl	800030c <SanityCheck>
 8000386:	6078      	str	r0, [r7, #4]
	  HAL_Delay(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f000 faec 	bl	8000968 <HAL_Delay>
  {
 8000390:	e7f5      	b.n	800037e <main+0x16>
	...

08000394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b09c      	sub	sp, #112	; 0x70
 8000398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039e:	224c      	movs	r2, #76	; 0x4c
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f003 fa36 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2220      	movs	r2, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fa30 	bl	8003814 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003b4:	2004      	movs	r0, #4
 80003b6:	f001 fa93 	bl	80018e0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003ba:	2300      	movs	r3, #0
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	4b2b      	ldr	r3, [pc, #172]	; (800046c <SystemClock_Config+0xd8>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a2a      	ldr	r2, [pc, #168]	; (800046c <SystemClock_Config+0xd8>)
 80003c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b28      	ldr	r3, [pc, #160]	; (800046c <SystemClock_Config+0xd8>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003d6:	bf00      	nop
 80003d8:	4b24      	ldr	r3, [pc, #144]	; (800046c <SystemClock_Config+0xd8>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003e4:	d1f8      	bne.n	80003d8 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e6:	2301      	movs	r3, #1
 80003e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003ea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f0:	2302      	movs	r3, #2
 80003f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f4:	2302      	movs	r3, #2
 80003f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80003f8:	2305      	movs	r3, #5
 80003fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80003fc:	236e      	movs	r3, #110	; 0x6e
 80003fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000400:	2301      	movs	r3, #1
 8000402:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000404:	2304      	movs	r3, #4
 8000406:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000408:	2302      	movs	r3, #2
 800040a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800040c:	2308      	movs	r3, #8
 800040e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000410:	2300      	movs	r3, #0
 8000412:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041c:	4618      	mov	r0, r3
 800041e:	f001 fab9 	bl	8001994 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000428:	f000 f8b6 	bl	8000598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	233f      	movs	r3, #63	; 0x3f
 800042e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000430:	2303      	movs	r3, #3
 8000432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000438:	2308      	movs	r3, #8
 800043a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800043c:	2340      	movs	r3, #64	; 0x40
 800043e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000440:	2340      	movs	r3, #64	; 0x40
 8000442:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000448:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800044a:	2340      	movs	r3, #64	; 0x40
 800044c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2103      	movs	r1, #3
 8000452:	4618      	mov	r0, r3
 8000454:	f001 fe2c 	bl	80020b0 <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800045e:	f000 f89b 	bl	8000598 <Error_Handler>
  }
}
 8000462:	bf00      	nop
 8000464:	3770      	adds	r7, #112	; 0x70
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	58024800 	.word	0x58024800

08000470 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000474:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <MX_I2C4_Init+0x74>)
 8000476:	4a1c      	ldr	r2, [pc, #112]	; (80004e8 <MX_I2C4_Init+0x78>)
 8000478:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20B0C8FF;
 800047a:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <MX_I2C4_Init+0x74>)
 800047c:	4a1b      	ldr	r2, [pc, #108]	; (80004ec <MX_I2C4_Init+0x7c>)
 800047e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_I2C4_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <MX_I2C4_Init+0x74>)
 8000488:	2201      	movs	r2, #1
 800048a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_I2C4_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000492:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_I2C4_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_I2C4_Init+0x74>)
 800049a:	2200      	movs	r2, #0
 800049c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_I2C4_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_I2C4_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80004aa:	480e      	ldr	r0, [pc, #56]	; (80004e4 <MX_I2C4_Init+0x74>)
 80004ac:	f000 fd26 	bl	8000efc <HAL_I2C_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80004b6:	f000 f86f 	bl	8000598 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80004ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004be:	4809      	ldr	r0, [pc, #36]	; (80004e4 <MX_I2C4_Init+0x74>)
 80004c0:	f001 f976 	bl	80017b0 <HAL_I2CEx_ConfigAnalogFilter>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80004ca:	f000 f865 	bl	8000598 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80004ce:	2100      	movs	r1, #0
 80004d0:	4804      	ldr	r0, [pc, #16]	; (80004e4 <MX_I2C4_Init+0x74>)
 80004d2:	f001 f9b8 	bl	8001846 <HAL_I2CEx_ConfigDigitalFilter>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 80004dc:	f000 f85c 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2000002c 	.word	0x2000002c
 80004e8:	58001c00 	.word	0x58001c00
 80004ec:	20b0c8ff 	.word	0x20b0c8ff

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_GPIO_Init+0xa0>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050c:	4a20      	ldr	r2, [pc, #128]	; (8000590 <MX_GPIO_Init+0xa0>)
 800050e:	f043 0302 	orr.w	r3, r3, #2
 8000512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000516:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MX_GPIO_Init+0xa0>)
 8000518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051c:	f003 0302 	and.w	r3, r3, #2
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_GPIO_Init+0xa0>)
 8000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800052a:	4a19      	ldr	r2, [pc, #100]	; (8000590 <MX_GPIO_Init+0xa0>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_GPIO_Init+0xa0>)
 8000536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <MX_GPIO_Init+0xa0>)
 8000544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000548:	4a11      	ldr	r2, [pc, #68]	; (8000590 <MX_GPIO_Init+0xa0>)
 800054a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800054e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000552:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MX_GPIO_Init+0xa0>)
 8000554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ERRORLED_Pin|GOLED_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	210c      	movs	r1, #12
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_GPIO_Init+0xa4>)
 8000566:	f000 fcaf 	bl	8000ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRORLED_Pin GOLED_Pin */
  GPIO_InitStruct.Pin = ERRORLED_Pin|GOLED_Pin;
 800056a:	230c      	movs	r3, #12
 800056c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_GPIO_Init+0xa4>)
 8000582:	f000 faf9 	bl	8000b78 <HAL_GPIO_Init>

}
 8000586:	bf00      	nop
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	58024400 	.word	0x58024400
 8000594:	58020800 	.word	0x58020800

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <HAL_MspInit+0x30>)
 80005ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005b0:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <HAL_MspInit+0x30>)
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_MspInit+0x30>)
 80005bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005c0:	f003 0302 	and.w	r3, r3, #2
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	58024400 	.word	0x58024400

080005d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b6      	sub	sp, #216	; 0xd8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	22b4      	movs	r2, #180	; 0xb4
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 f90b 	bl	8003814 <memset>
  if(hi2c->Instance==I2C4)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a25      	ldr	r2, [pc, #148]	; (8000698 <HAL_I2C_MspInit+0xc0>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d142      	bne.n	800068e <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000608:	2310      	movs	r3, #16
 800060a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800060c:	2300      	movs	r3, #0
 800060e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f87a 	bl	8002710 <HAL_RCCEx_PeriphCLKConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000622:	f7ff ffb9 	bl	8000598 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b1d      	ldr	r3, [pc, #116]	; (800069c <HAL_I2C_MspInit+0xc4>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	4a1b      	ldr	r2, [pc, #108]	; (800069c <HAL_I2C_MspInit+0xc4>)
 800062e:	f043 0302 	orr.w	r3, r3, #2
 8000632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <HAL_I2C_MspInit+0xc4>)
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063c:	f003 0302 	and.w	r3, r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000644:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800064c:	2312      	movs	r3, #18
 800064e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800065e:	2306      	movs	r3, #6
 8000660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <HAL_I2C_MspInit+0xc8>)
 800066c:	f000 fa84 	bl	8000b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <HAL_I2C_MspInit+0xc4>)
 8000672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <HAL_I2C_MspInit+0xc4>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_I2C_MspInit+0xc4>)
 8000682:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800068e:	bf00      	nop
 8000690:	37d8      	adds	r7, #216	; 0xd8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	58001c00 	.word	0x58001c00
 800069c:	58024400 	.word	0x58024400
 80006a0:	58020400 	.word	0x58020400

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <NMI_Handler+0x4>

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <MemManage_Handler+0x4>

080006b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f0:	f000 f91a 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006fc:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <SystemInit+0xd8>)
 80006fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000702:	4a33      	ldr	r2, [pc, #204]	; (80007d0 <SystemInit+0xd8>)
 8000704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800070c:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <SystemInit+0xdc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f003 030f 	and.w	r3, r3, #15
 8000714:	2b06      	cmp	r3, #6
 8000716:	d807      	bhi.n	8000728 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000718:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <SystemInit+0xdc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f023 030f 	bic.w	r3, r3, #15
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <SystemInit+0xdc>)
 8000722:	f043 0307 	orr.w	r3, r3, #7
 8000726:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000728:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <SystemInit+0xe0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a2a      	ldr	r2, [pc, #168]	; (80007d8 <SystemInit+0xe0>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <SystemInit+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <SystemInit+0xe0>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4926      	ldr	r1, [pc, #152]	; (80007d8 <SystemInit+0xe0>)
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <SystemInit+0xe4>)
 8000742:	4013      	ands	r3, r2
 8000744:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000746:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <SystemInit+0xdc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	2b00      	cmp	r3, #0
 8000750:	d007      	beq.n	8000762 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <SystemInit+0xdc>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f023 030f 	bic.w	r3, r3, #15
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <SystemInit+0xdc>)
 800075c:	f043 0307 	orr.w	r3, r3, #7
 8000760:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <SystemInit+0xe0>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <SystemInit+0xe0>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <SystemInit+0xe0>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <SystemInit+0xe0>)
 8000776:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <SystemInit+0xe8>)
 8000778:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <SystemInit+0xe0>)
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <SystemInit+0xec>)
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <SystemInit+0xe0>)
 8000782:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <SystemInit+0xf0>)
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <SystemInit+0xe0>)
 8000788:	2200      	movs	r2, #0
 800078a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <SystemInit+0xe0>)
 800078e:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <SystemInit+0xf0>)
 8000790:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <SystemInit+0xe0>)
 8000794:	2200      	movs	r2, #0
 8000796:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <SystemInit+0xe0>)
 800079a:	4a13      	ldr	r2, [pc, #76]	; (80007e8 <SystemInit+0xf0>)
 800079c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <SystemInit+0xe0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <SystemInit+0xe0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <SystemInit+0xe0>)
 80007aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <SystemInit+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <SystemInit+0xf4>)
 80007b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <SystemInit+0xd8>)
 80007c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00
 80007d4:	52002000 	.word	0x52002000
 80007d8:	58024400 	.word	0x58024400
 80007dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e0:	02020200 	.word	0x02020200
 80007e4:	01ff0000 	.word	0x01ff0000
 80007e8:	01010280 	.word	0x01010280
 80007ec:	52004000 	.word	0x52004000

080007f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000828 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f4:	f7ff ff80 	bl	80006f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800081e:	f002 ffd5 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000822:	f7ff fda1 	bl	8000368 <main>
  bx  lr
 8000826:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000834:	08003854 	.word	0x08003854
  ldr r2, =_sbss
 8000838:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800083c:	2000008c 	.word	0x2000008c

08000840 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC3_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084a:	2003      	movs	r0, #3
 800084c:	f000 f962 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000850:	f001 fde4 	bl	800241c <HAL_RCC_GetSysClockFreq>
 8000854:	4602      	mov	r2, r0
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_Init+0x68>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	0a1b      	lsrs	r3, r3, #8
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	4913      	ldr	r1, [pc, #76]	; (80008b0 <HAL_Init+0x6c>)
 8000862:	5ccb      	ldrb	r3, [r1, r3]
 8000864:	f003 031f 	and.w	r3, r3, #31
 8000868:	fa22 f303 	lsr.w	r3, r2, r3
 800086c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_Init+0x68>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_Init+0x6c>)
 8000878:	5cd3      	ldrb	r3, [r2, r3]
 800087a:	f003 031f 	and.w	r3, r3, #31
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	fa22 f303 	lsr.w	r3, r2, r3
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <HAL_Init+0x70>)
 8000886:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <HAL_Init+0x74>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800088e:	2000      	movs	r0, #0
 8000890:	f000 f814 	bl	80008bc <HAL_InitTick>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e002      	b.n	80008a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800089e:	f7ff fe81 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	58024400 	.word	0x58024400
 80008b0:	0800383c 	.word	0x0800383c
 80008b4:	20000004 	.word	0x20000004
 80008b8:	20000000 	.word	0x20000000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_InitTick+0x60>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e021      	b.n	8000914 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <HAL_InitTick+0x64>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_InitTick+0x60>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f939 	bl	8000b5e <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00e      	b.n	8000914 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d80a      	bhi.n	8000912 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f000 f911 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_InitTick+0x68>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000000c 	.word	0x2000000c
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008

08000928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x20>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x24>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_IncTick+0x24>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	2000000c 	.word	0x2000000c
 800094c:	20000088 	.word	0x20000088

08000950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_GetTick+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000088 	.word	0x20000088

08000968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000970:	f7ff ffee 	bl	8000950 <HAL_GetTick>
 8000974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000980:	d005      	beq.n	800098e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_Delay+0x44>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800098e:	bf00      	nop
 8000990:	f7ff ffde 	bl	8000950 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	d8f7      	bhi.n	8000990 <HAL_Delay+0x28>
  {
  }
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000000c 	.word	0x2000000c

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <__NVIC_SetPriorityGrouping+0x40>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	4313      	orrs	r3, r2
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x40>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	05fa0000 	.word	0x05fa0000

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff8e 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff47 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff5e 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff90 	bl	8000a68 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5f 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffb2 	bl	8000ad0 <SysTick_Config>
 8000b6c:	4603      	mov	r3, r0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b86:	4b86      	ldr	r3, [pc, #536]	; (8000da0 <HAL_GPIO_Init+0x228>)
 8000b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b8a:	e18c      	b.n	8000ea6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 817e 	beq.w	8000ea0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d00b      	beq.n	8000bc4 <HAL_GPIO_Init+0x4c>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d007      	beq.n	8000bc4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb8:	2b11      	cmp	r3, #17
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b12      	cmp	r3, #18
 8000bc2:	d130      	bne.n	8000c26 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 0201 	and.w	r2, r3, #1
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0xee>
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d123      	bne.n	8000cae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4013      	ands	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	69b9      	ldr	r1, [r7, #24]
 8000caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0203 	and.w	r2, r3, #3
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80d8 	beq.w	8000ea0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <HAL_GPIO_Init+0x22c>)
 8000cf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf6:	4a2b      	ldr	r2, [pc, #172]	; (8000da4 <HAL_GPIO_Init+0x22c>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_GPIO_Init+0x22c>)
 8000d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d0e:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <HAL_GPIO_Init+0x230>)
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	220f      	movs	r2, #15
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <HAL_GPIO_Init+0x234>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d04a      	beq.n	8000dd0 <HAL_GPIO_Init+0x258>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <HAL_GPIO_Init+0x238>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d02b      	beq.n	8000d9a <HAL_GPIO_Init+0x222>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <HAL_GPIO_Init+0x23c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d025      	beq.n	8000d96 <HAL_GPIO_Init+0x21e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <HAL_GPIO_Init+0x240>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01f      	beq.n	8000d92 <HAL_GPIO_Init+0x21a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_GPIO_Init+0x244>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d019      	beq.n	8000d8e <HAL_GPIO_Init+0x216>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <HAL_GPIO_Init+0x248>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0x212>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_GPIO_Init+0x24c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00d      	beq.n	8000d86 <HAL_GPIO_Init+0x20e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <HAL_GPIO_Init+0x250>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d007      	beq.n	8000d82 <HAL_GPIO_Init+0x20a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <HAL_GPIO_Init+0x254>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_GPIO_Init+0x206>
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	e029      	b.n	8000dd2 <HAL_GPIO_Init+0x25a>
 8000d7e:	230a      	movs	r3, #10
 8000d80:	e027      	b.n	8000dd2 <HAL_GPIO_Init+0x25a>
 8000d82:	2307      	movs	r3, #7
 8000d84:	e025      	b.n	8000dd2 <HAL_GPIO_Init+0x25a>
 8000d86:	2306      	movs	r3, #6
 8000d88:	e023      	b.n	8000dd2 <HAL_GPIO_Init+0x25a>
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	e021      	b.n	8000dd2 <HAL_GPIO_Init+0x25a>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e01f      	b.n	8000dd2 <HAL_GPIO_Init+0x25a>
 8000d92:	2303      	movs	r3, #3
 8000d94:	e01d      	b.n	8000dd2 <HAL_GPIO_Init+0x25a>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e01b      	b.n	8000dd2 <HAL_GPIO_Init+0x25a>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e019      	b.n	8000dd2 <HAL_GPIO_Init+0x25a>
 8000d9e:	bf00      	nop
 8000da0:	58000080 	.word	0x58000080
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58000400 	.word	0x58000400
 8000dac:	58020000 	.word	0x58020000
 8000db0:	58020400 	.word	0x58020400
 8000db4:	58020800 	.word	0x58020800
 8000db8:	58020c00 	.word	0x58020c00
 8000dbc:	58021000 	.word	0x58021000
 8000dc0:	58021400 	.word	0x58021400
 8000dc4:	58021800 	.word	0x58021800
 8000dc8:	58021c00 	.word	0x58021c00
 8000dcc:	58022400 	.word	0x58022400
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	0092      	lsls	r2, r2, #2
 8000dda:	4093      	lsls	r3, r2
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de2:	4938      	ldr	r1, [pc, #224]	; (8000ec4 <HAL_GPIO_Init+0x34c>)
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f47f ae6b 	bne.w	8000b8c <HAL_GPIO_Init+0x14>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3724      	adds	r7, #36	; 0x24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	58000400 	.word	0x58000400

08000ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	807b      	strh	r3, [r7, #2]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed8:	787b      	ldrb	r3, [r7, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000ee4:	e003      	b.n	8000eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ee6:	887b      	ldrh	r3, [r7, #2]
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	619a      	str	r2, [r3, #24]
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e07f      	b.n	800100e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d106      	bne.n	8000f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fb58 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2224      	movs	r2, #36	; 0x24
 8000f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0201 	bic.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d107      	bne.n	8000f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	e006      	b.n	8000f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d104      	bne.n	8000f96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	6859      	ldr	r1, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_I2C_Init+0x11c>)
 8000fa2:	430b      	orrs	r3, r1
 8000fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	ea42 0103 	orr.w	r1, r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	021a      	lsls	r2, r3, #8
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69d9      	ldr	r1, [r3, #28]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a1a      	ldr	r2, [r3, #32]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0201 	orr.w	r2, r2, #1
 8000fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	02008000 	.word	0x02008000

0800101c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	461a      	mov	r2, r3
 8001028:	460b      	mov	r3, r1
 800102a:	817b      	strh	r3, [r7, #10]
 800102c:	4613      	mov	r3, r2
 800102e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b20      	cmp	r3, #32
 800103a:	f040 80da 	bne.w	80011f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <HAL_I2C_Master_Transmit+0x30>
 8001048:	2302      	movs	r3, #2
 800104a:	e0d3      	b.n	80011f4 <HAL_I2C_Master_Transmit+0x1d8>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001054:	f7ff fc7c 	bl	8000950 <HAL_GetTick>
 8001058:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2319      	movs	r3, #25
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f9e6 	bl	8001438 <I2C_WaitOnFlagUntilTimeout>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e0be      	b.n	80011f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2221      	movs	r2, #33	; 0x21
 800107a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2210      	movs	r2, #16
 8001082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	893a      	ldrh	r2, [r7, #8]
 8001096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2bff      	cmp	r3, #255	; 0xff
 80010a6:	d90e      	bls.n	80010c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	8979      	ldrh	r1, [r7, #10]
 80010b6:	4b51      	ldr	r3, [pc, #324]	; (80011fc <HAL_I2C_Master_Transmit+0x1e0>)
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 fb48 	bl	8001754 <I2C_TransferConfig>
 80010c4:	e06c      	b.n	80011a0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	8979      	ldrh	r1, [r7, #10]
 80010d8:	4b48      	ldr	r3, [pc, #288]	; (80011fc <HAL_I2C_Master_Transmit+0x1e0>)
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 fb37 	bl	8001754 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80010e6:	e05b      	b.n	80011a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	6a39      	ldr	r1, [r7, #32]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f9e3 	bl	80014b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e07b      	b.n	80011f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001116:	b29b      	uxth	r3, r3
 8001118:	3b01      	subs	r3, #1
 800111a:	b29a      	uxth	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001124:	3b01      	subs	r3, #1
 8001126:	b29a      	uxth	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001130:	b29b      	uxth	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d034      	beq.n	80011a0 <HAL_I2C_Master_Transmit+0x184>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113a:	2b00      	cmp	r3, #0
 800113c:	d130      	bne.n	80011a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2200      	movs	r2, #0
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f000 f975 	bl	8001438 <I2C_WaitOnFlagUntilTimeout>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e04d      	b.n	80011f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800115c:	b29b      	uxth	r3, r3
 800115e:	2bff      	cmp	r3, #255	; 0xff
 8001160:	d90e      	bls.n	8001180 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	22ff      	movs	r2, #255	; 0xff
 8001166:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116c:	b2da      	uxtb	r2, r3
 800116e:	8979      	ldrh	r1, [r7, #10]
 8001170:	2300      	movs	r3, #0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 faeb 	bl	8001754 <I2C_TransferConfig>
 800117e:	e00f      	b.n	80011a0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001184:	b29a      	uxth	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800118e:	b2da      	uxtb	r2, r3
 8001190:	8979      	ldrh	r1, [r7, #10]
 8001192:	2300      	movs	r3, #0
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 fada 	bl	8001754 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d19e      	bne.n	80010e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	6a39      	ldr	r1, [r7, #32]
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f9c2 	bl	8001538 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e01a      	b.n	80011f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2220      	movs	r2, #32
 80011c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6859      	ldr	r1, [r3, #4]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_I2C_Master_Transmit+0x1e4>)
 80011d2:	400b      	ands	r3, r1
 80011d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2220      	movs	r2, #32
 80011da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80011f2:	2302      	movs	r3, #2
  }
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	80002000 	.word	0x80002000
 8001200:	fe00e800 	.word	0xfe00e800

08001204 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af02      	add	r7, sp, #8
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	461a      	mov	r2, r3
 8001210:	460b      	mov	r3, r1
 8001212:	817b      	strh	r3, [r7, #10]
 8001214:	4613      	mov	r3, r2
 8001216:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b20      	cmp	r3, #32
 8001222:	f040 80db 	bne.w	80013dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_I2C_Master_Receive+0x30>
 8001230:	2302      	movs	r3, #2
 8001232:	e0d4      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800123c:	f7ff fb88 	bl	8000950 <HAL_GetTick>
 8001240:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2319      	movs	r3, #25
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 f8f2 	bl	8001438 <I2C_WaitOnFlagUntilTimeout>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e0bf      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2222      	movs	r2, #34	; 0x22
 8001262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2210      	movs	r2, #16
 800126a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	893a      	ldrh	r2, [r7, #8]
 800127e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2200      	movs	r2, #0
 8001284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800128a:	b29b      	uxth	r3, r3
 800128c:	2bff      	cmp	r3, #255	; 0xff
 800128e:	d90e      	bls.n	80012ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129a:	b2da      	uxtb	r2, r3
 800129c:	8979      	ldrh	r1, [r7, #10]
 800129e:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <HAL_I2C_Master_Receive+0x1e4>)
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 fa54 	bl	8001754 <I2C_TransferConfig>
 80012ac:	e06d      	b.n	800138a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	8979      	ldrh	r1, [r7, #10]
 80012c0:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_I2C_Master_Receive+0x1e4>)
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 fa43 	bl	8001754 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80012ce:	e05c      	b.n	800138a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	6a39      	ldr	r1, [r7, #32]
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 f96b 	bl	80015b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e07c      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001300:	3b01      	subs	r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b01      	subs	r3, #1
 8001310:	b29a      	uxth	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131a:	b29b      	uxth	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d034      	beq.n	800138a <HAL_I2C_Master_Receive+0x186>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	d130      	bne.n	800138a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2200      	movs	r2, #0
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 f880 	bl	8001438 <I2C_WaitOnFlagUntilTimeout>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e04d      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001346:	b29b      	uxth	r3, r3
 8001348:	2bff      	cmp	r3, #255	; 0xff
 800134a:	d90e      	bls.n	800136a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001356:	b2da      	uxtb	r2, r3
 8001358:	8979      	ldrh	r1, [r7, #10]
 800135a:	2300      	movs	r3, #0
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f9f6 	bl	8001754 <I2C_TransferConfig>
 8001368:	e00f      	b.n	800138a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136e:	b29a      	uxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001378:	b2da      	uxtb	r2, r3
 800137a:	8979      	ldrh	r1, [r7, #10]
 800137c:	2300      	movs	r3, #0
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f9e5 	bl	8001754 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138e:	b29b      	uxth	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d19d      	bne.n	80012d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	6a39      	ldr	r1, [r7, #32]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f000 f8cd 	bl	8001538 <I2C_WaitOnSTOPFlagUntilTimeout>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e01a      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2220      	movs	r2, #32
 80013ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6859      	ldr	r1, [r3, #4]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_I2C_Master_Receive+0x1e8>)
 80013bc:	400b      	ands	r3, r1
 80013be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2220      	movs	r2, #32
 80013c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	e000      	b.n	80013de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80013dc:	2302      	movs	r3, #2
  }
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	80002400 	.word	0x80002400
 80013ec:	fe00e800 	.word	0xfe00e800

080013f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b02      	cmp	r3, #2
 8001404:	d103      	bne.n	800140e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b01      	cmp	r3, #1
 800141a:	d007      	beq.n	800142c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0201 	orr.w	r2, r2, #1
 800142a:	619a      	str	r2, [r3, #24]
  }
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	4613      	mov	r3, r2
 8001446:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001448:	e022      	b.n	8001490 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001450:	d01e      	beq.n	8001490 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001452:	f7ff fa7d 	bl	8000950 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d302      	bcc.n	8001468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d113      	bne.n	8001490 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f043 0220 	orr.w	r2, r3, #32
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e00f      	b.n	80014b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699a      	ldr	r2, [r3, #24]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	4013      	ands	r3, r2
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	429a      	cmp	r2, r3
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d0cd      	beq.n	800144a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014c4:	e02c      	b.n	8001520 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f8dc 	bl	8001688 <I2C_IsAcknowledgeFailed>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e02a      	b.n	8001530 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d01e      	beq.n	8001520 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e2:	f7ff fa35 	bl	8000950 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d302      	bcc.n	80014f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d113      	bne.n	8001520 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	f043 0220 	orr.w	r2, r3, #32
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e007      	b.n	8001530 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b02      	cmp	r3, #2
 800152c:	d1cb      	bne.n	80014c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001544:	e028      	b.n	8001598 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f89c 	bl	8001688 <I2C_IsAcknowledgeFailed>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e026      	b.n	80015a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800155a:	f7ff f9f9 	bl	8000950 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	429a      	cmp	r2, r3
 8001568:	d302      	bcc.n	8001570 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d113      	bne.n	8001598 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f043 0220 	orr.w	r2, r3, #32
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e007      	b.n	80015a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d1cf      	bne.n	8001546 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80015bc:	e055      	b.n	800166a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f860 	bl	8001688 <I2C_IsAcknowledgeFailed>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e053      	b.n	800167a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0320 	and.w	r3, r3, #32
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d129      	bne.n	8001634 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d105      	bne.n	80015fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e03f      	b.n	800167a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800160e:	400b      	ands	r3, r1
 8001610:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e022      	b.n	800167a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001634:	f7ff f98c 	bl	8000950 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	429a      	cmp	r2, r3
 8001642:	d302      	bcc.n	800164a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10f      	bne.n	800166a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f043 0220 	orr.w	r2, r3, #32
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2220      	movs	r2, #32
 800165a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e007      	b.n	800167a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b04      	cmp	r3, #4
 8001676:	d1a2      	bne.n	80015be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	fe00e800 	.word	0xfe00e800

08001688 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	2b10      	cmp	r3, #16
 80016a0:	d151      	bne.n	8001746 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016a2:	e022      	b.n	80016ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016aa:	d01e      	beq.n	80016ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ac:	f7ff f950 	bl	8000950 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d302      	bcc.n	80016c2 <I2C_IsAcknowledgeFailed+0x3a>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d113      	bne.n	80016ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f043 0220 	orr.w	r2, r3, #32
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2220      	movs	r2, #32
 80016d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e02e      	b.n	8001748 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d1d5      	bne.n	80016a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2210      	movs	r2, #16
 80016fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2220      	movs	r2, #32
 8001706:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff fe71 	bl	80013f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <I2C_IsAcknowledgeFailed+0xc8>)
 800171a:	400b      	ands	r3, r1
 800171c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f043 0204 	orr.w	r2, r3, #4
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	fe00e800 	.word	0xfe00e800

08001754 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	817b      	strh	r3, [r7, #10]
 8001762:	4613      	mov	r3, r2
 8001764:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	0d5b      	lsrs	r3, r3, #21
 8001770:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <I2C_TransferConfig+0x58>)
 8001776:	430b      	orrs	r3, r1
 8001778:	43db      	mvns	r3, r3
 800177a:	ea02 0103 	and.w	r1, r2, r3
 800177e:	897b      	ldrh	r3, [r7, #10]
 8001780:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001784:	7a7b      	ldrb	r3, [r7, #9]
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	431a      	orrs	r2, r3
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	431a      	orrs	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	03ff63ff 	.word	0x03ff63ff

080017b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	d138      	bne.n	8001838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e032      	b.n	800183a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6819      	ldr	r1, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b20      	cmp	r3, #32
 800185a:	d139      	bne.n	80018d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001866:	2302      	movs	r3, #2
 8001868:	e033      	b.n	80018d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2224      	movs	r2, #36	; 0x24
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	2b06      	cmp	r3, #6
 80018f2:	d00a      	beq.n	800190a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e03f      	b.n	8001986 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e03d      	b.n	8001986 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001912:	491f      	ldr	r1, [pc, #124]	; (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4313      	orrs	r3, r2
 8001918:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800191a:	f7ff f819 	bl	8000950 <HAL_GetTick>
 800191e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001920:	e009      	b.n	8001936 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001922:	f7ff f815 	bl	8000950 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001930:	d901      	bls.n	8001936 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e027      	b.n	8001986 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001942:	d1ee      	bne.n	8001922 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b1e      	cmp	r3, #30
 8001948:	d008      	beq.n	800195c <HAL_PWREx_ConfigSupply+0x7c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b2e      	cmp	r3, #46	; 0x2e
 800194e:	d005      	beq.n	800195c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b1d      	cmp	r3, #29
 8001954:	d002      	beq.n	800195c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b2d      	cmp	r3, #45	; 0x2d
 800195a:	d113      	bne.n	8001984 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800195c:	f7fe fff8 	bl	8000950 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001962:	e009      	b.n	8001978 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001964:	f7fe fff4 	bl	8000950 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001972:	d901      	bls.n	8001978 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e006      	b.n	8001986 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_PWREx_ConfigSupply+0xb0>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0311 	and.w	r3, r3, #17
 8001980:	2b11      	cmp	r3, #17
 8001982:	d1ef      	bne.n	8001964 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	58024800 	.word	0x58024800

08001994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e37a      	b.n	800209c <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8087 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b4:	4ba0      	ldr	r3, [pc, #640]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019be:	4b9e      	ldr	r3, [pc, #632]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d007      	beq.n	80019da <HAL_RCC_OscConfig+0x46>
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	2b18      	cmp	r3, #24
 80019ce:	d110      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5e>
 80019d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d10b      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019da:	4b97      	ldr	r3, [pc, #604]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d06c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x12c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d168      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e354      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x76>
 80019fc:	4b8e      	ldr	r3, [pc, #568]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a8d      	ldr	r2, [pc, #564]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e02e      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x98>
 8001a12:	4b89      	ldr	r3, [pc, #548]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a88      	ldr	r2, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b86      	ldr	r3, [pc, #536]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a85      	ldr	r2, [pc, #532]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e01d      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0xbc>
 8001a36:	4b80      	ldr	r3, [pc, #512]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7f      	ldr	r2, [pc, #508]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b7d      	ldr	r3, [pc, #500]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7c      	ldr	r2, [pc, #496]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0xd4>
 8001a50:	4b79      	ldr	r3, [pc, #484]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a78      	ldr	r2, [pc, #480]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b76      	ldr	r3, [pc, #472]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a75      	ldr	r2, [pc, #468]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7fe ff6e 	bl	8000950 <HAL_GetTick>
 8001a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a78:	f7fe ff6a 	bl	8000950 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e308      	b.n	800209c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a8a:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0xe4>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7fe ff5a 	bl	8000950 <HAL_GetTick>
 8001a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7fe ff56 	bl	8000950 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e2f4      	b.n	800209c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ab2:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x10c>
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d06d      	beq.n	8001baa <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ace:	4b5a      	ldr	r3, [pc, #360]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ad6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_RCC_OscConfig+0x160>
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b18      	cmp	r3, #24
 8001ae8:	d11b      	bne.n	8001b22 <HAL_RCC_OscConfig+0x18e>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d116      	bne.n	8001b22 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_OscConfig+0x178>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e2c7      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	4947      	ldr	r1, [pc, #284]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b20:	e043      	b.n	8001baa <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d026      	beq.n	8001b78 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b2a:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 0219 	bic.w	r2, r3, #25
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4940      	ldr	r1, [pc, #256]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7fe ff08 	bl	8000950 <HAL_GetTick>
 8001b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b44:	f7fe ff04 	bl	8000950 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e2a2      	b.n	800209c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b56:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	061b      	lsls	r3, r3, #24
 8001b70:	4931      	ldr	r1, [pc, #196]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
 8001b76:	e018      	b.n	8001baa <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2e      	ldr	r2, [pc, #184]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7fe fee4 	bl	8000950 <HAL_GetTick>
 8001b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7fe fee0 	bl	8000950 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e27e      	b.n	800209c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d06c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d007      	beq.n	8001bdc <HAL_RCC_OscConfig+0x248>
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b18      	cmp	r3, #24
 8001bd0:	d11b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x276>
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d116      	bne.n	8001c0a <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x260>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e253      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	490d      	ldr	r1, [pc, #52]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c08:	e042      	b.n	8001c90 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d025      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_RCC_OscConfig+0x2a4>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7fe fe97 	bl	8000950 <HAL_GetTick>
 8001c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c26:	f7fe fe93 	bl	8000950 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d903      	bls.n	8001c3c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e231      	b.n	800209c <HAL_RCC_OscConfig+0x708>
 8001c38:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c3c:	4ba3      	ldr	r3, [pc, #652]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ee      	beq.n	8001c26 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c48:	4ba0      	ldr	r3, [pc, #640]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	499d      	ldr	r1, [pc, #628]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60cb      	str	r3, [r1, #12]
 8001c5c:	e018      	b.n	8001c90 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c5e:	4b9b      	ldr	r3, [pc, #620]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a9a      	ldr	r2, [pc, #616]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7fe fe71 	bl	8000950 <HAL_GetTick>
 8001c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c72:	f7fe fe6d 	bl	8000950 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e20b      	b.n	800209c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c84:	4b91      	ldr	r3, [pc, #580]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f0      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d036      	beq.n	8001d0a <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d019      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca4:	4b89      	ldr	r3, [pc, #548]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ca8:	4a88      	ldr	r2, [pc, #544]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7fe fe4e 	bl	8000950 <HAL_GetTick>
 8001cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7fe fe4a 	bl	8000950 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1e8      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cca:	4b80      	ldr	r3, [pc, #512]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x324>
 8001cd6:	e018      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd8:	4b7c      	ldr	r3, [pc, #496]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cdc:	4a7b      	ldr	r2, [pc, #492]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7fe fe34 	bl	8000950 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7fe fe30 	bl	8000950 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1ce      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cfe:	4b73      	ldr	r3, [pc, #460]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d036      	beq.n	8001d84 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d019      	beq.n	8001d52 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d1e:	4b6b      	ldr	r3, [pc, #428]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6a      	ldr	r2, [pc, #424]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d2a:	f7fe fe11 	bl	8000950 <HAL_GetTick>
 8001d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d32:	f7fe fe0d 	bl	8000950 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e1ab      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d44:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x39e>
 8001d50:	e018      	b.n	8001d84 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d52:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5d      	ldr	r2, [pc, #372]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d5e:	f7fe fdf7 	bl	8000950 <HAL_GetTick>
 8001d62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d66:	f7fe fdf3 	bl	8000950 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e191      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d78:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8081 	beq.w	8001e94 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d92:	4b4f      	ldr	r3, [pc, #316]	; (8001ed0 <HAL_RCC_OscConfig+0x53c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a4e      	ldr	r2, [pc, #312]	; (8001ed0 <HAL_RCC_OscConfig+0x53c>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d9e:	f7fe fdd7 	bl	8000950 <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7fe fdd3 	bl	8000950 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e171      	b.n	800209c <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001db8:	4b45      	ldr	r3, [pc, #276]	; (8001ed0 <HAL_RCC_OscConfig+0x53c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x446>
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd0:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd8:	e02d      	b.n	8001e36 <HAL_RCC_OscConfig+0x4a2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x468>
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a39      	ldr	r2, [pc, #228]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a36      	ldr	r2, [pc, #216]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	e01c      	b.n	8001e36 <HAL_RCC_OscConfig+0x4a2>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x48a>
 8001e04:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCC_OscConfig+0x4a2>
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d015      	beq.n	8001e6a <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7fe fd87 	bl	8000950 <HAL_GetTick>
 8001e42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7fe fd83 	bl	8000950 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e11f      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ee      	beq.n	8001e46 <HAL_RCC_OscConfig+0x4b2>
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fd71 	bl	8000950 <HAL_GetTick>
 8001e6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe fd6d 	bl	8000950 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e109      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 80fe 	beq.w	800209a <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ea6:	2b18      	cmp	r3, #24
 8001ea8:	f000 80b9 	beq.w	800201e <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	f040 809a 	bne.w	8001fea <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_RCC_OscConfig+0x538>)
 8001ebc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fd45 	bl	8000950 <HAL_GetTick>
 8001ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ec8:	e00d      	b.n	8001ee6 <HAL_RCC_OscConfig+0x552>
 8001eca:	bf00      	nop
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7fe fd3c 	bl	8000950 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0da      	b.n	800209c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef2:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ef6:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <HAL_RCC_OscConfig+0x714>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	430a      	orrs	r2, r1
 8001f06:	4967      	ldr	r1, [pc, #412]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	628b      	str	r3, [r1, #40]	; 0x28
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	3b01      	subs	r3, #1
 8001f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	025b      	lsls	r3, r3, #9
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	3b01      	subs	r3, #1
 8001f28:	041b      	lsls	r3, r3, #16
 8001f2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	3b01      	subs	r3, #1
 8001f36:	061b      	lsls	r3, r3, #24
 8001f38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f3c:	4959      	ldr	r1, [pc, #356]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001f42:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	4a57      	ldr	r2, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f4e:	4b55      	ldr	r3, [pc, #340]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f52:	4b56      	ldr	r3, [pc, #344]	; (80020ac <HAL_RCC_OscConfig+0x718>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f5a:	00d2      	lsls	r2, r2, #3
 8001f5c:	4951      	ldr	r1, [pc, #324]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f62:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	f023 020c 	bic.w	r2, r3, #12
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	494d      	ldr	r1, [pc, #308]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	f023 0202 	bic.w	r2, r3, #2
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f80:	4948      	ldr	r1, [pc, #288]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	4a46      	ldr	r2, [pc, #280]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	4a43      	ldr	r2, [pc, #268]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a3a      	ldr	r2, [pc, #232]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7fe fcc5 	bl	8000950 <HAL_GetTick>
 8001fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fca:	f7fe fcc1 	bl	8000950 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e05f      	b.n	800209c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x636>
 8001fe8:	e057      	b.n	800209a <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fea:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8001ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fcab 	bl	8000950 <HAL_GetTick>
 8001ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe fca7 	bl	8000950 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e045      	b.n	800209c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f0      	bne.n	8001ffe <HAL_RCC_OscConfig+0x66a>
 800201c:	e03d      	b.n	800209a <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <HAL_RCC_OscConfig+0x710>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	2b01      	cmp	r3, #1
 8002030:	d031      	beq.n	8002096 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d12a      	bne.n	8002096 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d122      	bne.n	8002096 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d11a      	bne.n	8002096 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	0a5b      	lsrs	r3, r3, #9
 8002064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d111      	bne.n	8002096 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d108      	bne.n	8002096 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	0e1b      	lsrs	r3, r3, #24
 8002088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3730      	adds	r7, #48	; 0x30
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	58024400 	.word	0x58024400
 80020a8:	fffffc0c 	.word	0xfffffc0c
 80020ac:	ffff0007 	.word	0xffff0007

080020b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e19c      	b.n	80023fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020c4:	4b8a      	ldr	r3, [pc, #552]	; (80022f0 <HAL_RCC_ClockConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d910      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d2:	4b87      	ldr	r3, [pc, #540]	; (80022f0 <HAL_RCC_ClockConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 020f 	bic.w	r2, r3, #15
 80020da:	4985      	ldr	r1, [pc, #532]	; (80022f0 <HAL_RCC_ClockConfig+0x240>)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b83      	ldr	r3, [pc, #524]	; (80022f0 <HAL_RCC_ClockConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e184      	b.n	80023fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d010      	beq.n	8002122 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	4b7b      	ldr	r3, [pc, #492]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800210c:	429a      	cmp	r2, r3
 800210e:	d908      	bls.n	8002122 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002110:	4b78      	ldr	r3, [pc, #480]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	4975      	ldr	r1, [pc, #468]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 800211e:	4313      	orrs	r3, r2
 8002120:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d010      	beq.n	8002150 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	4b70      	ldr	r3, [pc, #448]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800213a:	429a      	cmp	r2, r3
 800213c:	d908      	bls.n	8002150 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	496a      	ldr	r1, [pc, #424]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 800214c:	4313      	orrs	r3, r2
 800214e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002168:	429a      	cmp	r2, r3
 800216a:	d908      	bls.n	800217e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800216c:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	495e      	ldr	r1, [pc, #376]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 800217a:	4313      	orrs	r3, r2
 800217c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002196:	429a      	cmp	r2, r3
 8002198:	d908      	bls.n	80021ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800219a:	4b56      	ldr	r3, [pc, #344]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4953      	ldr	r1, [pc, #332]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d010      	beq.n	80021da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d908      	bls.n	80021da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c8:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f023 020f 	bic.w	r2, r3, #15
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4947      	ldr	r1, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d055      	beq.n	8002292 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80021e6:	4b43      	ldr	r3, [pc, #268]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4940      	ldr	r1, [pc, #256]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002200:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d121      	bne.n	8002250 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0f6      	b.n	80023fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d107      	bne.n	8002228 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002218:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d115      	bne.n	8002250 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0ea      	b.n	80023fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002230:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0de      	b.n	80023fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002240:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0d6      	b.n	80023fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002250:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f023 0207 	bic.w	r2, r3, #7
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4925      	ldr	r1, [pc, #148]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 800225e:	4313      	orrs	r3, r2
 8002260:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe fb75 	bl	8000950 <HAL_GetTick>
 8002266:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002268:	e00a      	b.n	8002280 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226a:	f7fe fb71 	bl	8000950 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0be      	b.n	80023fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002280:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	429a      	cmp	r2, r3
 8002290:	d1eb      	bne.n	800226a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d010      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d208      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f023 020f 	bic.w	r2, r3, #15
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x244>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_ClockConfig+0x240>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d214      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_RCC_ClockConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 020f 	bic.w	r2, r3, #15
 80022d6:	4906      	ldr	r1, [pc, #24]	; (80022f0 <HAL_RCC_ClockConfig+0x240>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_RCC_ClockConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e086      	b.n	80023fe <HAL_RCC_ClockConfig+0x34e>
 80022f0:	52002000 	.word	0x52002000
 80022f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d010      	beq.n	8002326 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002310:	429a      	cmp	r2, r3
 8002312:	d208      	bcs.n	8002326 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002314:	4b3c      	ldr	r3, [pc, #240]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	4939      	ldr	r1, [pc, #228]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 8002322:	4313      	orrs	r3, r2
 8002324:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	4b34      	ldr	r3, [pc, #208]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800233e:	429a      	cmp	r2, r3
 8002340:	d208      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002342:	4b31      	ldr	r3, [pc, #196]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	492e      	ldr	r1, [pc, #184]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 8002350:	4313      	orrs	r3, r2
 8002352:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	d010      	beq.n	8002382 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800236c:	429a      	cmp	r2, r3
 800236e:	d208      	bcs.n	8002382 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4922      	ldr	r1, [pc, #136]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 800237e:	4313      	orrs	r3, r2
 8002380:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69da      	ldr	r2, [r3, #28]
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800239a:	429a      	cmp	r2, r3
 800239c:	d208      	bcs.n	80023b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4917      	ldr	r1, [pc, #92]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023b0:	f000 f834 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	4912      	ldr	r1, [pc, #72]	; (800240c <HAL_RCC_ClockConfig+0x35c>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_RCC_ClockConfig+0x358>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	4a0d      	ldr	r2, [pc, #52]	; (800240c <HAL_RCC_ClockConfig+0x35c>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x360>)
 80023e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_RCC_ClockConfig+0x364>)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x368>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fa62 	bl	80008bc <HAL_InitTick>
 80023f8:	4603      	mov	r3, r0
 80023fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	58024400 	.word	0x58024400
 800240c:	0800383c 	.word	0x0800383c
 8002410:	20000004 	.word	0x20000004
 8002414:	20000000 	.word	0x20000000
 8002418:	20000008 	.word	0x20000008

0800241c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002422:	4bb3      	ldr	r3, [pc, #716]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800242a:	2b18      	cmp	r3, #24
 800242c:	f200 8155 	bhi.w	80026da <HAL_RCC_GetSysClockFreq+0x2be>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	0800249d 	.word	0x0800249d
 800243c:	080026db 	.word	0x080026db
 8002440:	080026db 	.word	0x080026db
 8002444:	080026db 	.word	0x080026db
 8002448:	080026db 	.word	0x080026db
 800244c:	080026db 	.word	0x080026db
 8002450:	080026db 	.word	0x080026db
 8002454:	080026db 	.word	0x080026db
 8002458:	080024c3 	.word	0x080024c3
 800245c:	080026db 	.word	0x080026db
 8002460:	080026db 	.word	0x080026db
 8002464:	080026db 	.word	0x080026db
 8002468:	080026db 	.word	0x080026db
 800246c:	080026db 	.word	0x080026db
 8002470:	080026db 	.word	0x080026db
 8002474:	080026db 	.word	0x080026db
 8002478:	080024c9 	.word	0x080024c9
 800247c:	080026db 	.word	0x080026db
 8002480:	080026db 	.word	0x080026db
 8002484:	080026db 	.word	0x080026db
 8002488:	080026db 	.word	0x080026db
 800248c:	080026db 	.word	0x080026db
 8002490:	080026db 	.word	0x080026db
 8002494:	080026db 	.word	0x080026db
 8002498:	080024cf 	.word	0x080024cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800249c:	4b94      	ldr	r3, [pc, #592]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024a8:	4b91      	ldr	r3, [pc, #580]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	4a90      	ldr	r2, [pc, #576]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80024ba:	e111      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024bc:	4b8d      	ldr	r3, [pc, #564]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024be:	61bb      	str	r3, [r7, #24]
    break;
 80024c0:	e10e      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80024c2:	4b8d      	ldr	r3, [pc, #564]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024c4:	61bb      	str	r3, [r7, #24]
    break;
 80024c6:	e10b      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024ca:	61bb      	str	r3, [r7, #24]
    break;
 80024cc:	e108      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024ce:	4b88      	ldr	r3, [pc, #544]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80024d8:	4b85      	ldr	r3, [pc, #532]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80024e4:	4b82      	ldr	r3, [pc, #520]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80024ee:	4b80      	ldr	r3, [pc, #512]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f2:	08db      	lsrs	r3, r3, #3
 80024f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80e1 	beq.w	80026d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b02      	cmp	r3, #2
 8002516:	f000 8083 	beq.w	8002620 <HAL_RCC_GetSysClockFreq+0x204>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b02      	cmp	r3, #2
 800251e:	f200 80a1 	bhi.w	8002664 <HAL_RCC_GetSysClockFreq+0x248>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x114>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d056      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800252e:	e099      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002530:	4b6f      	ldr	r3, [pc, #444]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02d      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800253c:	4b6c      	ldr	r3, [pc, #432]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	08db      	lsrs	r3, r3, #3
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	4a6b      	ldr	r2, [pc, #428]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
 800254c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002566:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002576:	ed97 6a02 	vldr	s12, [r7, #8]
 800257a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800257e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800258a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002596:	e087      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002704 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025aa:	4b51      	ldr	r3, [pc, #324]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80025be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002700 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025da:	e065      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002708 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002602:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002700 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800260a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800260e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800261e:	e043      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800270c <HAL_RCC_GetSysClockFreq+0x2f0>
 800262e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800263a:	ee07 3a90 	vmov	s15, r3
 800263e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002642:	ed97 6a02 	vldr	s12, [r7, #8]
 8002646:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800264a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800264e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002662:	e021      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002708 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267e:	ee07 3a90 	vmov	s15, r3
 8002682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002686:	ed97 6a02 	vldr	s12, [r7, #8]
 800268a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002700 <HAL_RCC_GetSysClockFreq+0x2e4>
 800268e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800269a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800269e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	0a5b      	lsrs	r3, r3, #9
 80026ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b2:	3301      	adds	r3, #1
 80026b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80026c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026cc:	ee17 3a90 	vmov	r3, s15
 80026d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80026d2:	e005      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
    break;
 80026d8:	e002      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026dc:	61bb      	str	r3, [r7, #24]
    break;
 80026de:	bf00      	nop
  }

  return sysclockfreq;
 80026e0:	69bb      	ldr	r3, [r7, #24]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	58024400 	.word	0x58024400
 80026f4:	03d09000 	.word	0x03d09000
 80026f8:	003d0900 	.word	0x003d0900
 80026fc:	017d7840 	.word	0x017d7840
 8002700:	46000000 	.word	0x46000000
 8002704:	4c742400 	.word	0x4c742400
 8002708:	4a742400 	.word	0x4a742400
 800270c:	4bbebc20 	.word	0x4bbebc20

08002710 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002718:	2300      	movs	r3, #0
 800271a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800271c:	2300      	movs	r3, #0
 800271e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d03f      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002730:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002734:	d02a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002736:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800273a:	d824      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800273c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002740:	d018      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002742:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002746:	d81e      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800274c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002750:	d007      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002752:	e018      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002754:	4bab      	ldr	r3, [pc, #684]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	4aaa      	ldr	r2, [pc, #680]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800275a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002760:	e015      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	2102      	movs	r1, #2
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fecb 	bl	8003504 <RCCEx_PLL2_Config>
 800276e:	4603      	mov	r3, r0
 8002770:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002772:	e00c      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3324      	adds	r3, #36	; 0x24
 8002778:	2102      	movs	r1, #2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 ff74 	bl	8003668 <RCCEx_PLL3_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002784:	e003      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
      break;
 800278a:	e000      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800278c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002794:	4b9b      	ldr	r3, [pc, #620]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a0:	4998      	ldr	r1, [pc, #608]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	650b      	str	r3, [r1, #80]	; 0x50
 80027a6:	e001      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d03d      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d826      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027c0:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	080027dd 	.word	0x080027dd
 80027cc:	080027eb 	.word	0x080027eb
 80027d0:	080027fd 	.word	0x080027fd
 80027d4:	08002815 	.word	0x08002815
 80027d8:	08002815 	.word	0x08002815
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027dc:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	4a88      	ldr	r2, [pc, #544]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027e8:	e015      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3304      	adds	r3, #4
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fe87 	bl	8003504 <RCCEx_PLL2_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027fa:	e00c      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3324      	adds	r3, #36	; 0x24
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f000 ff30 	bl	8003668 <RCCEx_PLL3_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800280c:	e003      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	75fb      	strb	r3, [r7, #23]
      break;
 8002812:	e000      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800281c:	4b79      	ldr	r3, [pc, #484]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800281e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002820:	f023 0207 	bic.w	r2, r3, #7
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	4976      	ldr	r1, [pc, #472]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	650b      	str	r3, [r1, #80]	; 0x50
 800282e:	e001      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d051      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002846:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800284a:	d036      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800284c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002850:	d830      	bhi.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002852:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002856:	d032      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002858:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800285c:	d82a      	bhi.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800285e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002862:	d02e      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002864:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002868:	d824      	bhi.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800286a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286e:	d018      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002874:	d81e      	bhi.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800287a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800287e:	d007      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002880:	e018      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002882:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	4a5f      	ldr	r2, [pc, #380]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800288e:	e019      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fe34 	bl	8003504 <RCCEx_PLL2_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80028a0:	e010      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3324      	adds	r3, #36	; 0x24
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fedd 	bl	8003668 <RCCEx_PLL3_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028b2:	e007      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	75fb      	strb	r3, [r7, #23]
      break;
 80028b8:	e004      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80028ba:	bf00      	nop
 80028bc:	e002      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80028c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80028ca:	4b4e      	ldr	r3, [pc, #312]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80028d8:	494a      	ldr	r1, [pc, #296]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	658b      	str	r3, [r1, #88]	; 0x58
 80028de:	e001      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
 80028e2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d051      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80028f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80028fa:	d036      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80028fc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002900:	d830      	bhi.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002906:	d032      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8002908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800290c:	d82a      	bhi.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800290e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002912:	d02e      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002914:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002918:	d824      	bhi.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800291a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800291e:	d018      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8002920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002924:	d81e      	bhi.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800292a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800292e:	d007      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002930:	e018      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	4a33      	ldr	r2, [pc, #204]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800293e:	e019      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	2100      	movs	r1, #0
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fddc 	bl	8003504 <RCCEx_PLL2_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002950:	e010      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3324      	adds	r3, #36	; 0x24
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fe85 	bl	8003668 <RCCEx_PLL3_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002962:	e007      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	75fb      	strb	r3, [r7, #23]
      break;
 8002968:	e004      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10a      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002988:	491e      	ldr	r1, [pc, #120]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	658b      	str	r3, [r1, #88]	; 0x58
 800298e:	e001      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d035      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	2b30      	cmp	r3, #48	; 0x30
 80029a6:	d01c      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029a8:	2b30      	cmp	r3, #48	; 0x30
 80029aa:	d817      	bhi.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d00c      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d813      	bhi.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d016      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d10f      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80029c8:	e00e      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2102      	movs	r1, #2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fd97 	bl	8003504 <RCCEx_PLL2_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80029da:	e005      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	75fb      	strb	r3, [r7, #23]
      break;
 80029e0:	e002      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80029e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fa:	4902      	ldr	r1, [pc, #8]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a00:	e004      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002a02:	bf00      	nop
 8002a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d047      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a20:	d030      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8002a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a26:	d82a      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a2c:	d02c      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a32:	d824      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a38:	d018      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a3e:	d81e      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a48:	d007      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a4a:	e018      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a4c:	4bac      	ldr	r3, [pc, #688]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	4aab      	ldr	r2, [pc, #684]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a58:	e017      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fd4f 	bl	8003504 <RCCEx_PLL2_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a6a:	e00e      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3324      	adds	r3, #36	; 0x24
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fdf8 	bl	8003668 <RCCEx_PLL3_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002a7c:	e005      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
      break;
 8002a82:	e002      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d109      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a90:	4b9b      	ldr	r3, [pc, #620]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a94:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	4998      	ldr	r1, [pc, #608]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	650b      	str	r3, [r1, #80]	; 0x50
 8002aa2:	e001      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa4:	7dfb      	ldrb	r3, [r7, #23]
 8002aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d049      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002abc:	d02e      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8002abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac2:	d828      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ac8:	d02a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ace:	d822      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ad4:	d026      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002ad6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ada:	d81c      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae0:	d010      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8002ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ae6:	d816      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01d      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d111      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 fd03 	bl	8003504 <RCCEx_PLL2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b02:	e012      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3324      	adds	r3, #36	; 0x24
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fdac 	bl	8003668 <RCCEx_PLL3_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b14:	e009      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1a:	e006      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002b1c:	bf00      	nop
 8002b1e:	e004      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002b20:	bf00      	nop
 8002b22:	e002      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b30:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	4970      	ldr	r1, [pc, #448]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	650b      	str	r3, [r1, #80]	; 0x50
 8002b42:	e001      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d04b      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b5e:	d02e      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b64:	d828      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6a:	d02a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d822      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b76:	d026      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002b78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b7c:	d81c      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b82:	d010      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b88:	d816      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01d      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b92:	d111      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fcb2 	bl	8003504 <RCCEx_PLL2_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ba4:	e012      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3324      	adds	r3, #36	; 0x24
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fd5b 	bl	8003668 <RCCEx_PLL3_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002bb6:	e009      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	75fb      	strb	r3, [r7, #23]
      break;
 8002bbc:	e006      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e004      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e002      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e000      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002bd2:	4b4b      	ldr	r3, [pc, #300]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002be0:	4947      	ldr	r1, [pc, #284]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	658b      	str	r3, [r1, #88]	; 0x58
 8002be6:	e001      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	7dfb      	ldrb	r3, [r7, #23]
 8002bea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d02f      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c00:	d00e      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8002c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c06:	d814      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c10:	d10f      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	4a3a      	ldr	r2, [pc, #232]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c1e:	e00c      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fc6c 	bl	8003504 <RCCEx_PLL2_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002c30:	e003      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
      break;
 8002c36:	e000      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8002c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4c:	492c      	ldr	r1, [pc, #176]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	650b      	str	r3, [r1, #80]	; 0x50
 8002c52:	e001      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d032      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d81b      	bhi.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002cab 	.word	0x08002cab
 8002c78:	08002c85 	.word	0x08002c85
 8002c7c:	08002c93 	.word	0x08002c93
 8002c80:	08002cab 	.word	0x08002cab
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c90:	e00c      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2102      	movs	r1, #2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fc33 	bl	8003504 <RCCEx_PLL2_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ca2:	e003      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca8:	e000      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cb2:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4910      	ldr	r1, [pc, #64]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002cc4:	e001      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 808a 	beq.w	8002dec <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ce4:	f7fd fe34 	bl	8000950 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cea:	e00d      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fd fe30 	bl	8000950 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d906      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	75fb      	strb	r3, [r7, #23]
        break;
 8002cfe:	e009      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002d00:	58024400 	.word	0x58024400
 8002d04:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d08:	4bb9      	ldr	r3, [pc, #740]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0eb      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d166      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d1a:	4bb6      	ldr	r3, [pc, #728]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d24:	4053      	eors	r3, r2
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d013      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d2e:	4bb1      	ldr	r3, [pc, #708]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d38:	4bae      	ldr	r3, [pc, #696]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4aad      	ldr	r2, [pc, #692]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d44:	4bab      	ldr	r3, [pc, #684]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4aaa      	ldr	r2, [pc, #680]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d50:	4aa8      	ldr	r2, [pc, #672]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d60:	d115      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fd fdf5 	bl	8000950 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d68:	e00b      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fd fdf1 	bl	8000950 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d902      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	75fb      	strb	r3, [r7, #23]
            break;
 8002d80:	e005      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d82:	4b9c      	ldr	r3, [pc, #624]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ed      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d126      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8002da4:	4b93      	ldr	r3, [pc, #588]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002db2:	0919      	lsrs	r1, r3, #4
 8002db4:	4b90      	ldr	r3, [pc, #576]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002db6:	400b      	ands	r3, r1
 8002db8:	498e      	ldr	r1, [pc, #568]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	610b      	str	r3, [r1, #16]
 8002dbe:	e005      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8002dc0:	4b8c      	ldr	r3, [pc, #560]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	4a8b      	ldr	r2, [pc, #556]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002dca:	6113      	str	r3, [r2, #16]
 8002dcc:	4b89      	ldr	r3, [pc, #548]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dda:	4986      	ldr	r1, [pc, #536]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	670b      	str	r3, [r1, #112]	; 0x70
 8002de0:	e004      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	75bb      	strb	r3, [r7, #22]
 8002de6:	e001      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d07e      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfc:	2b28      	cmp	r3, #40	; 0x28
 8002dfe:	d867      	bhi.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8002e00:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8002e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e06:	bf00      	nop
 8002e08:	08002ed7 	.word	0x08002ed7
 8002e0c:	08002ed1 	.word	0x08002ed1
 8002e10:	08002ed1 	.word	0x08002ed1
 8002e14:	08002ed1 	.word	0x08002ed1
 8002e18:	08002ed1 	.word	0x08002ed1
 8002e1c:	08002ed1 	.word	0x08002ed1
 8002e20:	08002ed1 	.word	0x08002ed1
 8002e24:	08002ed1 	.word	0x08002ed1
 8002e28:	08002ead 	.word	0x08002ead
 8002e2c:	08002ed1 	.word	0x08002ed1
 8002e30:	08002ed1 	.word	0x08002ed1
 8002e34:	08002ed1 	.word	0x08002ed1
 8002e38:	08002ed1 	.word	0x08002ed1
 8002e3c:	08002ed1 	.word	0x08002ed1
 8002e40:	08002ed1 	.word	0x08002ed1
 8002e44:	08002ed1 	.word	0x08002ed1
 8002e48:	08002ebf 	.word	0x08002ebf
 8002e4c:	08002ed1 	.word	0x08002ed1
 8002e50:	08002ed1 	.word	0x08002ed1
 8002e54:	08002ed1 	.word	0x08002ed1
 8002e58:	08002ed1 	.word	0x08002ed1
 8002e5c:	08002ed1 	.word	0x08002ed1
 8002e60:	08002ed1 	.word	0x08002ed1
 8002e64:	08002ed1 	.word	0x08002ed1
 8002e68:	08002ed7 	.word	0x08002ed7
 8002e6c:	08002ed1 	.word	0x08002ed1
 8002e70:	08002ed1 	.word	0x08002ed1
 8002e74:	08002ed1 	.word	0x08002ed1
 8002e78:	08002ed1 	.word	0x08002ed1
 8002e7c:	08002ed1 	.word	0x08002ed1
 8002e80:	08002ed1 	.word	0x08002ed1
 8002e84:	08002ed1 	.word	0x08002ed1
 8002e88:	08002ed7 	.word	0x08002ed7
 8002e8c:	08002ed1 	.word	0x08002ed1
 8002e90:	08002ed1 	.word	0x08002ed1
 8002e94:	08002ed1 	.word	0x08002ed1
 8002e98:	08002ed1 	.word	0x08002ed1
 8002e9c:	08002ed1 	.word	0x08002ed1
 8002ea0:	08002ed1 	.word	0x08002ed1
 8002ea4:	08002ed1 	.word	0x08002ed1
 8002ea8:	08002ed7 	.word	0x08002ed7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fb26 	bl	8003504 <RCCEx_PLL2_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002ebc:	e00c      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3324      	adds	r3, #36	; 0x24
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fbcf 	bl	8003668 <RCCEx_PLL3_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002ece:	e003      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ed4:	e000      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8002ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ede:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eea:	4942      	ldr	r1, [pc, #264]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	654b      	str	r3, [r1, #84]	; 0x54
 8002ef0:	e001      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d037      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	d820      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002f0a:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f10:	08002f53 	.word	0x08002f53
 8002f14:	08002f29 	.word	0x08002f29
 8002f18:	08002f3b 	.word	0x08002f3b
 8002f1c:	08002f53 	.word	0x08002f53
 8002f20:	08002f53 	.word	0x08002f53
 8002f24:	08002f53 	.word	0x08002f53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fae8 	bl	8003504 <RCCEx_PLL2_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f38:	e00c      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3324      	adds	r3, #36	; 0x24
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fb91 	bl	8003668 <RCCEx_PLL3_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002f4a:	e003      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f50:	e000      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4923      	ldr	r1, [pc, #140]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8002f6c:	e001      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d040      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	d821      	bhi.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fd3 	.word	0x08002fd3
 8002f94:	08002fa9 	.word	0x08002fa9
 8002f98:	08002fbb 	.word	0x08002fbb
 8002f9c:	08002fd3 	.word	0x08002fd3
 8002fa0:	08002fd3 	.word	0x08002fd3
 8002fa4:	08002fd3 	.word	0x08002fd3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	2101      	movs	r1, #1
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 faa8 	bl	8003504 <RCCEx_PLL2_Config>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002fb8:	e00c      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3324      	adds	r3, #36	; 0x24
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fb51 	bl	8003668 <RCCEx_PLL3_Config>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002fca:	e003      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d110      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f023 0207 	bic.w	r2, r3, #7
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fe8:	4902      	ldr	r1, [pc, #8]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	658b      	str	r3, [r1, #88]	; 0x58
 8002fee:	e007      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002ff0:	58024800 	.word	0x58024800
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d04b      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003016:	d02e      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301c:	d828      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003022:	d02a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d822      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800302a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800302e:	d026      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003030:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003034:	d81c      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800303a:	d010      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800303c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003040:	d816      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01d      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800304a:	d111      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fa56 	bl	8003504 <RCCEx_PLL2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800305c:	e012      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3324      	adds	r3, #36	; 0x24
 8003062:	2102      	movs	r1, #2
 8003064:	4618      	mov	r0, r3
 8003066:	f000 faff 	bl	8003668 <RCCEx_PLL3_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800306e:	e009      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
      break;
 8003074:	e006      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003076:	bf00      	nop
 8003078:	e004      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800307a:	bf00      	nop
 800307c:	e002      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800308a:	4bb2      	ldr	r3, [pc, #712]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	49ae      	ldr	r1, [pc, #696]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800309a:	4313      	orrs	r3, r2
 800309c:	654b      	str	r3, [r1, #84]	; 0x54
 800309e:	e001      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d04b      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030ba:	d02e      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80030bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80030c0:	d828      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80030c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c6:	d02a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030cc:	d822      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80030ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030d2:	d026      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80030d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030d8:	d81c      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030de:	d010      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80030e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e4:	d816      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01d      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d111      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fa04 	bl	8003504 <RCCEx_PLL2_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003100:	e012      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3324      	adds	r3, #36	; 0x24
 8003106:	2102      	movs	r1, #2
 8003108:	4618      	mov	r0, r3
 800310a:	f000 faad 	bl	8003668 <RCCEx_PLL3_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003112:	e009      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
      break;
 8003118:	e006      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800311a:	bf00      	nop
 800311c:	e004      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800311e:	bf00      	nop
 8003120:	e002      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800312e:	4b89      	ldr	r3, [pc, #548]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313c:	4985      	ldr	r1, [pc, #532]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800313e:	4313      	orrs	r3, r2
 8003140:	658b      	str	r3, [r1, #88]	; 0x58
 8003142:	e001      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d04b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800315a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800315e:	d02e      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003160:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003164:	d828      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800316a:	d02a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800316c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003170:	d822      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003172:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003176:	d026      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003178:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800317c:	d81c      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800317e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003182:	d010      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003188:	d816      	bhi.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01d      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003192:	d111      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f9b2 	bl	8003504 <RCCEx_PLL2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031a4:	e012      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3324      	adds	r3, #36	; 0x24
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fa5b 	bl	8003668 <RCCEx_PLL3_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80031b6:	e009      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75fb      	strb	r3, [r7, #23]
      break;
 80031bc:	e006      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80031be:	bf00      	nop
 80031c0:	e004      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80031c2:	bf00      	nop
 80031c4:	e002      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80031ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031d2:	4b60      	ldr	r3, [pc, #384]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e0:	495c      	ldr	r1, [pc, #368]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	658b      	str	r3, [r1, #88]	; 0x58
 80031e6:	e001      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d018      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003200:	d10a      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3324      	adds	r3, #36	; 0x24
 8003206:	2102      	movs	r1, #2
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fa2d 	bl	8003668 <RCCEx_PLL3_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003218:	4b4e      	ldr	r3, [pc, #312]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003224:	494b      	ldr	r1, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003226:	4313      	orrs	r3, r2
 8003228:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003240:	d10a      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3324      	adds	r3, #36	; 0x24
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fa0d 	bl	8003668 <RCCEx_PLL3_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003258:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	493b      	ldr	r1, [pc, #236]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003268:	4313      	orrs	r3, r2
 800326a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d034      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800327e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003282:	d01d      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003288:	d817      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800328e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003292:	d009      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003294:	e011      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f931 	bl	8003504 <RCCEx_PLL2_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032a6:	e00c      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3324      	adds	r3, #36	; 0x24
 80032ac:	2102      	movs	r1, #2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f9da 	bl	8003668 <RCCEx_PLL3_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80032b8:	e003      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
      break;
 80032be:	e000      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80032c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c8:	4b22      	ldr	r3, [pc, #136]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d6:	491f      	ldr	r1, [pc, #124]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	658b      	str	r3, [r1, #88]	; 0x58
 80032dc:	e001      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
 80032e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d036      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032f8:	d01c      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80032fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032fe:	d816      	bhi.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003304:	d003      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800330a:	d007      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800330c:	e00f      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	4a10      	ldr	r2, [pc, #64]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800331a:	e00c      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3324      	adds	r3, #36	; 0x24
 8003320:	2101      	movs	r1, #1
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f9a0 	bl	8003668 <RCCEx_PLL3_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800332c:	e003      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
      break;
 8003332:	e000      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8003334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10d      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334a:	4902      	ldr	r1, [pc, #8]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800334c:	4313      	orrs	r3, r2
 800334e:	654b      	str	r3, [r1, #84]	; 0x54
 8003350:	e004      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8003352:	bf00      	nop
 8003354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d029      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d007      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003376:	e00f      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003378:	4b61      	ldr	r3, [pc, #388]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	4a60      	ldr	r2, [pc, #384]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800337e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003384:	e00b      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	2102      	movs	r1, #2
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f8b9 	bl	8003504 <RCCEx_PLL2_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003396:	e002      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	75fb      	strb	r3, [r7, #23]
      break;
 800339c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d109      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80033a4:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80033a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	4953      	ldr	r1, [pc, #332]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80033b6:	e001      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3324      	adds	r3, #36	; 0x24
 80033cc:	2102      	movs	r1, #2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f94a 	bl	8003668 <RCCEx_PLL3_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d030      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f2:	d017      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80033f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f8:	d811      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80033fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033fe:	d013      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003404:	d80b      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800340a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340e:	d106      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003410:	4b3b      	ldr	r3, [pc, #236]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	4a3a      	ldr	r2, [pc, #232]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800341a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800341c:	e007      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
      break;
 8003422:	e004      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003424:	bf00      	nop
 8003426:	e002      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800342c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800342e:	7dfb      	ldrb	r3, [r7, #23]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d109      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003440:	492f      	ldr	r1, [pc, #188]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003442:	4313      	orrs	r3, r2
 8003444:	654b      	str	r3, [r1, #84]	; 0x54
 8003446:	e001      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003448:	7dfb      	ldrb	r3, [r7, #23]
 800344a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003458:	4b29      	ldr	r3, [pc, #164]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800345a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003464:	4926      	ldr	r1, [pc, #152]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003466:	4313      	orrs	r3, r2
 8003468:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003482:	491f      	ldr	r1, [pc, #124]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003484:	4313      	orrs	r3, r2
 8003486:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00d      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800349a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800349e:	6113      	str	r3, [r2, #16]
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034aa:	4915      	ldr	r1, [pc, #84]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	da08      	bge.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80034ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034d6:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e4:	4906      	ldr	r1, [pc, #24]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80034ea:	7dbb      	ldrb	r3, [r7, #22]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	58024400 	.word	0x58024400

08003504 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003512:	4b53      	ldr	r3, [pc, #332]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b03      	cmp	r3, #3
 800351c:	d101      	bne.n	8003522 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e099      	b.n	8003656 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003522:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a4e      	ldr	r2, [pc, #312]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 8003528:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800352c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352e:	f7fd fa0f 	bl	8000950 <HAL_GetTick>
 8003532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003534:	e008      	b.n	8003548 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003536:	f7fd fa0b 	bl	8000950 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e086      	b.n	8003656 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003548:	4b45      	ldr	r3, [pc, #276]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f0      	bne.n	8003536 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003554:	4b42      	ldr	r3, [pc, #264]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	031b      	lsls	r3, r3, #12
 8003562:	493f      	ldr	r1, [pc, #252]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 8003564:	4313      	orrs	r3, r2
 8003566:	628b      	str	r3, [r1, #40]	; 0x28
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	3b01      	subs	r3, #1
 800356e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	3b01      	subs	r3, #1
 8003578:	025b      	lsls	r3, r3, #9
 800357a:	b29b      	uxth	r3, r3
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	3b01      	subs	r3, #1
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003598:	4931      	ldr	r1, [pc, #196]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800359e:	4b30      	ldr	r3, [pc, #192]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	492d      	ldr	r1, [pc, #180]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80035b0:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	f023 0220 	bic.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	4928      	ldr	r1, [pc, #160]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80035c2:	4b27      	ldr	r3, [pc, #156]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4a26      	ldr	r2, [pc, #152]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035c8:	f023 0310 	bic.w	r3, r3, #16
 80035cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <RCCEx_PLL2_Config+0x160>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	69d2      	ldr	r2, [r2, #28]
 80035da:	00d2      	lsls	r2, r2, #3
 80035dc:	4920      	ldr	r1, [pc, #128]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80035e2:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	4a1e      	ldr	r2, [pc, #120]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035e8:	f043 0310 	orr.w	r3, r3, #16
 80035ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a19      	ldr	r2, [pc, #100]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 80035fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003600:	e00f      	b.n	8003622 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d106      	bne.n	8003616 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 800360e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003612:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003614:	e005      	b.n	8003622 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	4a11      	ldr	r2, [pc, #68]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 800361c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003620:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 8003628:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800362c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362e:	f7fd f98f 	bl	8000950 <HAL_GetTick>
 8003632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003634:	e008      	b.n	8003648 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003636:	f7fd f98b 	bl	8000950 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e006      	b.n	8003656 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <RCCEx_PLL2_Config+0x15c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
 8003664:	ffff0007 	.word	0xffff0007

08003668 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003676:	4b53      	ldr	r3, [pc, #332]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b03      	cmp	r3, #3
 8003680:	d101      	bne.n	8003686 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e099      	b.n	80037ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003686:	4b4f      	ldr	r3, [pc, #316]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a4e      	ldr	r2, [pc, #312]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 800368c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003692:	f7fd f95d 	bl	8000950 <HAL_GetTick>
 8003696:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003698:	e008      	b.n	80036ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800369a:	f7fd f959 	bl	8000950 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e086      	b.n	80037ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036ac:	4b45      	ldr	r3, [pc, #276]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f0      	bne.n	800369a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80036b8:	4b42      	ldr	r3, [pc, #264]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	051b      	lsls	r3, r3, #20
 80036c6:	493f      	ldr	r1, [pc, #252]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	628b      	str	r3, [r1, #40]	; 0x28
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	3b01      	subs	r3, #1
 80036dc:	025b      	lsls	r3, r3, #9
 80036de:	b29b      	uxth	r3, r3
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	061b      	lsls	r3, r3, #24
 80036f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036fc:	4931      	ldr	r1, [pc, #196]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003702:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	492d      	ldr	r1, [pc, #180]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003710:	4313      	orrs	r3, r2
 8003712:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	4928      	ldr	r1, [pc, #160]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003722:	4313      	orrs	r3, r2
 8003724:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003726:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 800372c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <RCCEx_PLL3_Config+0x160>)
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	69d2      	ldr	r2, [r2, #28]
 800373e:	00d2      	lsls	r2, r2, #3
 8003740:	4920      	ldr	r1, [pc, #128]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003746:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003758:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 800375e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003764:	e00f      	b.n	8003786 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d106      	bne.n	800377a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800376c:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003778:	e005      	b.n	8003786 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800377a:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	4a11      	ldr	r2, [pc, #68]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003784:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003786:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a0e      	ldr	r2, [pc, #56]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003792:	f7fd f8dd 	bl	8000950 <HAL_GetTick>
 8003796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003798:	e008      	b.n	80037ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800379a:	f7fd f8d9 	bl	8000950 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e006      	b.n	80037ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <RCCEx_PLL3_Config+0x15c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	58024400 	.word	0x58024400
 80037c8:	ffff0007 	.word	0xffff0007

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4d0d      	ldr	r5, [pc, #52]	; (8003804 <__libc_init_array+0x38>)
 80037d0:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	2600      	movs	r6, #0
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	4d0b      	ldr	r5, [pc, #44]	; (800380c <__libc_init_array+0x40>)
 80037de:	4c0c      	ldr	r4, [pc, #48]	; (8003810 <__libc_init_array+0x44>)
 80037e0:	f000 f820 	bl	8003824 <_init>
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	2600      	movs	r6, #0
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	0800384c 	.word	0x0800384c
 8003808:	0800384c 	.word	0x0800384c
 800380c:	0800384c 	.word	0x0800384c
 8003810:	08003850 	.word	0x08003850

08003814 <memset>:
 8003814:	4402      	add	r2, r0
 8003816:	4603      	mov	r3, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
