
test_firmware_lora_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003248  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003528  08003528  00013528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800352c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  20000010  0800353c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000008c  0800353c  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014f2a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002492  00000000  00000000  00034f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a20  00000000  00000000  00037400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000948  00000000  00000000  00037e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000317dc  00000000  00000000  00038768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d09b  00000000  00000000  00069f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013d38c  00000000  00000000  00076fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001b436b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002890  00000000  00000000  001b43c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	20000010 	.word	0x20000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080034fc 	.word	0x080034fc

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	20000014 	.word	0x20000014
 8000308:	080034fc 	.word	0x080034fc

0800030c <Config_INA>:
uint8_t buf[12];


//configuring the ina219
int Config_INA(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af02      	add	r7, sp, #8
	buf[0]=config_reg;
 8000312:	2200      	movs	r2, #0
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <Config_INA+0x40>)
 8000316:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c4, ina_adder, buf, 1, 1000);
 8000318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031c:	b299      	uxth	r1, r3
 800031e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2301      	movs	r3, #1
 8000326:	4a09      	ldr	r2, [pc, #36]	; (800034c <Config_INA+0x40>)
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <Config_INA+0x44>)
 800032a:	f000 fe45 	bl	8000fb8 <HAL_I2C_Master_Transmit>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <Config_INA+0x48>)
 8000334:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <Config_INA+0x48>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <Config_INA+0x36>
	{
		return 0;
 800033e:	2300      	movs	r3, #0
 8000340:	e000      	b.n	8000344 <Config_INA+0x38>

	}
	else
	{
		return 1;
 8000342:	2301      	movs	r3, #1
	}

}
 8000344:	4618      	mov	r0, r3
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000078 	.word	0x20000078
 8000350:	2000002c 	.word	0x2000002c
 8000354:	20000084 	.word	0x20000084

08000358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035e:	f000 fa63 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000362:	f000 f809 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000366:	f000 f8b5 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C4_Init();
 800036a:	f000 f873 	bl	8000454 <MX_I2C4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int statuscode=Config_INA();
 800036e:	f7ff ffcd 	bl	800030c <Config_INA>
 8000372:	6078      	str	r0, [r7, #4]
  {
 8000374:	e7fb      	b.n	800036e <main+0x16>
	...

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b09c      	sub	sp, #112	; 0x70
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000382:	224c      	movs	r2, #76	; 0x4c
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 f8b0 	bl	80034ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2220      	movs	r2, #32
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f003 f8aa 	bl	80034ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000398:	2004      	movs	r0, #4
 800039a:	f001 f90d 	bl	80015b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <SystemClock_Config+0xd8>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a2a      	ldr	r2, [pc, #168]	; (8000450 <SystemClock_Config+0xd8>)
 80003a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b28      	ldr	r3, [pc, #160]	; (8000450 <SystemClock_Config+0xd8>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ba:	bf00      	nop
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <SystemClock_Config+0xd8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c8:	d1f8      	bne.n	80003bc <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ca:	2301      	movs	r3, #1
 80003cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003ce:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	2302      	movs	r3, #2
 80003d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d8:	2302      	movs	r3, #2
 80003da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80003dc:	2305      	movs	r3, #5
 80003de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 80003e0:	236e      	movs	r3, #110	; 0x6e
 80003e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80003e8:	2304      	movs	r3, #4
 80003ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003ec:	2302      	movs	r3, #2
 80003ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80003f0:	2308      	movs	r3, #8
 80003f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000400:	4618      	mov	r0, r3
 8000402:	f001 f933 	bl	800166c <HAL_RCC_OscConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800040c:	f000 f8b6 	bl	800057c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000410:	233f      	movs	r3, #63	; 0x3f
 8000412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000414:	2303      	movs	r3, #3
 8000416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800041c:	2308      	movs	r3, #8
 800041e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000420:	2340      	movs	r3, #64	; 0x40
 8000422:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000424:	2340      	movs	r3, #64	; 0x40
 8000426:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800042e:	2340      	movs	r3, #64	; 0x40
 8000430:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2103      	movs	r1, #3
 8000436:	4618      	mov	r0, r3
 8000438:	f001 fca6 	bl	8001d88 <HAL_RCC_ClockConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000442:	f000 f89b 	bl	800057c <Error_Handler>
  }
}
 8000446:	bf00      	nop
 8000448:	3770      	adds	r7, #112	; 0x70
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	58024800 	.word	0x58024800

08000454 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000458:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_I2C4_Init+0x74>)
 800045a:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <MX_I2C4_Init+0x78>)
 800045c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <MX_I2C4_Init+0x74>)
 8000460:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <MX_I2C4_Init+0x7c>)
 8000462:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <MX_I2C4_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <MX_I2C4_Init+0x74>)
 800046c:	2201      	movs	r2, #1
 800046e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MX_I2C4_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000476:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <MX_I2C4_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MX_I2C4_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000482:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_I2C4_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <MX_I2C4_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800048e:	480e      	ldr	r0, [pc, #56]	; (80004c8 <MX_I2C4_Init+0x74>)
 8000490:	f000 fd02 	bl	8000e98 <HAL_I2C_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800049a:	f000 f86f 	bl	800057c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800049e:	2100      	movs	r1, #0
 80004a0:	4809      	ldr	r0, [pc, #36]	; (80004c8 <MX_I2C4_Init+0x74>)
 80004a2:	f000 fff1 	bl	8001488 <HAL_I2CEx_ConfigAnalogFilter>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80004ac:	f000 f866 	bl	800057c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80004b0:	2100      	movs	r1, #0
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_I2C4_Init+0x74>)
 80004b4:	f001 f833 	bl	800151e <HAL_I2CEx_ConfigDigitalFilter>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80004be:	f000 f85d 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2000002c 	.word	0x2000002c
 80004cc:	58001c00 	.word	0x58001c00
 80004d0:	60404e72 	.word	0x60404e72

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <MX_GPIO_Init+0xa0>)
 80004ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f0:	4a20      	ldr	r2, [pc, #128]	; (8000574 <MX_GPIO_Init+0xa0>)
 80004f2:	f043 0302 	orr.w	r3, r3, #2
 80004f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_GPIO_Init+0xa0>)
 80004fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000500:	f003 0302 	and.w	r3, r3, #2
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_GPIO_Init+0xa0>)
 800050a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050e:	4a19      	ldr	r2, [pc, #100]	; (8000574 <MX_GPIO_Init+0xa0>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_GPIO_Init+0xa0>)
 800051a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_GPIO_Init+0xa0>)
 8000528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800052c:	4a11      	ldr	r2, [pc, #68]	; (8000574 <MX_GPIO_Init+0xa0>)
 800052e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_GPIO_Init+0xa0>)
 8000538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800053c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ERRORLED_Pin|GOLED_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	210c      	movs	r1, #12
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <MX_GPIO_Init+0xa4>)
 800054a:	f000 fc8b 	bl	8000e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRORLED_Pin GOLED_Pin */
  GPIO_InitStruct.Pin = ERRORLED_Pin|GOLED_Pin;
 800054e:	230c      	movs	r3, #12
 8000550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	4619      	mov	r1, r3
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_GPIO_Init+0xa4>)
 8000566:	f000 fad5 	bl	8000b14 <HAL_GPIO_Init>

}
 800056a:	bf00      	nop
 800056c:	3720      	adds	r7, #32
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	58024400 	.word	0x58024400
 8000578:	58020800 	.word	0x58020800

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_MspInit+0x30>)
 8000590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000594:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_MspInit+0x30>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_MspInit+0x30>)
 80005a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005a4:	f003 0302 	and.w	r3, r3, #2
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	58024400 	.word	0x58024400

080005bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0b6      	sub	sp, #216	; 0xd8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	22b4      	movs	r2, #180	; 0xb4
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 ff85 	bl	80034ec <memset>
  if(hi2c->Instance==I2C4)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a25      	ldr	r2, [pc, #148]	; (800067c <HAL_I2C_MspInit+0xc0>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d142      	bne.n	8000672 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80005ec:	2310      	movs	r3, #16
 80005ee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fef4 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000606:	f7ff ffb9 	bl	800057c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <HAL_I2C_MspInit+0xc4>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <HAL_I2C_MspInit+0xc4>)
 8000612:	f043 0302 	orr.w	r3, r3, #2
 8000616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <HAL_I2C_MspInit+0xc4>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000620:	f003 0302 	and.w	r3, r3, #2
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB8     ------> I2C4_SCL
    PB9     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000628:	f44f 7340 	mov.w	r3, #768	; 0x300
 800062c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000630:	2312      	movs	r3, #18
 8000632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8000642:	2306      	movs	r3, #6
 8000644:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <HAL_I2C_MspInit+0xc8>)
 8000650:	f000 fa60 	bl	8000b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_I2C_MspInit+0xc4>)
 8000656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800065a:	4a09      	ldr	r2, [pc, #36]	; (8000680 <HAL_I2C_MspInit+0xc4>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000660:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_I2C_MspInit+0xc4>)
 8000666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000672:	bf00      	nop
 8000674:	37d8      	adds	r7, #216	; 0xd8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	58001c00 	.word	0x58001c00
 8000680:	58024400 	.word	0x58024400
 8000684:	58020400 	.word	0x58020400

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f91a 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e0:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <SystemInit+0xd8>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006e6:	4a33      	ldr	r2, [pc, #204]	; (80007b4 <SystemInit+0xd8>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <SystemInit+0xdc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	2b06      	cmp	r3, #6
 80006fa:	d807      	bhi.n	800070c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fc:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <SystemInit+0xdc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f023 030f 	bic.w	r3, r3, #15
 8000704:	4a2c      	ldr	r2, [pc, #176]	; (80007b8 <SystemInit+0xdc>)
 8000706:	f043 0307 	orr.w	r3, r3, #7
 800070a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <SystemInit+0xe0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <SystemInit+0xe0>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemInit+0xe0>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <SystemInit+0xe0>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4926      	ldr	r1, [pc, #152]	; (80007bc <SystemInit+0xe0>)
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <SystemInit+0xe4>)
 8000726:	4013      	ands	r3, r2
 8000728:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800072a:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <SystemInit+0xdc>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	2b00      	cmp	r3, #0
 8000734:	d007      	beq.n	8000746 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <SystemInit+0xdc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f023 030f 	bic.w	r3, r3, #15
 800073e:	4a1e      	ldr	r2, [pc, #120]	; (80007b8 <SystemInit+0xdc>)
 8000740:	f043 0307 	orr.w	r3, r3, #7
 8000744:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <SystemInit+0xe0>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <SystemInit+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <SystemInit+0xe0>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <SystemInit+0xe0>)
 800075a:	4a1a      	ldr	r2, [pc, #104]	; (80007c4 <SystemInit+0xe8>)
 800075c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <SystemInit+0xe0>)
 8000760:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <SystemInit+0xec>)
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <SystemInit+0xe0>)
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <SystemInit+0xf0>)
 8000768:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <SystemInit+0xe0>)
 800076c:	2200      	movs	r2, #0
 800076e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <SystemInit+0xe0>)
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <SystemInit+0xf0>)
 8000774:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0xe0>)
 8000778:	2200      	movs	r2, #0
 800077a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0xe0>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <SystemInit+0xf0>)
 8000780:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <SystemInit+0xe0>)
 8000784:	2200      	movs	r2, #0
 8000786:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <SystemInit+0xe0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <SystemInit+0xe0>)
 800078e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000792:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <SystemInit+0xe0>)
 8000796:	2200      	movs	r2, #0
 8000798:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <SystemInit+0xf4>)
 800079c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SystemInit+0xd8>)
 80007a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00
 80007b8:	52002000 	.word	0x52002000
 80007bc:	58024400 	.word	0x58024400
 80007c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80007c4:	02020200 	.word	0x02020200
 80007c8:	01ff0000 	.word	0x01ff0000
 80007cc:	01010280 	.word	0x01010280
 80007d0:	52004000 	.word	0x52004000

080007d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800080c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d8:	f7ff ff80 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	; (8000814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	; (8000820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000802:	f002 fe4f 	bl	80034a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000806:	f7ff fda7 	bl	8000358 <main>
  bx  lr
 800080a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800080c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000818:	0800352c 	.word	0x0800352c
  ldr r2, =_sbss
 800081c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000820:	2000008c 	.word	0x2000008c

08000824 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC3_IRQHandler>
	...

08000828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082e:	2003      	movs	r0, #3
 8000830:	f000 f93e 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000834:	f001 fc5e 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 8000838:	4602      	mov	r2, r0
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_Init+0x68>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	0a1b      	lsrs	r3, r3, #8
 8000840:	f003 030f 	and.w	r3, r3, #15
 8000844:	4913      	ldr	r1, [pc, #76]	; (8000894 <HAL_Init+0x6c>)
 8000846:	5ccb      	ldrb	r3, [r1, r3]
 8000848:	f003 031f 	and.w	r3, r3, #31
 800084c:	fa22 f303 	lsr.w	r3, r2, r3
 8000850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_Init+0x68>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_Init+0x6c>)
 800085c:	5cd3      	ldrb	r3, [r2, r3]
 800085e:	f003 031f 	and.w	r3, r3, #31
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	fa22 f303 	lsr.w	r3, r2, r3
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <HAL_Init+0x70>)
 800086a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <HAL_Init+0x74>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f814 	bl	80008a0 <HAL_InitTick>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e002      	b.n	8000888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000882:	f7ff fe81 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58024400 	.word	0x58024400
 8000894:	08003514 	.word	0x08003514
 8000898:	20000004 	.word	0x20000004
 800089c:	20000000 	.word	0x20000000

080008a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_InitTick+0x60>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e021      	b.n	80008f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_InitTick+0x64>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_InitTick+0x60>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f915 	bl	8000afa <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f8ed 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_InitTick+0x68>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000000c 	.word	0x2000000c
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008

0800090c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000000c 	.word	0x2000000c
 8000930:	20000088 	.word	0x20000088

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000088 	.word	0x20000088

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <__NVIC_SetPriorityGrouping+0x40>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	4313      	orrs	r3, r2
 8000978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <__NVIC_SetPriorityGrouping+0x40>)
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	60d3      	str	r3, [r2, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00
 8000990:	05fa0000 	.word	0x05fa0000

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff47 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff5e 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff90 	bl	8000a04 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5f 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffb2 	bl	8000a6c <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000b22:	4b86      	ldr	r3, [pc, #536]	; (8000d3c <HAL_GPIO_Init+0x228>)
 8000b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000b26:	e18c      	b.n	8000e42 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 817e 	beq.w	8000e3c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d00b      	beq.n	8000b60 <HAL_GPIO_Init+0x4c>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d007      	beq.n	8000b60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b54:	2b11      	cmp	r3, #17
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	2b12      	cmp	r3, #18
 8000b5e:	d130      	bne.n	8000bc2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68da      	ldr	r2, [r3, #12]
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b96:	2201      	movs	r2, #1
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	f003 0201 	and.w	r2, r3, #1
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2203      	movs	r2, #3
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0xee>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b12      	cmp	r3, #18
 8000c00:	d123      	bne.n	8000c4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	08da      	lsrs	r2, r3, #3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3208      	adds	r2, #8
 8000c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	220f      	movs	r2, #15
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	691a      	ldr	r2, [r3, #16]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	f003 0307 	and.w	r3, r3, #7
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	08da      	lsrs	r2, r3, #3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3208      	adds	r2, #8
 8000c44:	69b9      	ldr	r1, [r7, #24]
 8000c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0203 	and.w	r2, r3, #3
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80d8 	beq.w	8000e3c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <HAL_GPIO_Init+0x22c>)
 8000c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c92:	4a2b      	ldr	r2, [pc, #172]	; (8000d40 <HAL_GPIO_Init+0x22c>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <HAL_GPIO_Init+0x22c>)
 8000c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000caa:	4a26      	ldr	r2, [pc, #152]	; (8000d44 <HAL_GPIO_Init+0x230>)
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a1d      	ldr	r2, [pc, #116]	; (8000d48 <HAL_GPIO_Init+0x234>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d04a      	beq.n	8000d6c <HAL_GPIO_Init+0x258>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <HAL_GPIO_Init+0x238>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d02b      	beq.n	8000d36 <HAL_GPIO_Init+0x222>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <HAL_GPIO_Init+0x23c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d025      	beq.n	8000d32 <HAL_GPIO_Init+0x21e>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a1a      	ldr	r2, [pc, #104]	; (8000d54 <HAL_GPIO_Init+0x240>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d01f      	beq.n	8000d2e <HAL_GPIO_Init+0x21a>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <HAL_GPIO_Init+0x244>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d019      	beq.n	8000d2a <HAL_GPIO_Init+0x216>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <HAL_GPIO_Init+0x248>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x212>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <HAL_GPIO_Init+0x24c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x20e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <HAL_GPIO_Init+0x250>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x20a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <HAL_GPIO_Init+0x254>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x206>
 8000d16:	2309      	movs	r3, #9
 8000d18:	e029      	b.n	8000d6e <HAL_GPIO_Init+0x25a>
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	e027      	b.n	8000d6e <HAL_GPIO_Init+0x25a>
 8000d1e:	2307      	movs	r3, #7
 8000d20:	e025      	b.n	8000d6e <HAL_GPIO_Init+0x25a>
 8000d22:	2306      	movs	r3, #6
 8000d24:	e023      	b.n	8000d6e <HAL_GPIO_Init+0x25a>
 8000d26:	2305      	movs	r3, #5
 8000d28:	e021      	b.n	8000d6e <HAL_GPIO_Init+0x25a>
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	e01f      	b.n	8000d6e <HAL_GPIO_Init+0x25a>
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e01d      	b.n	8000d6e <HAL_GPIO_Init+0x25a>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e01b      	b.n	8000d6e <HAL_GPIO_Init+0x25a>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e019      	b.n	8000d6e <HAL_GPIO_Init+0x25a>
 8000d3a:	bf00      	nop
 8000d3c:	58000080 	.word	0x58000080
 8000d40:	58024400 	.word	0x58024400
 8000d44:	58000400 	.word	0x58000400
 8000d48:	58020000 	.word	0x58020000
 8000d4c:	58020400 	.word	0x58020400
 8000d50:	58020800 	.word	0x58020800
 8000d54:	58020c00 	.word	0x58020c00
 8000d58:	58021000 	.word	0x58021000
 8000d5c:	58021400 	.word	0x58021400
 8000d60:	58021800 	.word	0x58021800
 8000d64:	58021c00 	.word	0x58021c00
 8000d68:	58022400 	.word	0x58022400
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	f002 0203 	and.w	r2, r2, #3
 8000d74:	0092      	lsls	r2, r2, #2
 8000d76:	4093      	lsls	r3, r2
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d7e:	4938      	ldr	r1, [pc, #224]	; (8000e60 <HAL_GPIO_Init+0x34c>)
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3302      	adds	r3, #2
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f47f ae6b 	bne.w	8000b28 <HAL_GPIO_Init+0x14>
  }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3724      	adds	r7, #36	; 0x24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	58000400 	.word	0x58000400

08000e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
 8000e70:	4613      	mov	r3, r2
 8000e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e74:	787b      	ldrb	r3, [r7, #1]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000e80:	e003      	b.n	8000e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	041a      	lsls	r2, r3, #16
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	619a      	str	r2, [r3, #24]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e07f      	b.n	8000faa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d106      	bne.n	8000ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fb7c 	bl	80005bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2224      	movs	r2, #36	; 0x24
 8000ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0201 	bic.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ee8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ef8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d107      	bne.n	8000f12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	e006      	b.n	8000f20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d104      	bne.n	8000f32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_I2C_Init+0x11c>)
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691a      	ldr	r2, [r3, #16]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	ea42 0103 	orr.w	r1, r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	021a      	lsls	r2, r3, #8
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69d9      	ldr	r1, [r3, #28]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1a      	ldr	r2, [r3, #32]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0201 	orr.w	r2, r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2220      	movs	r2, #32
 8000f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	02008000 	.word	0x02008000

08000fb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	817b      	strh	r3, [r7, #10]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	f040 80da 	bne.w	800118e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_I2C_Master_Transmit+0x30>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e0d3      	b.n	8001190 <HAL_I2C_Master_Transmit+0x1d8>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ff0:	f7ff fca0 	bl	8000934 <HAL_GetTick>
 8000ff4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2319      	movs	r3, #25
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f000 f8f0 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0be      	b.n	8001190 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2221      	movs	r2, #33	; 0x21
 8001016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2210      	movs	r2, #16
 800101e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	893a      	ldrh	r2, [r7, #8]
 8001032:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103e:	b29b      	uxth	r3, r3
 8001040:	2bff      	cmp	r3, #255	; 0xff
 8001042:	d90e      	bls.n	8001062 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	22ff      	movs	r2, #255	; 0xff
 8001048:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104e:	b2da      	uxtb	r2, r3
 8001050:	8979      	ldrh	r1, [r7, #10]
 8001052:	4b51      	ldr	r3, [pc, #324]	; (8001198 <HAL_I2C_Master_Transmit+0x1e0>)
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 f9e6 	bl	800142c <I2C_TransferConfig>
 8001060:	e06c      	b.n	800113c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001066:	b29a      	uxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001070:	b2da      	uxtb	r2, r3
 8001072:	8979      	ldrh	r1, [r7, #10]
 8001074:	4b48      	ldr	r3, [pc, #288]	; (8001198 <HAL_I2C_Master_Transmit+0x1e0>)
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 f9d5 	bl	800142c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001082:	e05b      	b.n	800113c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001084:	697a      	ldr	r2, [r7, #20]
 8001086:	6a39      	ldr	r1, [r7, #32]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 f8ed 	bl	8001268 <I2C_WaitOnTXISFlagUntilTimeout>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e07b      	b.n	8001190 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010c0:	3b01      	subs	r3, #1
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d034      	beq.n	800113c <HAL_I2C_Master_Transmit+0x184>
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d130      	bne.n	800113c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	2200      	movs	r2, #0
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 f87f 	bl	80011e8 <I2C_WaitOnFlagUntilTimeout>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e04d      	b.n	8001190 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	2bff      	cmp	r3, #255	; 0xff
 80010fc:	d90e      	bls.n	800111c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001108:	b2da      	uxtb	r2, r3
 800110a:	8979      	ldrh	r1, [r7, #10]
 800110c:	2300      	movs	r3, #0
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 f989 	bl	800142c <I2C_TransferConfig>
 800111a:	e00f      	b.n	800113c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001120:	b29a      	uxth	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800112a:	b2da      	uxtb	r2, r3
 800112c:	8979      	ldrh	r1, [r7, #10]
 800112e:	2300      	movs	r3, #0
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 f978 	bl	800142c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001140:	b29b      	uxth	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d19e      	bne.n	8001084 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	6a39      	ldr	r1, [r7, #32]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f8cc 	bl	80012e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e01a      	b.n	8001190 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2220      	movs	r2, #32
 8001160:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6859      	ldr	r1, [r3, #4]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_I2C_Master_Transmit+0x1e4>)
 800116e:	400b      	ands	r3, r1
 8001170:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2220      	movs	r2, #32
 8001176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800118e:	2302      	movs	r3, #2
  }
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	80002000 	.word	0x80002000
 800119c:	fe00e800 	.word	0xfe00e800

080011a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d103      	bne.n	80011be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d007      	beq.n	80011dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0201 	orr.w	r2, r2, #1
 80011da:	619a      	str	r2, [r3, #24]
  }
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011f8:	e022      	b.n	8001240 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d01e      	beq.n	8001240 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001202:	f7ff fb97 	bl	8000934 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d302      	bcc.n	8001218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d113      	bne.n	8001240 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	f043 0220 	orr.w	r2, r3, #32
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2220      	movs	r2, #32
 8001228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e00f      	b.n	8001260 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	4013      	ands	r3, r2
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	429a      	cmp	r2, r3
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	429a      	cmp	r2, r3
 800125c:	d0cd      	beq.n	80011fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001274:	e02c      	b.n	80012d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 f870 	bl	8001360 <I2C_IsAcknowledgeFailed>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e02a      	b.n	80012e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d01e      	beq.n	80012d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001292:	f7ff fb4f 	bl	8000934 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d302      	bcc.n	80012a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d113      	bne.n	80012d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f043 0220 	orr.w	r2, r3, #32
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2220      	movs	r2, #32
 80012b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e007      	b.n	80012e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d1cb      	bne.n	8001276 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012f4:	e028      	b.n	8001348 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f000 f830 	bl	8001360 <I2C_IsAcknowledgeFailed>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e026      	b.n	8001358 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800130a:	f7ff fb13 	bl	8000934 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	429a      	cmp	r2, r3
 8001318:	d302      	bcc.n	8001320 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d113      	bne.n	8001348 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	f043 0220 	orr.w	r2, r3, #32
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2220      	movs	r2, #32
 8001330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e007      	b.n	8001358 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	2b20      	cmp	r3, #32
 8001354:	d1cf      	bne.n	80012f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b10      	cmp	r3, #16
 8001378:	d151      	bne.n	800141e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800137a:	e022      	b.n	80013c2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001382:	d01e      	beq.n	80013c2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001384:	f7ff fad6 	bl	8000934 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	429a      	cmp	r2, r3
 8001392:	d302      	bcc.n	800139a <I2C_IsAcknowledgeFailed+0x3a>
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d113      	bne.n	80013c2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f043 0220 	orr.w	r2, r3, #32
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e02e      	b.n	8001420 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	2b20      	cmp	r3, #32
 80013ce:	d1d5      	bne.n	800137c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2210      	movs	r2, #16
 80013d6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2220      	movs	r2, #32
 80013de:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff fedd 	bl	80011a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <I2C_IsAcknowledgeFailed+0xc8>)
 80013f2:	400b      	ands	r3, r1
 80013f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f043 0204 	orr.w	r2, r3, #4
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2220      	movs	r2, #32
 8001406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	fe00e800 	.word	0xfe00e800

0800142c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	817b      	strh	r3, [r7, #10]
 800143a:	4613      	mov	r3, r2
 800143c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	0d5b      	lsrs	r3, r3, #21
 8001448:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <I2C_TransferConfig+0x58>)
 800144e:	430b      	orrs	r3, r1
 8001450:	43db      	mvns	r3, r3
 8001452:	ea02 0103 	and.w	r1, r2, r3
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800145c:	7a7b      	ldrb	r3, [r7, #9]
 800145e:	041b      	lsls	r3, r3, #16
 8001460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	431a      	orrs	r2, r3
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	431a      	orrs	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	03ff63ff 	.word	0x03ff63ff

08001488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b20      	cmp	r3, #32
 800149c:	d138      	bne.n	8001510 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e032      	b.n	8001512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2224      	movs	r2, #36	; 0x24
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	e000      	b.n	8001512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001510:	2302      	movs	r3, #2
  }
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b20      	cmp	r3, #32
 8001532:	d139      	bne.n	80015a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800153e:	2302      	movs	r3, #2
 8001540:	e033      	b.n	80015aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2224      	movs	r2, #36	; 0x24
 800154e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001570:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2220      	movs	r2, #32
 8001598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e000      	b.n	80015aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015a8:	2302      	movs	r3, #2
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_PWREx_ConfigSupply+0xb0>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	2b06      	cmp	r3, #6
 80015ca:	d00a      	beq.n	80015e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015cc:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_PWREx_ConfigSupply+0xb0>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d001      	beq.n	80015de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e03f      	b.n	800165e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e03d      	b.n	800165e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_PWREx_ConfigSupply+0xb0>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80015ea:	491f      	ldr	r1, [pc, #124]	; (8001668 <HAL_PWREx_ConfigSupply+0xb0>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015f2:	f7ff f99f 	bl	8000934 <HAL_GetTick>
 80015f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015f8:	e009      	b.n	800160e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015fa:	f7ff f99b 	bl	8000934 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001608:	d901      	bls.n	800160e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e027      	b.n	800165e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_PWREx_ConfigSupply+0xb0>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800161a:	d1ee      	bne.n	80015fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b1e      	cmp	r3, #30
 8001620:	d008      	beq.n	8001634 <HAL_PWREx_ConfigSupply+0x7c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b2e      	cmp	r3, #46	; 0x2e
 8001626:	d005      	beq.n	8001634 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b1d      	cmp	r3, #29
 800162c:	d002      	beq.n	8001634 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b2d      	cmp	r3, #45	; 0x2d
 8001632:	d113      	bne.n	800165c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001634:	f7ff f97e 	bl	8000934 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800163a:	e009      	b.n	8001650 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800163c:	f7ff f97a 	bl	8000934 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800164a:	d901      	bls.n	8001650 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e006      	b.n	800165e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_PWREx_ConfigSupply+0xb0>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0311 	and.w	r3, r3, #17
 8001658:	2b11      	cmp	r3, #17
 800165a:	d1ef      	bne.n	800163c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	58024800 	.word	0x58024800

0800166c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e37a      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8087 	beq.w	800179a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168c:	4ba0      	ldr	r3, [pc, #640]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001696:	4b9e      	ldr	r3, [pc, #632]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169e:	2b10      	cmp	r3, #16
 80016a0:	d007      	beq.n	80016b2 <HAL_RCC_OscConfig+0x46>
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	2b18      	cmp	r3, #24
 80016a6:	d110      	bne.n	80016ca <HAL_RCC_OscConfig+0x5e>
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d10b      	bne.n	80016ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b2:	4b97      	ldr	r3, [pc, #604]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d06c      	beq.n	8001798 <HAL_RCC_OscConfig+0x12c>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d168      	bne.n	8001798 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e354      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x76>
 80016d4:	4b8e      	ldr	r3, [pc, #568]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a8d      	ldr	r2, [pc, #564]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80016da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e02e      	b.n	8001740 <HAL_RCC_OscConfig+0xd4>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x98>
 80016ea:	4b89      	ldr	r3, [pc, #548]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a88      	ldr	r2, [pc, #544]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80016f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b86      	ldr	r3, [pc, #536]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a85      	ldr	r2, [pc, #532]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e01d      	b.n	8001740 <HAL_RCC_OscConfig+0xd4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0xbc>
 800170e:	4b80      	ldr	r3, [pc, #512]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7f      	ldr	r2, [pc, #508]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a7c      	ldr	r2, [pc, #496]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0xd4>
 8001728:	4b79      	ldr	r3, [pc, #484]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a78      	ldr	r2, [pc, #480]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b76      	ldr	r3, [pc, #472]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a75      	ldr	r2, [pc, #468]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff f8f4 	bl	8000934 <HAL_GetTick>
 800174c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff f8f0 	bl	8000934 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e308      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001762:	4b6b      	ldr	r3, [pc, #428]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0xe4>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff f8e0 	bl	8000934 <HAL_GetTick>
 8001774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff f8dc 	bl	8000934 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e2f4      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800178a:	4b61      	ldr	r3, [pc, #388]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x10c>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d06d      	beq.n	8001882 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a6:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017b0:	4b57      	ldr	r3, [pc, #348]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_RCC_OscConfig+0x160>
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	2b18      	cmp	r3, #24
 80017c0:	d11b      	bne.n	80017fa <HAL_RCC_OscConfig+0x18e>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d116      	bne.n	80017fa <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_OscConfig+0x178>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e2c7      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	061b      	lsls	r3, r3, #24
 80017f2:	4947      	ldr	r1, [pc, #284]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f8:	e043      	b.n	8001882 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d026      	beq.n	8001850 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001802:	4b43      	ldr	r3, [pc, #268]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0219 	bic.w	r2, r3, #25
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	4940      	ldr	r1, [pc, #256]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001810:	4313      	orrs	r3, r2
 8001812:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff f88e 	bl	8000934 <HAL_GetTick>
 8001818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff f88a 	bl	8000934 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e2a2      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800182e:	4b38      	ldr	r3, [pc, #224]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	061b      	lsls	r3, r3, #24
 8001848:	4931      	ldr	r1, [pc, #196]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a2e      	ldr	r2, [pc, #184]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff f86a 	bl	8000934 <HAL_GetTick>
 8001860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff f866 	bl	8000934 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e27e      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b00      	cmp	r3, #0
 800188c:	d06c      	beq.n	8001968 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001896:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d007      	beq.n	80018b4 <HAL_RCC_OscConfig+0x248>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b18      	cmp	r3, #24
 80018a8:	d11b      	bne.n	80018e2 <HAL_RCC_OscConfig+0x276>
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d116      	bne.n	80018e2 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x260>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	2b80      	cmp	r3, #128	; 0x80
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e253      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	061b      	lsls	r3, r3, #24
 80018da:	490d      	ldr	r1, [pc, #52]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018e0:	e042      	b.n	8001968 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d025      	beq.n	8001936 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_RCC_OscConfig+0x2a4>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff f81d 	bl	8000934 <HAL_GetTick>
 80018fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018fe:	f7ff f819 	bl	8000934 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d903      	bls.n	8001914 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e231      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
 8001910:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001914:	4ba3      	ldr	r3, [pc, #652]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ee      	beq.n	80018fe <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001920:	4ba0      	ldr	r3, [pc, #640]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	499d      	ldr	r1, [pc, #628]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e018      	b.n	8001968 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001936:	4b9b      	ldr	r3, [pc, #620]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a9a      	ldr	r2, [pc, #616]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 800193c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7fe fff7 	bl	8000934 <HAL_GetTick>
 8001946:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800194a:	f7fe fff3 	bl	8000934 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e20b      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800195c:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d036      	beq.n	80019e2 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d019      	beq.n	80019b0 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197c:	4b89      	ldr	r3, [pc, #548]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 800197e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001980:	4a88      	ldr	r2, [pc, #544]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7fe ffd4 	bl	8000934 <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001990:	f7fe ffd0 	bl	8000934 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1e8      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019a2:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 80019a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x324>
 80019ae:	e018      	b.n	80019e2 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b0:	4b7c      	ldr	r3, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 80019b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b4:	4a7b      	ldr	r2, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7fe ffba 	bl	8000934 <HAL_GetTick>
 80019c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c4:	f7fe ffb6 	bl	8000934 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1ce      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 80019d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d036      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d019      	beq.n	8001a2a <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019f6:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a6a      	ldr	r2, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 80019fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a02:	f7fe ff97 	bl	8000934 <HAL_GetTick>
 8001a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a0a:	f7fe ff93 	bl	8000934 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1ab      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a1c:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x39e>
 8001a28:	e018      	b.n	8001a5c <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a2a:	4b5e      	ldr	r3, [pc, #376]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a5d      	ldr	r2, [pc, #372]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a36:	f7fe ff7d 	bl	8000934 <HAL_GetTick>
 8001a3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a3e:	f7fe ff79 	bl	8000934 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e191      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a50:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8081 	beq.w	8001b6c <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ba8 <HAL_RCC_OscConfig+0x53c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a4e      	ldr	r2, [pc, #312]	; (8001ba8 <HAL_RCC_OscConfig+0x53c>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a76:	f7fe ff5d 	bl	8000934 <HAL_GetTick>
 8001a7a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7fe ff59 	bl	8000934 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e171      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a90:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <HAL_RCC_OscConfig+0x53c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x446>
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a3e      	ldr	r2, [pc, #248]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_OscConfig+0x4a2>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x468>
 8001aba:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	4a39      	ldr	r2, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	e01c      	b.n	8001b0e <HAL_RCC_OscConfig+0x4a2>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x48a>
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0x4a2>
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d015      	beq.n	8001b42 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7fe ff0d 	bl	8000934 <HAL_GetTick>
 8001b1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7fe ff09 	bl	8000934 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e11f      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ee      	beq.n	8001b1e <HAL_RCC_OscConfig+0x4b2>
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b42:	f7fe fef7 	bl	8000934 <HAL_GetTick>
 8001b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7fe fef3 	bl	8000934 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e109      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ee      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80fe 	beq.w	8001d72 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b7e:	2b18      	cmp	r3, #24
 8001b80:	f000 80b9 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	f040 809a 	bne.w	8001cc2 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_RCC_OscConfig+0x538>)
 8001b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fecb 	bl	8000934 <HAL_GetTick>
 8001b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ba0:	e00d      	b.n	8001bbe <HAL_RCC_OscConfig+0x552>
 8001ba2:	bf00      	nop
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7fe fec2 	bl	8000934 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0da      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bca:	4b6c      	ldr	r3, [pc, #432]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bce:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x714>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bda:	0112      	lsls	r2, r2, #4
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	4967      	ldr	r1, [pc, #412]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	628b      	str	r3, [r1, #40]	; 0x28
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	3b01      	subs	r3, #1
 8001bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	061b      	lsls	r3, r3, #24
 8001c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c14:	4959      	ldr	r1, [pc, #356]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c1a:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c26:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	4b56      	ldr	r3, [pc, #344]	; (8001d84 <HAL_RCC_OscConfig+0x718>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c32:	00d2      	lsls	r2, r2, #3
 8001c34:	4951      	ldr	r1, [pc, #324]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c3a:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	f023 020c 	bic.w	r2, r3, #12
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c4c:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f023 0202 	bic.w	r2, r3, #2
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	4948      	ldr	r1, [pc, #288]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c6a:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	4a43      	ldr	r2, [pc, #268]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	4a40      	ldr	r2, [pc, #256]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c82:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	4a3d      	ldr	r2, [pc, #244]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7fe fe4b 	bl	8000934 <HAL_GetTick>
 8001c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7fe fe47 	bl	8000934 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e05f      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x636>
 8001cc0:	e057      	b.n	8001d72 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a2d      	ldr	r2, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7fe fe31 	bl	8000934 <HAL_GetTick>
 8001cd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7fe fe2d 	bl	8000934 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e045      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x66a>
 8001cf4:	e03d      	b.n	8001d72 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_RCC_OscConfig+0x710>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d031      	beq.n	8001d6e <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d12a      	bne.n	8001d6e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d122      	bne.n	8001d6e <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d11a      	bne.n	8001d6e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	0a5b      	lsrs	r3, r3, #9
 8001d3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d44:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d111      	bne.n	8001d6e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	0c1b      	lsrs	r3, r3, #16
 8001d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d108      	bne.n	8001d6e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	0e1b      	lsrs	r3, r3, #24
 8001d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d68:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3730      	adds	r7, #48	; 0x30
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	fffffc0c 	.word	0xfffffc0c
 8001d84:	ffff0007 	.word	0xffff0007

08001d88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e19c      	b.n	80020d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <HAL_RCC_ClockConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b87      	ldr	r3, [pc, #540]	; (8001fc8 <HAL_RCC_ClockConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 020f 	bic.w	r2, r3, #15
 8001db2:	4985      	ldr	r1, [pc, #532]	; (8001fc8 <HAL_RCC_ClockConfig+0x240>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b83      	ldr	r3, [pc, #524]	; (8001fc8 <HAL_RCC_ClockConfig+0x240>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e184      	b.n	80020d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d908      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001de8:	4b78      	ldr	r3, [pc, #480]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4975      	ldr	r1, [pc, #468]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d010      	beq.n	8001e28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	4b70      	ldr	r3, [pc, #448]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d908      	bls.n	8001e28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e16:	4b6d      	ldr	r3, [pc, #436]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	496a      	ldr	r1, [pc, #424]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	4b64      	ldr	r3, [pc, #400]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d908      	bls.n	8001e56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e44:	4b61      	ldr	r3, [pc, #388]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	495e      	ldr	r1, [pc, #376]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d010      	beq.n	8001e84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69da      	ldr	r2, [r3, #28]
 8001e66:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d908      	bls.n	8001e84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e72:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4953      	ldr	r1, [pc, #332]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d908      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f023 020f 	bic.w	r2, r3, #15
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4947      	ldr	r1, [pc, #284]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d055      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ebe:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	4940      	ldr	r1, [pc, #256]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d121      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0f6      	b.n	80020d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d107      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ef0:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d115      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0ea      	b.n	80020d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0de      	b.n	80020d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f18:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0d6      	b.n	80020d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f023 0207 	bic.w	r2, r3, #7
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4925      	ldr	r1, [pc, #148]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7fe fcfb 	bl	8000934 <HAL_GetTick>
 8001f3e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f42:	f7fe fcf7 	bl	8000934 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0be      	b.n	80020d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d1eb      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d010      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d208      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f023 020f 	bic.w	r2, r3, #15
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x244>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d214      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_RCC_ClockConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 020f 	bic.w	r2, r3, #15
 8001fae:	4906      	ldr	r1, [pc, #24]	; (8001fc8 <HAL_RCC_ClockConfig+0x240>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_RCC_ClockConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e086      	b.n	80020d6 <HAL_RCC_ClockConfig+0x34e>
 8001fc8:	52002000 	.word	0x52002000
 8001fcc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d010      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d208      	bcs.n	8001ffe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fec:	4b3c      	ldr	r3, [pc, #240]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	4939      	ldr	r1, [pc, #228]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d010      	beq.n	800202c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002016:	429a      	cmp	r2, r3
 8002018:	d208      	bcs.n	800202c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800201a:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	492e      	ldr	r1, [pc, #184]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 8002028:	4313      	orrs	r3, r2
 800202a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d010      	beq.n	800205a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002044:	429a      	cmp	r2, r3
 8002046:	d208      	bcs.n	800205a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4922      	ldr	r1, [pc, #136]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 8002056:	4313      	orrs	r3, r2
 8002058:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d010      	beq.n	8002088 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002072:	429a      	cmp	r2, r3
 8002074:	d208      	bcs.n	8002088 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4917      	ldr	r1, [pc, #92]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 8002084:	4313      	orrs	r3, r2
 8002086:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002088:	f000 f834 	bl	80020f4 <HAL_RCC_GetSysClockFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	4912      	ldr	r1, [pc, #72]	; (80020e4 <HAL_RCC_ClockConfig+0x35c>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_RCC_ClockConfig+0x358>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_RCC_ClockConfig+0x35c>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_RCC_ClockConfig+0x360>)
 80020be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x364>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x368>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fbe8 	bl	80008a0 <HAL_InitTick>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	58024400 	.word	0x58024400
 80020e4:	08003514 	.word	0x08003514
 80020e8:	20000004 	.word	0x20000004
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000008 	.word	0x20000008

080020f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020fa:	4bb3      	ldr	r3, [pc, #716]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002102:	2b18      	cmp	r3, #24
 8002104:	f200 8155 	bhi.w	80023b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002108:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <HAL_RCC_GetSysClockFreq+0x1c>)
 800210a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210e:	bf00      	nop
 8002110:	08002175 	.word	0x08002175
 8002114:	080023b3 	.word	0x080023b3
 8002118:	080023b3 	.word	0x080023b3
 800211c:	080023b3 	.word	0x080023b3
 8002120:	080023b3 	.word	0x080023b3
 8002124:	080023b3 	.word	0x080023b3
 8002128:	080023b3 	.word	0x080023b3
 800212c:	080023b3 	.word	0x080023b3
 8002130:	0800219b 	.word	0x0800219b
 8002134:	080023b3 	.word	0x080023b3
 8002138:	080023b3 	.word	0x080023b3
 800213c:	080023b3 	.word	0x080023b3
 8002140:	080023b3 	.word	0x080023b3
 8002144:	080023b3 	.word	0x080023b3
 8002148:	080023b3 	.word	0x080023b3
 800214c:	080023b3 	.word	0x080023b3
 8002150:	080021a1 	.word	0x080021a1
 8002154:	080023b3 	.word	0x080023b3
 8002158:	080023b3 	.word	0x080023b3
 800215c:	080023b3 	.word	0x080023b3
 8002160:	080023b3 	.word	0x080023b3
 8002164:	080023b3 	.word	0x080023b3
 8002168:	080023b3 	.word	0x080023b3
 800216c:	080023b3 	.word	0x080023b3
 8002170:	080021a7 	.word	0x080021a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002174:	4b94      	ldr	r3, [pc, #592]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002180:	4b91      	ldr	r3, [pc, #580]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	08db      	lsrs	r3, r3, #3
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	4a90      	ldr	r2, [pc, #576]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002192:	e111      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002194:	4b8d      	ldr	r3, [pc, #564]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002196:	61bb      	str	r3, [r7, #24]
    break;
 8002198:	e10e      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800219a:	4b8d      	ldr	r3, [pc, #564]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800219c:	61bb      	str	r3, [r7, #24]
    break;
 800219e:	e10b      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80021a0:	4b8c      	ldr	r3, [pc, #560]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021a2:	61bb      	str	r3, [r7, #24]
    break;
 80021a4:	e108      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021a6:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021b0:	4b85      	ldr	r3, [pc, #532]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021bc:	4b82      	ldr	r3, [pc, #520]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021c6:	4b80      	ldr	r3, [pc, #512]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ca:	08db      	lsrs	r3, r3, #3
 80021cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80e1 	beq.w	80023ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	f000 8083 	beq.w	80022f8 <HAL_RCC_GetSysClockFreq+0x204>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	f200 80a1 	bhi.w	800233c <HAL_RCC_GetSysClockFreq+0x248>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x114>
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d056      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002206:	e099      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002208:	4b6f      	ldr	r3, [pc, #444]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d02d      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002214:	4b6c      	ldr	r3, [pc, #432]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	08db      	lsrs	r3, r3, #3
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	4a6b      	ldr	r2, [pc, #428]	; (80023cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800223a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223e:	4b62      	ldr	r3, [pc, #392]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002252:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800225a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800226e:	e087      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800227a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800227e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002292:	ed97 6a02 	vldr	s12, [r7, #8]
 8002296:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800229a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800229e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022b2:	e065      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022c6:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022f6:	e043      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002302:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800230a:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800231a:	ed97 6a02 	vldr	s12, [r7, #8]
 800231e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800232a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800232e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800233a:	e021      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800234a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002356:	ee07 3a90 	vmov	s15, r3
 800235a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800235e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002362:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800236a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800236e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800237e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	0a5b      	lsrs	r3, r3, #9
 8002386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800238a:	3301      	adds	r3, #1
 800238c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002398:	edd7 6a07 	vldr	s13, [r7, #28]
 800239c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a4:	ee17 3a90 	vmov	r3, s15
 80023a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80023aa:	e005      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
    break;
 80023b0:	e002      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023b4:	61bb      	str	r3, [r7, #24]
    break;
 80023b6:	bf00      	nop
  }

  return sysclockfreq;
 80023b8:	69bb      	ldr	r3, [r7, #24]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	; 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	58024400 	.word	0x58024400
 80023cc:	03d09000 	.word	0x03d09000
 80023d0:	003d0900 	.word	0x003d0900
 80023d4:	017d7840 	.word	0x017d7840
 80023d8:	46000000 	.word	0x46000000
 80023dc:	4c742400 	.word	0x4c742400
 80023e0:	4a742400 	.word	0x4a742400
 80023e4:	4bbebc20 	.word	0x4bbebc20

080023e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023f0:	2300      	movs	r3, #0
 80023f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023f4:	2300      	movs	r3, #0
 80023f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03f      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002408:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800240c:	d02a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800240e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002412:	d824      	bhi.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002418:	d018      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800241a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800241e:	d81e      	bhi.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002428:	d007      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800242a:	e018      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800242c:	4bab      	ldr	r3, [pc, #684]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	4aaa      	ldr	r2, [pc, #680]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002438:	e015      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2102      	movs	r1, #2
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fecb 	bl	80031dc <RCCEx_PLL2_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800244a:	e00c      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3324      	adds	r3, #36	; 0x24
 8002450:	2102      	movs	r1, #2
 8002452:	4618      	mov	r0, r3
 8002454:	f000 ff74 	bl	8003340 <RCCEx_PLL3_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800245c:	e003      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
      break;
 8002462:	e000      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002466:	7dfb      	ldrb	r3, [r7, #23]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800246c:	4b9b      	ldr	r3, [pc, #620]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002478:	4998      	ldr	r1, [pc, #608]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	650b      	str	r3, [r1, #80]	; 0x50
 800247e:	e001      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d03d      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	2b04      	cmp	r3, #4
 8002496:	d826      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002498:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249e:	bf00      	nop
 80024a0:	080024b5 	.word	0x080024b5
 80024a4:	080024c3 	.word	0x080024c3
 80024a8:	080024d5 	.word	0x080024d5
 80024ac:	080024ed 	.word	0x080024ed
 80024b0:	080024ed 	.word	0x080024ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024b4:	4b89      	ldr	r3, [pc, #548]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	4a88      	ldr	r2, [pc, #544]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024c0:	e015      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fe87 	bl	80031dc <RCCEx_PLL2_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024d2:	e00c      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3324      	adds	r3, #36	; 0x24
 80024d8:	2100      	movs	r1, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 ff30 	bl	8003340 <RCCEx_PLL3_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024e4:	e003      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
      break;
 80024ea:	e000      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80024ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f4:	4b79      	ldr	r3, [pc, #484]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	f023 0207 	bic.w	r2, r3, #7
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	4976      	ldr	r1, [pc, #472]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	650b      	str	r3, [r1, #80]	; 0x50
 8002506:	e001      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002508:	7dfb      	ldrb	r3, [r7, #23]
 800250a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d051      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800251e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002522:	d036      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002524:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002528:	d830      	bhi.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800252a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800252e:	d032      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002534:	d82a      	bhi.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002536:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800253a:	d02e      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800253c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002540:	d824      	bhi.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d018      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002548:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254c:	d81e      	bhi.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002556:	d007      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002558:	e018      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800255a:	4b60      	ldr	r3, [pc, #384]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	4a5f      	ldr	r2, [pc, #380]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002566:	e019      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fe34 	bl	80031dc <RCCEx_PLL2_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002578:	e010      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3324      	adds	r3, #36	; 0x24
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fedd 	bl	8003340 <RCCEx_PLL3_Config>
 8002586:	4603      	mov	r3, r0
 8002588:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800258a:	e007      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	75fb      	strb	r3, [r7, #23]
      break;
 8002590:	e004      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002592:	bf00      	nop
 8002594:	e002      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002596:	bf00      	nop
 8002598:	e000      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800259a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80025a2:	4b4e      	ldr	r3, [pc, #312]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80025b0:	494a      	ldr	r1, [pc, #296]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	658b      	str	r3, [r1, #88]	; 0x58
 80025b6:	e001      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d051      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025ce:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80025d2:	d036      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80025d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80025d8:	d830      	bhi.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80025da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025de:	d032      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80025e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025e4:	d82a      	bhi.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80025e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025ea:	d02e      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80025ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025f0:	d824      	bhi.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80025f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025f6:	d018      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x242>
 80025f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025fc:	d81e      	bhi.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002606:	d007      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002608:	e018      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	4a33      	ldr	r2, [pc, #204]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002616:	e019      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3304      	adds	r3, #4
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fddc 	bl	80031dc <RCCEx_PLL2_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002628:	e010      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3324      	adds	r3, #36	; 0x24
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fe85 	bl	8003340 <RCCEx_PLL3_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800263a:	e007      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
      break;
 8002640:	e004      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002642:	bf00      	nop
 8002644:	e002      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800264a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002660:	491e      	ldr	r1, [pc, #120]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	658b      	str	r3, [r1, #88]	; 0x58
 8002666:	e001      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d035      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267c:	2b30      	cmp	r3, #48	; 0x30
 800267e:	d01c      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002680:	2b30      	cmp	r3, #48	; 0x30
 8002682:	d817      	bhi.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002684:	2b20      	cmp	r3, #32
 8002686:	d00c      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002688:	2b20      	cmp	r3, #32
 800268a:	d813      	bhi.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d016      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8002690:	2b10      	cmp	r3, #16
 8002692:	d10f      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800269a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80026a0:	e00e      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2102      	movs	r1, #2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fd97 	bl	80031dc <RCCEx_PLL2_Config>
 80026ae:	4603      	mov	r3, r0
 80026b0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80026b2:	e005      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	75fb      	strb	r3, [r7, #23]
      break;
 80026b8:	e002      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e000      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80026be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d2:	4902      	ldr	r1, [pc, #8]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80026d8:	e004      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80026da:	bf00      	nop
 80026dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d047      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026f8:	d030      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80026fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026fe:	d82a      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002704:	d02c      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8002706:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800270a:	d824      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800270c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002710:	d018      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002716:	d81e      	bhi.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d007      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002722:	e018      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002724:	4bac      	ldr	r3, [pc, #688]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	4aab      	ldr	r2, [pc, #684]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800272a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002730:	e017      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fd4f 	bl	80031dc <RCCEx_PLL2_Config>
 800273e:	4603      	mov	r3, r0
 8002740:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002742:	e00e      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3324      	adds	r3, #36	; 0x24
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fdf8 	bl	8003340 <RCCEx_PLL3_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002754:	e005      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
      break;
 800275a:	e002      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800275c:	bf00      	nop
 800275e:	e000      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8002760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002762:	7dfb      	ldrb	r3, [r7, #23]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002768:	4b9b      	ldr	r3, [pc, #620]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800276a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	4998      	ldr	r1, [pc, #608]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	650b      	str	r3, [r1, #80]	; 0x50
 800277a:	e001      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d049      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002794:	d02e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8002796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279a:	d828      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 800279c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027a0:	d02a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80027a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027a6:	d822      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 80027a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027ac:	d026      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x414>
 80027ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027b2:	d81c      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 80027b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027b8:	d010      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80027ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027be:	d816      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x406>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01d      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d111      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	2101      	movs	r1, #1
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fd03 	bl	80031dc <RCCEx_PLL2_Config>
 80027d6:	4603      	mov	r3, r0
 80027d8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027da:	e012      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	2101      	movs	r1, #1
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fdac 	bl	8003340 <RCCEx_PLL3_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80027ec:	e009      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
      break;
 80027f2:	e006      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80027f4:	bf00      	nop
 80027f6:	e004      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80027f8:	bf00      	nop
 80027fa:	e002      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80027fc:	bf00      	nop
 80027fe:	e000      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8002800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002808:	4b73      	ldr	r3, [pc, #460]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800280a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	4970      	ldr	r1, [pc, #448]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	650b      	str	r3, [r1, #80]	; 0x50
 800281a:	e001      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d04b      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002836:	d02e      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283c:	d828      	bhi.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002842:	d02a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d822      	bhi.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800284a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800284e:	d026      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002850:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002854:	d81c      	bhi.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800285a:	d010      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800285c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002860:	d816      	bhi.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01d      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800286a:	d111      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3304      	adds	r3, #4
 8002870:	2101      	movs	r1, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fcb2 	bl	80031dc <RCCEx_PLL2_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800287c:	e012      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3324      	adds	r3, #36	; 0x24
 8002882:	2101      	movs	r1, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fd5b 	bl	8003340 <RCCEx_PLL3_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800288e:	e009      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	75fb      	strb	r3, [r7, #23]
      break;
 8002894:	e006      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8002896:	bf00      	nop
 8002898:	e004      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800289a:	bf00      	nop
 800289c:	e002      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800289e:	bf00      	nop
 80028a0:	e000      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80028a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10a      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80028aa:	4b4b      	ldr	r3, [pc, #300]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028b8:	4947      	ldr	r1, [pc, #284]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	658b      	str	r3, [r1, #88]	; 0x58
 80028be:	e001      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d02f      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d8:	d00e      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80028da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028de:	d814      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d015      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80028e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028e8:	d10f      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ea:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80028f6:	e00c      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fc6c 	bl	80031dc <RCCEx_PLL2_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002908:	e003      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
      break;
 800290e:	e000      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8002910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002918:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800291a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002924:	492c      	ldr	r1, [pc, #176]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002926:	4313      	orrs	r3, r2
 8002928:	650b      	str	r3, [r1, #80]	; 0x50
 800292a:	e001      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d032      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002940:	2b03      	cmp	r3, #3
 8002942:	d81b      	bhi.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002983 	.word	0x08002983
 8002950:	0800295d 	.word	0x0800295d
 8002954:	0800296b 	.word	0x0800296b
 8002958:	08002983 	.word	0x08002983
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002968:	e00c      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	2102      	movs	r1, #2
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fc33 	bl	80031dc <RCCEx_PLL2_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800297a:	e003      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
      break;
 8002980:	e000      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4910      	ldr	r1, [pc, #64]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800299c:	e001      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 808a 	beq.w	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029bc:	f7fd ffba 	bl	8000934 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c2:	e00d      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fd ffb6 	bl	8000934 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d906      	bls.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	75fb      	strb	r3, [r7, #23]
        break;
 80029d6:	e009      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80029d8:	58024400 	.word	0x58024400
 80029dc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029e0:	4bb9      	ldr	r3, [pc, #740]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0eb      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d166      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029f2:	4bb6      	ldr	r3, [pc, #728]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80029f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029fc:	4053      	eors	r3, r2
 80029fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d013      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a06:	4bb1      	ldr	r3, [pc, #708]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a10:	4bae      	ldr	r3, [pc, #696]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4aad      	ldr	r2, [pc, #692]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a1c:	4bab      	ldr	r3, [pc, #684]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4aaa      	ldr	r2, [pc, #680]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002a28:	4aa8      	ldr	r2, [pc, #672]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a38:	d115      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fd ff7b 	bl	8000934 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a40:	e00b      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7fd ff77 	bl	8000934 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d902      	bls.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	75fb      	strb	r3, [r7, #23]
            break;
 8002a58:	e005      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a5a:	4b9c      	ldr	r3, [pc, #624]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0ed      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d126      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a7a:	d10d      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8002a7c:	4b93      	ldr	r3, [pc, #588]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a8a:	0919      	lsrs	r1, r3, #4
 8002a8c:	4b90      	ldr	r3, [pc, #576]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002a8e:	400b      	ands	r3, r1
 8002a90:	498e      	ldr	r1, [pc, #568]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	610b      	str	r3, [r1, #16]
 8002a96:	e005      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8002a98:	4b8c      	ldr	r3, [pc, #560]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	4a8b      	ldr	r2, [pc, #556]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002aa2:	6113      	str	r3, [r2, #16]
 8002aa4:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002aa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab2:	4986      	ldr	r1, [pc, #536]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	670b      	str	r3, [r1, #112]	; 0x70
 8002ab8:	e004      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	75bb      	strb	r3, [r7, #22]
 8002abe:	e001      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d07e      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad4:	2b28      	cmp	r3, #40	; 0x28
 8002ad6:	d867      	bhi.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002baf 	.word	0x08002baf
 8002ae4:	08002ba9 	.word	0x08002ba9
 8002ae8:	08002ba9 	.word	0x08002ba9
 8002aec:	08002ba9 	.word	0x08002ba9
 8002af0:	08002ba9 	.word	0x08002ba9
 8002af4:	08002ba9 	.word	0x08002ba9
 8002af8:	08002ba9 	.word	0x08002ba9
 8002afc:	08002ba9 	.word	0x08002ba9
 8002b00:	08002b85 	.word	0x08002b85
 8002b04:	08002ba9 	.word	0x08002ba9
 8002b08:	08002ba9 	.word	0x08002ba9
 8002b0c:	08002ba9 	.word	0x08002ba9
 8002b10:	08002ba9 	.word	0x08002ba9
 8002b14:	08002ba9 	.word	0x08002ba9
 8002b18:	08002ba9 	.word	0x08002ba9
 8002b1c:	08002ba9 	.word	0x08002ba9
 8002b20:	08002b97 	.word	0x08002b97
 8002b24:	08002ba9 	.word	0x08002ba9
 8002b28:	08002ba9 	.word	0x08002ba9
 8002b2c:	08002ba9 	.word	0x08002ba9
 8002b30:	08002ba9 	.word	0x08002ba9
 8002b34:	08002ba9 	.word	0x08002ba9
 8002b38:	08002ba9 	.word	0x08002ba9
 8002b3c:	08002ba9 	.word	0x08002ba9
 8002b40:	08002baf 	.word	0x08002baf
 8002b44:	08002ba9 	.word	0x08002ba9
 8002b48:	08002ba9 	.word	0x08002ba9
 8002b4c:	08002ba9 	.word	0x08002ba9
 8002b50:	08002ba9 	.word	0x08002ba9
 8002b54:	08002ba9 	.word	0x08002ba9
 8002b58:	08002ba9 	.word	0x08002ba9
 8002b5c:	08002ba9 	.word	0x08002ba9
 8002b60:	08002baf 	.word	0x08002baf
 8002b64:	08002ba9 	.word	0x08002ba9
 8002b68:	08002ba9 	.word	0x08002ba9
 8002b6c:	08002ba9 	.word	0x08002ba9
 8002b70:	08002ba9 	.word	0x08002ba9
 8002b74:	08002ba9 	.word	0x08002ba9
 8002b78:	08002ba9 	.word	0x08002ba9
 8002b7c:	08002ba9 	.word	0x08002ba9
 8002b80:	08002baf 	.word	0x08002baf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	2101      	movs	r1, #1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fb26 	bl	80031dc <RCCEx_PLL2_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002b94:	e00c      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3324      	adds	r3, #36	; 0x24
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fbcf 	bl	8003340 <RCCEx_PLL3_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002ba6:	e003      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	75fb      	strb	r3, [r7, #23]
      break;
 8002bac:	e000      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8002bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002bb6:	4b45      	ldr	r3, [pc, #276]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc2:	4942      	ldr	r1, [pc, #264]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	654b      	str	r3, [r1, #84]	; 0x54
 8002bc8:	e001      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d037      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d820      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002be2:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be8:	08002c2b 	.word	0x08002c2b
 8002bec:	08002c01 	.word	0x08002c01
 8002bf0:	08002c13 	.word	0x08002c13
 8002bf4:	08002c2b 	.word	0x08002c2b
 8002bf8:	08002c2b 	.word	0x08002c2b
 8002bfc:	08002c2b 	.word	0x08002c2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fae8 	bl	80031dc <RCCEx_PLL2_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c10:	e00c      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3324      	adds	r3, #36	; 0x24
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fb91 	bl	8003340 <RCCEx_PLL3_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c22:	e003      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
      break;
 8002c28:	e000      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f023 0207 	bic.w	r2, r3, #7
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4923      	ldr	r1, [pc, #140]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	654b      	str	r3, [r1, #84]	; 0x54
 8002c44:	e001      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d040      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d821      	bhi.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002cab 	.word	0x08002cab
 8002c6c:	08002c81 	.word	0x08002c81
 8002c70:	08002c93 	.word	0x08002c93
 8002c74:	08002cab 	.word	0x08002cab
 8002c78:	08002cab 	.word	0x08002cab
 8002c7c:	08002cab 	.word	0x08002cab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 faa8 	bl	80031dc <RCCEx_PLL2_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002c90:	e00c      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3324      	adds	r3, #36	; 0x24
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fb51 	bl	8003340 <RCCEx_PLL3_Config>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002ca2:	e003      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca8:	e000      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d110      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	f023 0207 	bic.w	r2, r3, #7
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc0:	4902      	ldr	r1, [pc, #8]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	658b      	str	r3, [r1, #88]	; 0x58
 8002cc6:	e007      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002cc8:	58024800 	.word	0x58024800
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d04b      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cee:	d02e      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf4:	d828      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfa:	d02a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d822      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d06:	d026      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d0c:	d81c      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d12:	d010      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d18:	d816      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01d      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d22:	d111      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fa56 	bl	80031dc <RCCEx_PLL2_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d34:	e012      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3324      	adds	r3, #36	; 0x24
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 faff 	bl	8003340 <RCCEx_PLL3_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d46:	e009      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d4c:	e006      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e004      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002d52:	bf00      	nop
 8002d54:	e002      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d62:	4bb2      	ldr	r3, [pc, #712]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d70:	49ae      	ldr	r1, [pc, #696]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	654b      	str	r3, [r1, #84]	; 0x54
 8002d76:	e001      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d04b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d92:	d02e      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002d94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d98:	d828      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9e:	d02a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	d822      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002da6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002daa:	d026      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002db0:	d81c      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db6:	d010      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dbc:	d816      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01d      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc6:	d111      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fa04 	bl	80031dc <RCCEx_PLL2_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002dd8:	e012      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3324      	adds	r3, #36	; 0x24
 8002dde:	2102      	movs	r1, #2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 faad 	bl	8003340 <RCCEx_PLL3_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002dea:	e009      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	75fb      	strb	r3, [r7, #23]
      break;
 8002df0:	e006      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002df2:	bf00      	nop
 8002df4:	e004      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002df6:	bf00      	nop
 8002df8:	e002      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002dfa:	bf00      	nop
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e06:	4b89      	ldr	r3, [pc, #548]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e14:	4985      	ldr	r1, [pc, #532]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	658b      	str	r3, [r1, #88]	; 0x58
 8002e1a:	e001      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d04b      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e36:	d02e      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002e38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002e3c:	d828      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e42:	d02a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e48:	d822      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002e4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e4e:	d026      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002e50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002e54:	d81c      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5a:	d010      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e60:	d816      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01d      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8002e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6a:	d111      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f9b2 	bl	80031dc <RCCEx_PLL2_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e7c:	e012      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3324      	adds	r3, #36	; 0x24
 8002e82:	2102      	movs	r1, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fa5b 	bl	8003340 <RCCEx_PLL3_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002e8e:	e009      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	75fb      	strb	r3, [r7, #23]
      break;
 8002e94:	e006      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002e96:	bf00      	nop
 8002e98:	e004      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e002      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002eaa:	4b60      	ldr	r3, [pc, #384]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb8:	495c      	ldr	r1, [pc, #368]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	658b      	str	r3, [r1, #88]	; 0x58
 8002ebe:	e001      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d018      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3324      	adds	r3, #36	; 0x24
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fa2d 	bl	8003340 <RCCEx_PLL3_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8002ef0:	4b4e      	ldr	r3, [pc, #312]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002efc:	494b      	ldr	r1, [pc, #300]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f18:	d10a      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3324      	adds	r3, #36	; 0x24
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fa0d 	bl	8003340 <RCCEx_PLL3_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f30:	4b3e      	ldr	r3, [pc, #248]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	493b      	ldr	r1, [pc, #236]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d034      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f5a:	d01d      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f60:	d817      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002f6c:	e011      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f931 	bl	80031dc <RCCEx_PLL2_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f7e:	e00c      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3324      	adds	r3, #36	; 0x24
 8002f84:	2102      	movs	r1, #2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 f9da 	bl	8003340 <RCCEx_PLL3_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002f90:	e003      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
      break;
 8002f96:	e000      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8002f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fae:	491f      	ldr	r1, [pc, #124]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	658b      	str	r3, [r1, #88]	; 0x58
 8002fb4:	e001      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d036      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fd0:	d01c      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fd6:	d816      	bhi.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe2:	d007      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8002fe4:	e00f      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	4a10      	ldr	r2, [pc, #64]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8002fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ff2:	e00c      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3324      	adds	r3, #36	; 0x24
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f9a0 	bl	8003340 <RCCEx_PLL3_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003004:	e003      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	75fb      	strb	r3, [r7, #23]
      break;
 800300a:	e000      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800300c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003022:	4902      	ldr	r1, [pc, #8]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003024:	4313      	orrs	r3, r2
 8003026:	654b      	str	r3, [r1, #84]	; 0x54
 8003028:	e004      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800302a:	bf00      	nop
 800302c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d029      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304c:	d007      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800304e:	e00f      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003050:	4b61      	ldr	r3, [pc, #388]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	4a60      	ldr	r2, [pc, #384]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800305c:	e00b      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	2102      	movs	r1, #2
 8003064:	4618      	mov	r0, r3
 8003066:	f000 f8b9 	bl	80031dc <RCCEx_PLL2_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800306e:	e002      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
      break;
 8003074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003076:	7dfb      	ldrb	r3, [r7, #23]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800307c:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800307e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003088:	4953      	ldr	r1, [pc, #332]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800308e:	e001      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3324      	adds	r3, #36	; 0x24
 80030a4:	2102      	movs	r1, #2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f94a 	bl	8003340 <RCCEx_PLL3_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d030      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ca:	d017      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80030cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030d0:	d811      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80030d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d6:	d013      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80030d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030dc:	d80b      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d010      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80030e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e6:	d106      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e8:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	4a3a      	ldr	r2, [pc, #232]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80030ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80030f4:	e007      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
      break;
 80030fa:	e004      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80030fc:	bf00      	nop
 80030fe:	e002      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003100:	bf00      	nop
 8003102:	e000      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800310c:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800310e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003118:	492f      	ldr	r1, [pc, #188]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	654b      	str	r3, [r1, #84]	; 0x54
 800311e:	e001      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003134:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313c:	4926      	ldr	r1, [pc, #152]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800313e:	4313      	orrs	r3, r2
 8003140:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315a:	491f      	ldr	r1, [pc, #124]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800315c:	4313      	orrs	r3, r2
 800315e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003172:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003176:	6113      	str	r3, [r2, #16]
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003182:	4915      	ldr	r1, [pc, #84]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	da08      	bge.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003194:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	490e      	ldr	r1, [pc, #56]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031bc:	4906      	ldr	r1, [pc, #24]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80031c2:	7dbb      	ldrb	r3, [r7, #22]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	58024400 	.word	0x58024400

080031dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80031ea:	4b53      	ldr	r3, [pc, #332]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d101      	bne.n	80031fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e099      	b.n	800332e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80031fa:	4b4f      	ldr	r3, [pc, #316]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 8003200:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003206:	f7fd fb95 	bl	8000934 <HAL_GetTick>
 800320a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800320c:	e008      	b.n	8003220 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800320e:	f7fd fb91 	bl	8000934 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e086      	b.n	800332e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003220:	4b45      	ldr	r3, [pc, #276]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800322c:	4b42      	ldr	r3, [pc, #264]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	031b      	lsls	r3, r3, #12
 800323a:	493f      	ldr	r1, [pc, #252]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 800323c:	4313      	orrs	r3, r2
 800323e:	628b      	str	r3, [r1, #40]	; 0x28
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	3b01      	subs	r3, #1
 8003246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	3b01      	subs	r3, #1
 8003250:	025b      	lsls	r3, r3, #9
 8003252:	b29b      	uxth	r3, r3
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	3b01      	subs	r3, #1
 800325c:	041b      	lsls	r3, r3, #16
 800325e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	3b01      	subs	r3, #1
 800326a:	061b      	lsls	r3, r3, #24
 800326c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003270:	4931      	ldr	r1, [pc, #196]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	492d      	ldr	r1, [pc, #180]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f023 0220 	bic.w	r2, r3, #32
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4928      	ldr	r1, [pc, #160]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800329a:	4b27      	ldr	r3, [pc, #156]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	4a26      	ldr	r2, [pc, #152]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032a0:	f023 0310 	bic.w	r3, r3, #16
 80032a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80032a6:	4b24      	ldr	r3, [pc, #144]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <RCCEx_PLL2_Config+0x160>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	69d2      	ldr	r2, [r2, #28]
 80032b2:	00d2      	lsls	r2, r2, #3
 80032b4:	4920      	ldr	r1, [pc, #128]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80032ba:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032c0:	f043 0310 	orr.w	r3, r3, #16
 80032c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d106      	bne.n	80032da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	4a19      	ldr	r2, [pc, #100]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032d8:	e00f      	b.n	80032fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d106      	bne.n	80032ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80032e0:	4b15      	ldr	r3, [pc, #84]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032ec:	e005      	b.n	80032fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	4a11      	ldr	r2, [pc, #68]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 8003300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003306:	f7fd fb15 	bl	8000934 <HAL_GetTick>
 800330a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800330c:	e008      	b.n	8003320 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800330e:	f7fd fb11 	bl	8000934 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e006      	b.n	800332e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <RCCEx_PLL2_Config+0x15c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	58024400 	.word	0x58024400
 800333c:	ffff0007 	.word	0xffff0007

08003340 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800334e:	4b53      	ldr	r3, [pc, #332]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b03      	cmp	r3, #3
 8003358:	d101      	bne.n	800335e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e099      	b.n	8003492 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800335e:	4b4f      	ldr	r3, [pc, #316]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a4e      	ldr	r2, [pc, #312]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336a:	f7fd fae3 	bl	8000934 <HAL_GetTick>
 800336e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003370:	e008      	b.n	8003384 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003372:	f7fd fadf 	bl	8000934 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e086      	b.n	8003492 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003384:	4b45      	ldr	r3, [pc, #276]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f0      	bne.n	8003372 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	051b      	lsls	r3, r3, #20
 800339e:	493f      	ldr	r1, [pc, #252]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	628b      	str	r3, [r1, #40]	; 0x28
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	025b      	lsls	r3, r3, #9
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	061b      	lsls	r3, r3, #24
 80033d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033d4:	4931      	ldr	r1, [pc, #196]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80033da:	4b30      	ldr	r3, [pc, #192]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	492d      	ldr	r1, [pc, #180]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4928      	ldr	r1, [pc, #160]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	4a26      	ldr	r2, [pc, #152]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 800340c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <RCCEx_PLL3_Config+0x160>)
 8003410:	4013      	ands	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	69d2      	ldr	r2, [r2, #28]
 8003416:	00d2      	lsls	r2, r2, #3
 8003418:	4920      	ldr	r1, [pc, #128]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800341e:	4b1f      	ldr	r3, [pc, #124]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	4a1e      	ldr	r2, [pc, #120]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	4a19      	ldr	r2, [pc, #100]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800343a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800343c:	e00f      	b.n	800345e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d106      	bne.n	8003452 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	4a14      	ldr	r2, [pc, #80]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 800344a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800344e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003450:	e005      	b.n	800345e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	4a11      	ldr	r2, [pc, #68]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800345c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800345e:	4b0f      	ldr	r3, [pc, #60]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a0e      	ldr	r2, [pc, #56]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346a:	f7fd fa63 	bl	8000934 <HAL_GetTick>
 800346e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003470:	e008      	b.n	8003484 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003472:	f7fd fa5f 	bl	8000934 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e006      	b.n	8003492 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <RCCEx_PLL3_Config+0x15c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	58024400 	.word	0x58024400
 80034a0:	ffff0007 	.word	0xffff0007

080034a4 <__libc_init_array>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	4d0d      	ldr	r5, [pc, #52]	; (80034dc <__libc_init_array+0x38>)
 80034a8:	4c0d      	ldr	r4, [pc, #52]	; (80034e0 <__libc_init_array+0x3c>)
 80034aa:	1b64      	subs	r4, r4, r5
 80034ac:	10a4      	asrs	r4, r4, #2
 80034ae:	2600      	movs	r6, #0
 80034b0:	42a6      	cmp	r6, r4
 80034b2:	d109      	bne.n	80034c8 <__libc_init_array+0x24>
 80034b4:	4d0b      	ldr	r5, [pc, #44]	; (80034e4 <__libc_init_array+0x40>)
 80034b6:	4c0c      	ldr	r4, [pc, #48]	; (80034e8 <__libc_init_array+0x44>)
 80034b8:	f000 f820 	bl	80034fc <_init>
 80034bc:	1b64      	subs	r4, r4, r5
 80034be:	10a4      	asrs	r4, r4, #2
 80034c0:	2600      	movs	r6, #0
 80034c2:	42a6      	cmp	r6, r4
 80034c4:	d105      	bne.n	80034d2 <__libc_init_array+0x2e>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034cc:	4798      	blx	r3
 80034ce:	3601      	adds	r6, #1
 80034d0:	e7ee      	b.n	80034b0 <__libc_init_array+0xc>
 80034d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d6:	4798      	blx	r3
 80034d8:	3601      	adds	r6, #1
 80034da:	e7f2      	b.n	80034c2 <__libc_init_array+0x1e>
 80034dc:	08003524 	.word	0x08003524
 80034e0:	08003524 	.word	0x08003524
 80034e4:	08003524 	.word	0x08003524
 80034e8:	08003528 	.word	0x08003528

080034ec <memset>:
 80034ec:	4402      	add	r2, r0
 80034ee:	4603      	mov	r3, r0
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d100      	bne.n	80034f6 <memset+0xa>
 80034f4:	4770      	bx	lr
 80034f6:	f803 1b01 	strb.w	r1, [r3], #1
 80034fa:	e7f9      	b.n	80034f0 <memset+0x4>

080034fc <_init>:
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fe:	bf00      	nop
 8003500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003502:	bc08      	pop	{r3}
 8003504:	469e      	mov	lr, r3
 8003506:	4770      	bx	lr

08003508 <_fini>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	bf00      	nop
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr
