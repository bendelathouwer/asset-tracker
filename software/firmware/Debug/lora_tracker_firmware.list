
lora_tracker_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e0  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004454  08004454  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800445c  0800445c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004460  08004460  00014460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08004470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004470  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014eee  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281c  00000000  00000000  00034f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00037750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  00038a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002793  00000000  00000000  00039c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fee  00000000  00000000  0003c3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104866  00000000  00000000  00050399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154bff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  00154c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	080043bc 	.word	0x080043bc

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	080043bc 	.word	0x080043bc

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b980 	b.w	800054c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	4688      	mov	r8, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 8084 	bne.w	800037c <__udivmoddi4+0x118>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d943      	bls.n	8000302 <__udivmoddi4+0x9e>
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	b142      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 8000280:	f1c2 0020 	rsb	r0, r2, #32
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4094      	lsls	r4, r2
 800028e:	ea40 0801 	orr.w	r8, r0, r1
 8000292:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000296:	0c23      	lsrs	r3, r4, #16
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fbb8 f6fc 	udiv	r6, r8, ip
 80002a0:	fb0c 8116 	mls	r1, ip, r6, r8
 80002a4:	fb06 f00e 	mul.w	r0, r6, lr
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	f106 31ff 	add.w	r1, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4298      	cmp	r0, r3
 80002ba:	f200 8131 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002be:	460e      	mov	r6, r1
 80002c0:	1a19      	subs	r1, r3, r0
 80002c2:	b2a3      	uxth	r3, r4
 80002c4:	fbb1 f0fc 	udiv	r0, r1, ip
 80002c8:	fb0c 1110 	mls	r1, ip, r0, r1
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0x84>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0x82>
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	f200 811a 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80002e6:	4618      	mov	r0, r3
 80002e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ec:	eba4 040e 	sub.w	r4, r4, lr
 80002f0:	2600      	movs	r6, #0
 80002f2:	b11d      	cbz	r5, 80002fc <__udivmoddi4+0x98>
 80002f4:	40d4      	lsrs	r4, r2
 80002f6:	2300      	movs	r3, #0
 80002f8:	e9c5 4300 	strd	r4, r3, [r5]
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xa2>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	2a00      	cmp	r2, #0
 800030c:	d152      	bne.n	80003b4 <__udivmoddi4+0x150>
 800030e:	1bcb      	subs	r3, r1, r7
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f f887 	uxth.w	r8, r7
 8000318:	2601      	movs	r6, #1
 800031a:	0c21      	lsrs	r1, r4, #16
 800031c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000320:	fb0e 301c 	mls	r0, lr, ip, r3
 8000324:	fb08 f90c 	mul.w	r9, r8, ip
 8000328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800032c:	4589      	cmp	r9, r1
 800032e:	d90b      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000330:	1879      	adds	r1, r7, r1
 8000332:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000336:	bf2c      	ite	cs
 8000338:	2001      	movcs	r0, #1
 800033a:	2000      	movcc	r0, #0
 800033c:	4589      	cmp	r9, r1
 800033e:	d902      	bls.n	8000346 <__udivmoddi4+0xe2>
 8000340:	2800      	cmp	r0, #0
 8000342:	f000 80f0 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000346:	469c      	mov	ip, r3
 8000348:	eba1 0109 	sub.w	r1, r1, r9
 800034c:	b2a3      	uxth	r3, r4
 800034e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000352:	fb0e 1110 	mls	r1, lr, r0, r1
 8000356:	fb08 f800 	mul.w	r8, r8, r0
 800035a:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035e:	45a0      	cmp	r8, r4
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x10e>
 8000362:	193c      	adds	r4, r7, r4
 8000364:	f100 33ff 	add.w	r3, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x10c>
 800036a:	45a0      	cmp	r8, r4
 800036c:	f200 80d2 	bhi.w	8000514 <__udivmoddi4+0x2b0>
 8000370:	4618      	mov	r0, r3
 8000372:	eba4 0408 	sub.w	r4, r4, r8
 8000376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037a:	e7ba      	b.n	80002f2 <__udivmoddi4+0x8e>
 800037c:	428b      	cmp	r3, r1
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x130>
 8000380:	2d00      	cmp	r5, #0
 8000382:	f000 80be 	beq.w	8000502 <__udivmoddi4+0x29e>
 8000386:	2600      	movs	r6, #0
 8000388:	e9c5 0100 	strd	r0, r1, [r5]
 800038c:	4630      	mov	r0, r6
 800038e:	4631      	mov	r1, r6
 8000390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000394:	fab3 f683 	clz	r6, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x1d4>
 800039c:	428b      	cmp	r3, r1
 800039e:	f0c0 80b3 	bcc.w	8000508 <__udivmoddi4+0x2a4>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f240 80b0 	bls.w	8000508 <__udivmoddi4+0x2a4>
 80003a8:	4630      	mov	r0, r6
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a6      	beq.n	80002fc <__udivmoddi4+0x98>
 80003ae:	e9c5 4800 	strd	r4, r8, [r5]
 80003b2:	e7a3      	b.n	80002fc <__udivmoddi4+0x98>
 80003b4:	4097      	lsls	r7, r2
 80003b6:	f1c2 0320 	rsb	r3, r2, #32
 80003ba:	fa01 f002 	lsl.w	r0, r1, r2
 80003be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c2:	40d9      	lsrs	r1, r3
 80003c4:	fa24 f303 	lsr.w	r3, r4, r3
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	4094      	lsls	r4, r2
 80003ce:	4303      	orrs	r3, r0
 80003d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d4:	0c1e      	lsrs	r6, r3, #16
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 fc08 	mul.w	ip, r0, r8
 80003de:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80003e2:	458c      	cmp	ip, r1
 80003e4:	d90e      	bls.n	8000404 <__udivmoddi4+0x1a0>
 80003e6:	1879      	adds	r1, r7, r1
 80003e8:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ec:	bf2c      	ite	cs
 80003ee:	f04f 0901 	movcs.w	r9, #1
 80003f2:	f04f 0900 	movcc.w	r9, #0
 80003f6:	458c      	cmp	ip, r1
 80003f8:	d903      	bls.n	8000402 <__udivmoddi4+0x19e>
 80003fa:	f1b9 0f00 	cmp.w	r9, #0
 80003fe:	f000 8096 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000402:	4630      	mov	r0, r6
 8000404:	eba1 010c 	sub.w	r1, r1, ip
 8000408:	b29b      	uxth	r3, r3
 800040a:	fbb1 f6fe 	udiv	r6, r1, lr
 800040e:	fb0e 1116 	mls	r1, lr, r6, r1
 8000412:	fb06 fc08 	mul.w	ip, r6, r8
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	458c      	cmp	ip, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x1ca>
 800041e:	1879      	adds	r1, r7, r1
 8000420:	f106 33ff 	add.w	r3, r6, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x1c8>
 8000426:	458c      	cmp	ip, r1
 8000428:	f200 8088 	bhi.w	800053c <__udivmoddi4+0x2d8>
 800042c:	461e      	mov	r6, r3
 800042e:	eba1 030c 	sub.w	r3, r1, ip
 8000432:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000436:	e770      	b.n	800031a <__udivmoddi4+0xb6>
 8000438:	f1c6 0720 	rsb	r7, r6, #32
 800043c:	fa03 f406 	lsl.w	r4, r3, r6
 8000440:	fa02 fc06 	lsl.w	ip, r2, r6
 8000444:	fa01 fe06 	lsl.w	lr, r1, r6
 8000448:	40fa      	lsrs	r2, r7
 800044a:	fa20 f807 	lsr.w	r8, r0, r7
 800044e:	40f9      	lsrs	r1, r7
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	4322      	orrs	r2, r4
 8000456:	ea48 040e 	orr.w	r4, r8, lr
 800045a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800045e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000462:	fa1f f982 	uxth.w	r9, r2
 8000466:	fbb1 faf8 	udiv	sl, r1, r8
 800046a:	fb08 111a 	mls	r1, r8, sl, r1
 800046e:	fb0a f009 	mul.w	r0, sl, r9
 8000472:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000476:	4570      	cmp	r0, lr
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x234>
 800047a:	eb12 0e0e 	adds.w	lr, r2, lr
 800047e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000482:	bf2c      	ite	cs
 8000484:	f04f 0b01 	movcs.w	fp, #1
 8000488:	f04f 0b00 	movcc.w	fp, #0
 800048c:	4570      	cmp	r0, lr
 800048e:	d902      	bls.n	8000496 <__udivmoddi4+0x232>
 8000490:	f1bb 0f00 	cmp.w	fp, #0
 8000494:	d04e      	beq.n	8000534 <__udivmoddi4+0x2d0>
 8000496:	468a      	mov	sl, r1
 8000498:	ebae 0e00 	sub.w	lr, lr, r0
 800049c:	b2a4      	uxth	r4, r4
 800049e:	fbbe f0f8 	udiv	r0, lr, r8
 80004a2:	fb08 ee10 	mls	lr, r8, r0, lr
 80004a6:	fb00 f909 	mul.w	r9, r0, r9
 80004aa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x25e>
 80004b2:	eb12 0e0e 	adds.w	lr, r2, lr
 80004b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ba:	d201      	bcs.n	80004c0 <__udivmoddi4+0x25c>
 80004bc:	45f1      	cmp	r9, lr
 80004be:	d840      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004c0:	4608      	mov	r0, r1
 80004c2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80004c6:	ebae 0e09 	sub.w	lr, lr, r9
 80004ca:	fba0 890c 	umull	r8, r9, r0, ip
 80004ce:	45ce      	cmp	lr, r9
 80004d0:	4641      	mov	r1, r8
 80004d2:	464c      	mov	r4, r9
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0x278>
 80004d6:	d106      	bne.n	80004e6 <__udivmoddi4+0x282>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d204      	bcs.n	80004e6 <__udivmoddi4+0x282>
 80004dc:	3801      	subs	r0, #1
 80004de:	ebb8 010c 	subs.w	r1, r8, ip
 80004e2:	eb69 0402 	sbc.w	r4, r9, r2
 80004e6:	b37d      	cbz	r5, 8000548 <__udivmoddi4+0x2e4>
 80004e8:	1a5a      	subs	r2, r3, r1
 80004ea:	eb6e 0e04 	sbc.w	lr, lr, r4
 80004ee:	40f2      	lsrs	r2, r6
 80004f0:	fa0e f707 	lsl.w	r7, lr, r7
 80004f4:	fa2e f306 	lsr.w	r3, lr, r6
 80004f8:	2600      	movs	r6, #0
 80004fa:	4317      	orrs	r7, r2
 80004fc:	e9c5 7300 	strd	r7, r3, [r5]
 8000500:	e6fc      	b.n	80002fc <__udivmoddi4+0x98>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e6f9      	b.n	80002fc <__udivmoddi4+0x98>
 8000508:	1a84      	subs	r4, r0, r2
 800050a:	eb61 0103 	sbc.w	r1, r1, r3
 800050e:	2001      	movs	r0, #1
 8000510:	4688      	mov	r8, r1
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x146>
 8000514:	3802      	subs	r0, #2
 8000516:	443c      	add	r4, r7
 8000518:	e72b      	b.n	8000372 <__udivmoddi4+0x10e>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e6e3      	b.n	80002e8 <__udivmoddi4+0x84>
 8000520:	3e02      	subs	r6, #2
 8000522:	443b      	add	r3, r7
 8000524:	e6cc      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000526:	f1ac 0c02 	sub.w	ip, ip, #2
 800052a:	4439      	add	r1, r7
 800052c:	e70c      	b.n	8000348 <__udivmoddi4+0xe4>
 800052e:	3802      	subs	r0, #2
 8000530:	4439      	add	r1, r7
 8000532:	e767      	b.n	8000404 <__udivmoddi4+0x1a0>
 8000534:	f1aa 0a02 	sub.w	sl, sl, #2
 8000538:	4496      	add	lr, r2
 800053a:	e7ad      	b.n	8000498 <__udivmoddi4+0x234>
 800053c:	3e02      	subs	r6, #2
 800053e:	4439      	add	r1, r7
 8000540:	e775      	b.n	800042e <__udivmoddi4+0x1ca>
 8000542:	3802      	subs	r0, #2
 8000544:	4496      	add	lr, r2
 8000546:	e7bc      	b.n	80004c2 <__udivmoddi4+0x25e>
 8000548:	462e      	mov	r6, r5
 800054a:	e6d7      	b.n	80002fc <__udivmoddi4+0x98>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fcaf 	bl	8000eb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f80d 	bl	8000576 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f9a8 	bl	80008b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000560:	f000 f854 	bl	800060c <MX_I2C1_Init>
  MX_RTC_Init();
 8000564:	f000 f89c 	bl	80006a0 <MX_RTC_Init>
  MX_SPI1_Init();
 8000568:	f000 f916 	bl	8000798 <MX_SPI1_Init>
  MX_UART4_Init();
 800056c:	f000 f952 	bl	8000814 <MX_UART4_Init>
  MX_ICACHE_Init();
 8000570:	f000 f88a 	bl	8000688 <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x24>

08000576 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b098      	sub	sp, #96	; 0x60
 800057a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057c:	f107 0318 	add.w	r3, r7, #24
 8000580:	2248      	movs	r2, #72	; 0x48
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f003 ff11 	bl	80043ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8000598:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800059c:	f001 f8c2 	bl	8001724 <HAL_PWREx_ControlVoltageScaling>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a6:	f000 fa0d 	bl	80009c4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80005aa:	2318      	movs	r3, #24
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005b2:	2301      	movs	r3, #1
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b6:	2301      	movs	r3, #1
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005be:	2360      	movs	r3, #96	; 0x60
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0318 	add.w	r3, r7, #24
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f93a 	bl	8001844 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x64>
  {
    Error_Handler();
 80005d6:	f000 f9f5 	bl	80009c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fe08 	bl	8002208 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005fe:	f000 f9e1 	bl	80009c4 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3760      	adds	r7, #96	; 0x60
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_I2C1_Init+0x74>)
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <MX_I2C1_Init+0x78>)
 8000614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_I2C1_Init+0x74>)
 8000618:	f640 6214 	movw	r2, #3604	; 0xe14
 800061c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_I2C1_Init+0x74>)
 8000626:	2201      	movs	r2, #1
 8000628:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_I2C1_Init+0x74>)
 800064a:	f000 ff27 	bl	800149c <HAL_I2C_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000654:	f000 f9b6 	bl	80009c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000658:	2100      	movs	r1, #0
 800065a:	4809      	ldr	r0, [pc, #36]	; (8000680 <MX_I2C1_Init+0x74>)
 800065c:	f000 ffad 	bl	80015ba <HAL_I2CEx_ConfigAnalogFilter>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000666:	f000 f9ad 	bl	80009c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800066a:	2100      	movs	r1, #0
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C1_Init+0x74>)
 800066e:	f000 ffef 	bl	8001650 <HAL_I2CEx_ConfigDigitalFilter>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 f9a4 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028
 8000684:	40005400 	.word	0x40005400

08000688 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800068c:	f001 f82c 	bl	80016e8 <HAL_ICACHE_Enable>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000696:	f000 f995 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
 80006b6:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <MX_RTC_Init+0xf0>)
 80006cc:	4a31      	ldr	r2, [pc, #196]	; (8000794 <MX_RTC_Init+0xf4>)
 80006ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <MX_RTC_Init+0xf0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <MX_RTC_Init+0xf0>)
 80006d8:	227f      	movs	r2, #127	; 0x7f
 80006da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <MX_RTC_Init+0xf0>)
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_RTC_Init+0xf0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <MX_RTC_Init+0xf0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_RTC_Init+0xf0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_RTC_Init+0xf0>)
 80006f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <MX_RTC_Init+0xf0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000702:	4823      	ldr	r0, [pc, #140]	; (8000790 <MX_RTC_Init+0xf0>)
 8000704:	f002 fd72 	bl	80031ec <HAL_RTC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_RTC_Init+0x72>
  {
    Error_Handler();
 800070e:	f000 f959 	bl	80009c4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800071e:	2300      	movs	r3, #0
 8000720:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000722:	f107 0318 	add.w	r3, r7, #24
 8000726:	4619      	mov	r1, r3
 8000728:	4819      	ldr	r0, [pc, #100]	; (8000790 <MX_RTC_Init+0xf0>)
 800072a:	f002 ffa1 	bl	8003670 <HAL_RTCEx_PrivilegeModeSet>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000734:	f000 f946 	bl	80009c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000738:	2300      	movs	r3, #0
 800073a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800073c:	2300      	movs	r3, #0
 800073e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000740:	2300      	movs	r3, #0
 8000742:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2201      	movs	r2, #1
 8000750:	4619      	mov	r1, r3
 8000752:	480f      	ldr	r0, [pc, #60]	; (8000790 <MX_RTC_Init+0xf0>)
 8000754:	f002 fdb8 	bl	80032c8 <HAL_RTC_SetTime>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800075e:	f000 f931 	bl	80009c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000762:	2301      	movs	r3, #1
 8000764:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000766:	2301      	movs	r3, #1
 8000768:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800076a:	2301      	movs	r3, #1
 800076c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800076e:	2300      	movs	r3, #0
 8000770:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	2201      	movs	r2, #1
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_RTC_Init+0xf0>)
 800077a:	f002 fe3b 	bl	80033f4 <HAL_RTC_SetDate>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 8000784:	f000 f91e 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3730      	adds	r7, #48	; 0x30
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000074 	.word	0x20000074
 8000794:	40002800 	.word	0x40002800

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_SPI1_Init+0x74>)
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <MX_SPI1_Init+0x78>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_SPI1_Init+0x74>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_SPI1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_SPI1_Init+0x74>)
 80007b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_SPI1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_SPI1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_SPI1_Init+0x74>)
 80007c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_SPI1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_SPI1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_SPI1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_SPI1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_SPI1_Init+0x74>)
 80007e6:	2207      	movs	r2, #7
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_SPI1_Init+0x74>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_SPI1_Init+0x74>)
 80007f8:	f002 ff66 	bl	80036c8 <HAL_SPI_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000802:	f000 f8df 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000012c 	.word	0x2000012c
 8000810:	40013000 	.word	0x40013000

08000814 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_UART4_Init+0x94>)
 800081a:	4a24      	ldr	r2, [pc, #144]	; (80008ac <MX_UART4_Init+0x98>)
 800081c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_UART4_Init+0x94>)
 8000820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000824:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_UART4_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_UART4_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_UART4_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_UART4_Init+0x94>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_UART4_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_UART4_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_UART4_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_UART4_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_UART4_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_MultiProcessor_Init(&huart4, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_UART4_Init+0x94>)
 8000862:	f002 ffd4 	bl	800380e <HAL_MultiProcessor_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 800086c:	f000 f8aa 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_UART4_Init+0x94>)
 8000874:	f003 fcac 	bl	80041d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 f8a1 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_UART4_Init+0x94>)
 8000886:	f003 fce1 	bl	800424c <HAL_UARTEx_SetRxFifoThreshold>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8000890:	f000 f898 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_UART4_Init+0x94>)
 8000896:	f003 fc62 	bl	800415e <HAL_UARTEx_DisableFifoMode>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 80008a0:	f000 f890 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000009c 	.word	0x2000009c
 80008ac:	40004c00 	.word	0x40004c00

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <MX_GPIO_Init+0x108>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a3b      	ldr	r2, [pc, #236]	; (80009b8 <MX_GPIO_Init+0x108>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <MX_GPIO_Init+0x108>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <MX_GPIO_Init+0x108>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a35      	ldr	r2, [pc, #212]	; (80009b8 <MX_GPIO_Init+0x108>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <MX_GPIO_Init+0x108>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <MX_GPIO_Init+0x108>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a2f      	ldr	r2, [pc, #188]	; (80009b8 <MX_GPIO_Init+0x108>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <MX_GPIO_Init+0x108>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_GPIO_Init+0x108>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <MX_GPIO_Init+0x108>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_GPIO_Init+0x108>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPS_WAKE_Pin|GPS_RESET_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800092c:	4823      	ldr	r0, [pc, #140]	; (80009bc <MX_GPIO_Init+0x10c>)
 800092e:	f000 fd9d 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RESET_Pin|SSR_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000938:	4821      	ldr	r0, [pc, #132]	; (80009c0 <MX_GPIO_Init+0x110>)
 800093a:	f000 fd97 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 800093e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	481a      	ldr	r0, [pc, #104]	; (80009bc <MX_GPIO_Init+0x10c>)
 8000954:	f000 fc0a 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_WAKE_Pin GPS_RESET_Pin */
  GPIO_InitStruct.Pin = GPS_WAKE_Pin|GPS_RESET_Pin;
 8000958:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <MX_GPIO_Init+0x10c>)
 8000972:	f000 fbfb 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_RESET_Pin SSR_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin|SSR_Pin|BUZZER_Pin;
 8000976:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_GPIO_Init+0x110>)
 8000990:	f000 fbec 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT2_Pin LIS_INT1_Pin */
  GPIO_InitStruct.Pin = LIS_INT2_Pin|LIS_INT1_Pin;
 8000994:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_GPIO_Init+0x110>)
 80009aa:	f000 fbdf 	bl	800116c <HAL_GPIO_Init>

}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	42020400 	.word	0x42020400
 80009c0:	42020000 	.word	0x42020000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	; 0x60
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6593      	str	r3, [r2, #88]	; 0x58
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a06:	f000 fee9 	bl	80017dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0ae      	sub	sp, #184	; 0xb8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	2294      	movs	r2, #148	; 0x94
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 fcb7 	bl	80043ac <memset>
  if(hi2c->Instance==I2C1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a21      	ldr	r2, [pc, #132]	; (8000ac8 <HAL_I2C_MspInit+0xb0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d13a      	bne.n	8000abe <HAL_I2C_MspInit+0xa6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 feb3 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a60:	f7ff ffb0 	bl	80009c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <HAL_I2C_MspInit+0xb4>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_I2C_MspInit+0xb4>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <HAL_I2C_MspInit+0xb4>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a7c:	23c0      	movs	r3, #192	; 0xc0
 8000a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a82:	2312      	movs	r3, #18
 8000a84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a94:	2304      	movs	r3, #4
 8000a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <HAL_I2C_MspInit+0xb8>)
 8000aa2:	f000 fb63 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_I2C_MspInit+0xb4>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_I2C_MspInit+0xb4>)
 8000aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_I2C_MspInit+0xb4>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	37b8      	adds	r7, #184	; 0xb8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	42020400 	.word	0x42020400

08000ad4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0a8      	sub	sp, #160	; 0xa0
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2294      	movs	r2, #148	; 0x94
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fc61 	bl	80043ac <memset>
  if(hrtc->Instance==RTC)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <HAL_RTC_MspInit+0x74>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d124      	bne.n	8000b3e <HAL_RTC_MspInit+0x6a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fe5a 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b12:	f7ff ff57 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_RTC_MspInit+0x78>)
 8000b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <HAL_RTC_MspInit+0x78>)
 8000b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_RTC_MspInit+0x78>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_RTC_MspInit+0x78>)
 8000b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_RTC_MspInit+0x78>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	37a0      	adds	r7, #160	; 0xa0
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40002800 	.word	0x40002800
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <HAL_SPI_MspInit+0x7c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d127      	bne.n	8000bc2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_SPI_MspInit+0x80>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ba2:	23f0      	movs	r3, #240	; 0xf0
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_SPI_MspInit+0x84>)
 8000bbe:	f000 fad5 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40013000 	.word	0x40013000
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	42020000 	.word	0x42020000

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0ae      	sub	sp, #184	; 0xb8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	2294      	movs	r2, #148	; 0x94
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fbd7 	bl	80043ac <memset>
  if(huart->Instance==UART4)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_UART_MspInit+0xb0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d13a      	bne.n	8000c7e <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fdd3 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c20:	f7ff fed0 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c28:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0xb4>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c54:	2303      	movs	r3, #3
 8000c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0xb8>)
 8000c7a:	f000 fa77 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	37b8      	adds	r7, #184	; 0xb8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004c00 	.word	0x40004c00
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	42020000 	.word	0x42020000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f940 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <SystemCoreClockUpdate+0x144>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d107      	bne.n	8000d2e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000d1e:	4b4c      	ldr	r3, [pc, #304]	; (8000e50 <SystemCoreClockUpdate+0x144>)
 8000d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e005      	b.n	8000d3a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000d2e:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <SystemCoreClockUpdate+0x144>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	f003 030f 	and.w	r3, r3, #15
 8000d38:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000d3a:	4a46      	ldr	r2, [pc, #280]	; (8000e54 <SystemCoreClockUpdate+0x148>)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d42:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <SystemCoreClockUpdate+0x144>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 030c 	and.w	r3, r3, #12
 8000d4c:	2b0c      	cmp	r3, #12
 8000d4e:	d866      	bhi.n	8000e1e <SystemCoreClockUpdate+0x112>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <SystemCoreClockUpdate+0x4c>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d8d 	.word	0x08000d8d
 8000d5c:	08000e1f 	.word	0x08000e1f
 8000d60:	08000e1f 	.word	0x08000e1f
 8000d64:	08000e1f 	.word	0x08000e1f
 8000d68:	08000d95 	.word	0x08000d95
 8000d6c:	08000e1f 	.word	0x08000e1f
 8000d70:	08000e1f 	.word	0x08000e1f
 8000d74:	08000e1f 	.word	0x08000e1f
 8000d78:	08000d9d 	.word	0x08000d9d
 8000d7c:	08000e1f 	.word	0x08000e1f
 8000d80:	08000e1f 	.word	0x08000e1f
 8000d84:	08000e1f 	.word	0x08000e1f
 8000d88:	08000da5 	.word	0x08000da5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000d8c:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <SystemCoreClockUpdate+0x14c>)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	6013      	str	r3, [r2, #0]
      break;
 8000d92:	e048      	b.n	8000e26 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <SystemCoreClockUpdate+0x14c>)
 8000d96:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <SystemCoreClockUpdate+0x150>)
 8000d98:	601a      	str	r2, [r3, #0]
      break;
 8000d9a:	e044      	b.n	8000e26 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <SystemCoreClockUpdate+0x14c>)
 8000d9e:	4a2f      	ldr	r2, [pc, #188]	; (8000e5c <SystemCoreClockUpdate+0x150>)
 8000da0:	601a      	str	r2, [r3, #0]
      break;
 8000da2:	e040      	b.n	8000e26 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <SystemCoreClockUpdate+0x144>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <SystemCoreClockUpdate+0x144>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	091b      	lsrs	r3, r3, #4
 8000db4:	f003 030f 	and.w	r3, r3, #15
 8000db8:	3301      	adds	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d003      	beq.n	8000dca <SystemCoreClockUpdate+0xbe>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d006      	beq.n	8000dd6 <SystemCoreClockUpdate+0xca>
 8000dc8:	e00b      	b.n	8000de2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000dca:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <SystemCoreClockUpdate+0x150>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	613b      	str	r3, [r7, #16]
          break;
 8000dd4:	e00b      	b.n	8000dee <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000dd6:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <SystemCoreClockUpdate+0x150>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	613b      	str	r3, [r7, #16]
          break;
 8000de0:	e005      	b.n	8000dee <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	613b      	str	r3, [r7, #16]
          break;
 8000dec:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <SystemCoreClockUpdate+0x144>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	fb02 f303 	mul.w	r3, r2, r3
 8000dfe:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <SystemCoreClockUpdate+0x144>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0e5b      	lsrs	r3, r3, #25
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e18:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <SystemCoreClockUpdate+0x14c>)
 8000e1a:	6013      	str	r3, [r2, #0]
      break;
 8000e1c:	e003      	b.n	8000e26 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <SystemCoreClockUpdate+0x14c>)
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	6013      	str	r3, [r2, #0]
      break;
 8000e24:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <SystemCoreClockUpdate+0x144>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	091b      	lsrs	r3, r3, #4
 8000e2c:	f003 030f 	and.w	r3, r3, #15
 8000e30:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <SystemCoreClockUpdate+0x154>)
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <SystemCoreClockUpdate+0x14c>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e40:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemCoreClockUpdate+0x14c>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000
 8000e54:	080043ec 	.word	0x080043ec
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	00f42400 	.word	0x00f42400
 8000e60:	080043d4 	.word	0x080043d4

08000e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e68:	f7ff ff3e 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e6c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e6e:	e003      	b.n	8000e78 <LoopCopyDataInit>

08000e70 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e72:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e74:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e76:	3104      	adds	r1, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e78:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e7c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e7e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e80:	d3f6      	bcc.n	8000e70 <CopyDataInit>
	ldr	r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e84:	e002      	b.n	8000e8c <LoopFillZerobss>

08000e86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e86:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e88:	f842 3b04 	str.w	r3, [r2], #4

08000e8c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <LoopForever+0x16>)
	cmp	r2, r3
 8000e8e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e90:	d3f9      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e92:	f003 fa67 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e96:	f7ff fb5b 	bl	8000550 <main>

08000e9a <LoopForever>:

LoopForever:
    b LoopForever
 8000e9a:	e7fe      	b.n	8000e9a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000e9c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000ea0:	08004464 	.word	0x08004464
	ldr	r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ea8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000eac:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000eb0:	20000194 	.word	0x20000194

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>

08000eb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000ec0:	2004      	movs	r0, #4
 8000ec2:	f000 f921 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000ec6:	f7ff ff21 	bl	8000d0c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f80e 	bl	8000eec <HAL_InitTick>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	e001      	b.n	8000ee0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000edc:	f7ff fd78 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_InitTick+0x6c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d023      	beq.n	8000f48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_InitTick+0x70>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_InitTick+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f91b 	bl	8001152 <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10f      	bne.n	8000f42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b07      	cmp	r3, #7
 8000f26:	d809      	bhi.n	8000f3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f8f5 	bl	800111e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <HAL_InitTick+0x74>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e007      	b.n	8000f4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e004      	b.n	8000f4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e001      	b.n	8000f4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000190 	.word	0x20000190

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000190 	.word	0x20000190

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0152      	lsls	r2, r2, #5
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0152      	lsls	r2, r2, #5
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b03      	cmp	r3, #3
 8001078:	bf28      	it	cs
 800107a:	2303      	movcs	r3, #3
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3303      	adds	r3, #3
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b04      	subs	r3, #4
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	2107      	movs	r1, #7
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff47 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff5e 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff90 	bl	800105c <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5f 	bl	8001008 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffb2 	bl	80010c4 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800117a:	e158      	b.n	800142e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 814a 	beq.w	8001428 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d00b      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d007      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b12      	cmp	r3, #18
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 0201 	and.w	r2, r3, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0xea>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b12      	cmp	r3, #18
 8001254:	d123      	bne.n	800129e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	6939      	ldr	r1, [r7, #16]
 800129a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0203 	and.w	r2, r3, #3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80a4 	beq.w	8001428 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80012e0:	4a5a      	ldr	r2, [pc, #360]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3318      	adds	r3, #24
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_GPIO_Init+0x2e4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d025      	beq.n	8001358 <HAL_GPIO_Init+0x1ec>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a51      	ldr	r2, [pc, #324]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d01f      	beq.n	8001354 <HAL_GPIO_Init+0x1e8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_GPIO_Init+0x2ec>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d019      	beq.n	8001350 <HAL_GPIO_Init+0x1e4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_GPIO_Init+0x2f0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d013      	beq.n	800134c <HAL_GPIO_Init+0x1e0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_GPIO_Init+0x2f4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00d      	beq.n	8001348 <HAL_GPIO_Init+0x1dc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <HAL_GPIO_Init+0x2f8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x1d8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x2fc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_GPIO_Init+0x1d4>
 800133c:	2306      	movs	r3, #6
 800133e:	e00c      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001340:	2307      	movs	r3, #7
 8001342:	e00a      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001344:	2305      	movs	r3, #5
 8001346:	e008      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001348:	2304      	movs	r3, #4
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 800134c:	2303      	movs	r3, #3
 800134e:	e004      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001350:	2302      	movs	r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_GPIO_Init+0x1ee>
 8001358:	2300      	movs	r3, #0
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	00d2      	lsls	r2, r2, #3
 8001362:	4093      	lsls	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800136a:	4938      	ldr	r1, [pc, #224]	; (800144c <HAL_GPIO_Init+0x2e0>)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3318      	adds	r3, #24
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <HAL_GPIO_Init+0x2e0>)
 800137a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800139e:	4a2b      	ldr	r2, [pc, #172]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80013a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013cc:	4a1f      	ldr	r2, [pc, #124]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_GPIO_Init+0x2e0>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_GPIO_Init+0x2e0>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_GPIO_Init+0x2e0>)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	f47f ae9f 	bne.w	800117c <HAL_GPIO_Init+0x10>
  }
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	4002f400 	.word	0x4002f400
 8001450:	42020000 	.word	0x42020000
 8001454:	42020400 	.word	0x42020400
 8001458:	42020800 	.word	0x42020800
 800145c:	42020c00 	.word	0x42020c00
 8001460:	42021000 	.word	0x42021000
 8001464:	42021400 	.word	0x42021400
 8001468:	42021800 	.word	0x42021800

0800146c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800147c:	787b      	ldrb	r3, [r7, #1]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001488:	e002      	b.n	8001490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e081      	b.n	80015b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff faa8 	bl	8000a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d107      	bne.n	8001516 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	e006      	b.n	8001524 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001522:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d104      	bne.n	8001536 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001534:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	ea42 0103 	orr.w	r1, r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	021a      	lsls	r2, r3, #8
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69d9      	ldr	r1, [r3, #28]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1a      	ldr	r2, [r3, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2220      	movs	r2, #32
 800159e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d138      	bne.n	8001642 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015da:	2302      	movs	r3, #2
 80015dc:	e032      	b.n	8001644 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2224      	movs	r2, #36	; 0x24
 80015ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800160c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001642:	2302      	movs	r3, #2
  }
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b20      	cmp	r3, #32
 8001664:	d139      	bne.n	80016da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001670:	2302      	movs	r3, #2
 8001672:	e033      	b.n	80016dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2224      	movs	r2, #36	; 0x24
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0201 	orr.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016da:	2302      	movs	r3, #2
  }
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_ICACHE_Enable+0x1c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_ICACHE_Enable+0x1c>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40030400 	.word	0x40030400

08001708 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <HAL_PWREx_GetVoltageRange+0x18>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40007000 	.word	0x40007000

08001724 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001734:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001736:	f000 f861 	bl	80017fc <HAL_PWREx_SMPS_GetEffectiveMode>
 800173a:	4603      	mov	r3, r0
 800173c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001740:	d101      	bne.n	8001746 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e03e      	b.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800174e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001752:	d101      	bne.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e035      	b.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	d101      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	e02f      	b.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800176c:	4917      	ldr	r1, [pc, #92]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	09db      	lsrs	r3, r3, #7
 8001782:	2232      	movs	r2, #50	; 0x32
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	08db      	lsrs	r3, r3, #3
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001794:	e002      	b.n	800179c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3b01      	subs	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a8:	d102      	bne.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f2      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017bc:	d101      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e000      	b.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40007000 	.word	0x40007000
 80017d0:	20000000 	.word	0x20000000
 80017d4:	0a7c5ac5 	.word	0x0a7c5ac5
 80017d8:	cccccccd 	.word	0xcccccccd

080017dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ea:	6093      	str	r3, [r2, #8]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40007000 	.word	0x40007000

080017fc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	e00a      	b.n	8001830 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d103      	bne.n	800182c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	e001      	b.n	8001830 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40007000 	.word	0x40007000

08001844 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	f000 bcd0 	b.w	80021f8 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001858:	4ba3      	ldr	r3, [pc, #652]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001862:	4ba1      	ldr	r3, [pc, #644]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80e9 	beq.w	8001a4c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_RCC_OscConfig+0x4a>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	f040 8083 	bne.w	800198e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d17f      	bne.n	800198e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800188e:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <HAL_RCC_OscConfig+0x64>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f000 bca8 	b.w	80021f8 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ac:	4b8e      	ldr	r3, [pc, #568]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <HAL_RCC_OscConfig+0x7e>
 80018b8:	4b8b      	ldr	r3, [pc, #556]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c0:	e005      	b.n	80018ce <HAL_RCC_OscConfig+0x8a>
 80018c2:	4b89      	ldr	r3, [pc, #548]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d224      	bcs.n	800191c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fe96 	bl	8002608 <RCC_SetFlashLatencyFromMSIRange>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f000 bc88 	b.w	80021f8 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e8:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a7e      	ldr	r2, [pc, #504]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b7c      	ldr	r3, [pc, #496]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	4979      	ldr	r1, [pc, #484]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001906:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	4974      	ldr	r1, [pc, #464]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
 800191a:	e026      	b.n	800196a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800191c:	4b72      	ldr	r3, [pc, #456]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a71      	ldr	r2, [pc, #452]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	496c      	ldr	r1, [pc, #432]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193a:	4b6b      	ldr	r3, [pc, #428]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	4967      	ldr	r1, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fe55 	bl	8002608 <RCC_SetFlashLatencyFromMSIRange>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	f000 bc47 	b.w	80021f8 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800196a:	f000 fe11 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 800196e:	4603      	mov	r3, r0
 8001970:	4a5e      	ldr	r2, [pc, #376]	; (8001aec <HAL_RCC_OscConfig+0x2a8>)
 8001972:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001974:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fab7 	bl	8000eec <HAL_InitTick>
 800197e:	4603      	mov	r3, r0
 8001980:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d060      	beq.n	8001a4a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	f000 bc35 	b.w	80021f8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d039      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001996:	4b54      	ldr	r3, [pc, #336]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a53      	ldr	r2, [pc, #332]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019a2:	f7ff faf3 	bl	8000f8c <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019a8:	e00f      	b.n	80019ca <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019aa:	f7ff faef 	bl	8000f8c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d908      	bls.n	80019ca <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f000 bc17 	b.w	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0e9      	beq.n	80019aa <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019d6:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a43      	ldr	r2, [pc, #268]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	493e      	ldr	r1, [pc, #248]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f4:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	4939      	ldr	r1, [pc, #228]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
 8001a08:	e020      	b.n	8001a4c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a36      	ldr	r2, [pc, #216]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fab9 	bl	8000f8c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a1c:	e00e      	b.n	8001a3c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fab5 	bl	8000f8c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d907      	bls.n	8001a3c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e3dd      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ea      	bne.n	8001a1e <HAL_RCC_OscConfig+0x1da>
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d07e      	beq.n	8001b56 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d005      	beq.n	8001a6a <HAL_RCC_OscConfig+0x226>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d10e      	bne.n	8001a82 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d10b      	bne.n	8001a82 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d06e      	beq.n	8001b54 <HAL_RCC_OscConfig+0x310>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d16a      	bne.n	8001b54 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e3ba      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x256>
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e01d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x292>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa2:	d10c      	bne.n	8001abe <HAL_RCC_OscConfig+0x27a>
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e00b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x292>
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_RCC_OscConfig+0x2a4>)
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d020      	beq.n	8001b20 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff fa55 	bl	8000f8c <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x2ce>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fa4a 	bl	8000f8c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d907      	bls.n	8001b12 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b02:	4b9f      	ldr	r3, [pc, #636]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e372      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4b9b      	ldr	r3, [pc, #620]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0ea      	beq.n	8001af4 <HAL_RCC_OscConfig+0x2b0>
 8001b1e:	e01a      	b.n	8001b56 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fa34 	bl	8000f8c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b26:	e00e      	b.n	8001b46 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fa30 	bl	8000f8c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d907      	bls.n	8001b46 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b36:	4b92      	ldr	r3, [pc, #584]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e358      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b46:	4b8e      	ldr	r3, [pc, #568]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ea      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2e4>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d06c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_OscConfig+0x330>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d116      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b74:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_OscConfig+0x348>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e335      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8c:	4b7c      	ldr	r3, [pc, #496]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	4979      	ldr	r1, [pc, #484]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba0:	e04c      	b.n	8001c3c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d029      	beq.n	8001bfe <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001baa:	4b75      	ldr	r3, [pc, #468]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a74      	ldr	r2, [pc, #464]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f9e9 	bl	8000f8c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbc:	e00e      	b.n	8001bdc <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f9e5 	bl	8000f8c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d907      	bls.n	8001bdc <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e30d      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ea      	beq.n	8001bbe <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b65      	ldr	r3, [pc, #404]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	4962      	ldr	r1, [pc, #392]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	e01e      	b.n	8001c3c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b60      	ldr	r3, [pc, #384]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a5f      	ldr	r2, [pc, #380]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f9bf 	bl	8000f8c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c10:	e00e      	b.n	8001c30 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff f9bb 	bl	8000f8c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d907      	bls.n	8001c30 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c20:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e2e3      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ea      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d05f      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d038      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d108      	bne.n	8001c6a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001c58:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	4a48      	ldr	r2, [pc, #288]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c60:	f023 0310 	bic.w	r3, r3, #16
 8001c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c68:	e007      	b.n	8001c7a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001c6a:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c70:	4a43      	ldr	r2, [pc, #268]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c80:	4a3f      	ldr	r2, [pc, #252]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8a:	f7ff f97f 	bl	8000f8c <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c90:	e00f      	b.n	8001cb2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c92:	f7ff f97b 	bl	8000f8c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b07      	cmp	r3, #7
 8001c9e:	d908      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca0:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e2a2      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0e8      	beq.n	8001c92 <HAL_RCC_OscConfig+0x44e>
 8001cc0:	e022      	b.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc2:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc8:	4a2d      	ldr	r2, [pc, #180]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f95b 	bl	8000f8c <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd8:	e00f      	b.n	8001cfa <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cda:	f7ff f957 	bl	8000f8c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b07      	cmp	r3, #7
 8001ce6:	d908      	bls.n	8001cfa <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e27e      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e8      	bne.n	8001cda <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8131 	beq.w	8001f78 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10d      	bne.n	8001d42 <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_OscConfig+0x53c>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_RCC_OscConfig+0x540>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d122      	bne.n	8001d94 <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RCC_OscConfig+0x540>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_RCC_OscConfig+0x540>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f917 	bl	8000f8c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d60:	e012      	b.n	8001d88 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7ff f913 	bl	8000f8c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d90b      	bls.n	8001d88 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <HAL_RCC_OscConfig+0x540>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e23b      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d88:	4bb8      	ldr	r3, [pc, #736]	; (800206c <HAL_RCC_OscConfig+0x828>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0e6      	beq.n	8001d62 <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01f      	beq.n	8001de0 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dac:	4bb0      	ldr	r3, [pc, #704]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	4aaf      	ldr	r2, [pc, #700]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dbc:	4bac      	ldr	r3, [pc, #688]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc2:	4aab      	ldr	r2, [pc, #684]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dcc:	e018      	b.n	8001e00 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dce:	4ba8      	ldr	r3, [pc, #672]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	4aa6      	ldr	r2, [pc, #664]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dde:	e00f      	b.n	8001e00 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001de0:	4ba3      	ldr	r3, [pc, #652]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	4aa2      	ldr	r2, [pc, #648]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001df0:	4b9f      	ldr	r3, [pc, #636]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	4a9e      	ldr	r2, [pc, #632]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d068      	beq.n	8001eda <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff f8c0 	bl	8000f8c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0e:	e011      	b.n	8001e34 <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e10:	f7ff f8bc 	bl	8000f8c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d908      	bls.n	8001e34 <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e22:	4b93      	ldr	r3, [pc, #588]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1e1      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e34:	4b8e      	ldr	r3, [pc, #568]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0e6      	beq.n	8001e10 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d022      	beq.n	8001e94 <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e4e:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e54:	4a86      	ldr	r2, [pc, #536]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e5e:	e011      	b.n	8001e84 <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff f894 	bl	8000f8c <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d908      	bls.n	8001e84 <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e1b9      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e84:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0e6      	beq.n	8001e60 <HAL_RCC_OscConfig+0x61c>
 8001e92:	e068      	b.n	8001f66 <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e94:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	4a75      	ldr	r2, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001e9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ea4:	e011      	b.n	8001eca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7ff f871 	bl	8000f8c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d908      	bls.n	8001eca <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001eb8:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e196      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001eca:	4b69      	ldr	r3, [pc, #420]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e6      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x662>
 8001ed8:	e045      	b.n	8001f66 <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7ff f857 	bl	8000f8c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee0:	e011      	b.n	8001f06 <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff f853 	bl	8000f8c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d908      	bls.n	8001f06 <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef4:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e178      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f06:	4b5a      	ldr	r3, [pc, #360]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1e6      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001f14:	4b56      	ldr	r3, [pc, #344]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d021      	beq.n	8001f66 <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f22:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	4a51      	ldr	r2, [pc, #324]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f32:	e011      	b.n	8001f58 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f34:	f7ff f82a 	bl	8000f8c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d908      	bls.n	8001f58 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e14f      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1e6      	bne.n	8001f34 <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f66:	7ffb      	ldrb	r3, [r7, #31]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d04a      	beq.n	800201a <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f92:	4a37      	ldr	r2, [pc, #220]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7fe fff6 	bl	8000f8c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fa2:	e00f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fa4:	f7fe fff2 	bl	8000f8c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d908      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e119      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0e8      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x760>
 8001fd2:	e022      	b.n	800201a <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7fe ffd2 	bl	8000f8c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fea:	e00f      	b.n	800200c <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fec:	f7fe ffce 	bl	8000f8c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d908      	bls.n	800200c <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8001ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e0f5      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 800200e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e8      	bne.n	8001fec <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80e9 	beq.w	80021f6 <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b0c      	cmp	r3, #12
 800202e:	f000 80a3 	beq.w	8002178 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	2b02      	cmp	r3, #2
 8002038:	d16a      	bne.n	8002110 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 8002040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7fe ffa1 	bl	8000f8c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	e012      	b.n	8002074 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7fe ff9d 	bl	8000f8c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d90b      	bls.n	8002074 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_RCC_OscConfig+0x82c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0c5      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
 800206c:	40007000 	.word	0x40007000
 8002070:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002074:	4b62      	ldr	r3, [pc, #392]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e6      	bne.n	800204e <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002080:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <HAL_RCC_OscConfig+0x9c0>)
 8002086:	4013      	ands	r3, r2
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002090:	3a01      	subs	r2, #1
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800209a:	0212      	lsls	r2, r2, #8
 800209c:	4311      	orrs	r1, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020a2:	0852      	lsrs	r2, r2, #1
 80020a4:	3a01      	subs	r2, #1
 80020a6:	0552      	lsls	r2, r2, #21
 80020a8:	4311      	orrs	r1, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020ae:	0852      	lsrs	r2, r2, #1
 80020b0:	3a01      	subs	r2, #1
 80020b2:	0652      	lsls	r2, r2, #25
 80020b4:	4311      	orrs	r1, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020ba:	06d2      	lsls	r2, r2, #27
 80020bc:	430a      	orrs	r2, r1
 80020be:	4950      	ldr	r1, [pc, #320]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b4e      	ldr	r3, [pc, #312]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d0:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe ff56 	bl	8000f8c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e2:	e00e      	b.n	8002102 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe ff52 	bl	8000f8c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d907      	bls.n	8002102 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e07a      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0ea      	beq.n	80020e4 <HAL_RCC_OscConfig+0x8a0>
 800210e:	e072      	b.n	80021f6 <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002110:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a3a      	ldr	r2, [pc, #232]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 8002116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800211c:	4b38      	ldr	r3, [pc, #224]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a34      	ldr	r2, [pc, #208]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002134:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a31      	ldr	r2, [pc, #196]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 800213a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe ff22 	bl	8000f8c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214a:	e00e      	b.n	800216a <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe ff1e 	bl	8000f8c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d907      	bls.n	800216a <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e046      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ea      	bne.n	800214c <HAL_RCC_OscConfig+0x908>
 8002176:	e03e      	b.n	80021f6 <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e039      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <HAL_RCC_OscConfig+0x9bc>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	429a      	cmp	r2, r3
 8002196:	d12c      	bne.n	80021f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a2:	3b01      	subs	r3, #1
 80021a4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d123      	bne.n	80021f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d11b      	bne.n	80021f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d113      	bne.n	80021f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	3b01      	subs	r3, #1
 80021d8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	019f800c 	.word	0x019f800c

08002208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e10d      	b.n	800243c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002220:	4b88      	ldr	r3, [pc, #544]	; (8002444 <HAL_RCC_ClockConfig+0x23c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d910      	bls.n	8002250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b85      	ldr	r3, [pc, #532]	; (8002444 <HAL_RCC_ClockConfig+0x23c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 020f 	bic.w	r2, r3, #15
 8002236:	4983      	ldr	r1, [pc, #524]	; (8002444 <HAL_RCC_ClockConfig+0x23c>)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223e:	4b81      	ldr	r3, [pc, #516]	; (8002444 <HAL_RCC_ClockConfig+0x23c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d001      	beq.n	8002250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0f5      	b.n	800243c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 8094 	beq.w	8002386 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d134      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	4b78      	ldr	r3, [pc, #480]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0e2      	b.n	800243c <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002276:	f000 fa2b 	bl	80026d0 <RCC_GetSysClockFreqFromPLLSource>
 800227a:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4a73      	ldr	r2, [pc, #460]	; (800244c <HAL_RCC_ClockConfig+0x244>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d956      	bls.n	8002332 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002284:	4b70      	ldr	r3, [pc, #448]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002290:	4b6d      	ldr	r3, [pc, #436]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002298:	4a6b      	ldr	r2, [pc, #428]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 800229a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e045      	b.n	8002332 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d03f      	beq.n	8002332 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d13b      	bne.n	8002332 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ba:	4b63      	ldr	r3, [pc, #396]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c2:	4a61      	ldr	r2, [pc, #388]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e030      	b.n	8002332 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d8:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d115      	bne.n	8002310 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0a9      	b.n	800243c <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f0:	4b55      	ldr	r3, [pc, #340]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e09d      	b.n	800243c <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002300:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e095      	b.n	800243c <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002310:	f000 f8a2 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002314:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4a4c      	ldr	r2, [pc, #304]	; (800244c <HAL_RCC_ClockConfig+0x244>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d909      	bls.n	8002332 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002326:	4a48      	ldr	r2, [pc, #288]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002332:	4b45      	ldr	r3, [pc, #276]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 0203 	bic.w	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4942      	ldr	r1, [pc, #264]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002340:	4313      	orrs	r3, r2
 8002342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7fe fe22 	bl	8000f8c <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	e013      	b.n	8002374 <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234c:	f7fe fe1e 	bl	8000f8c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d90a      	bls.n	8002374 <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e063      	b.n	800243c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002374:	4b34      	ldr	r3, [pc, #208]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 020c 	and.w	r2, r3, #12
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	429a      	cmp	r2, r3
 8002384:	d1e2      	bne.n	800234c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	492a      	ldr	r1, [pc, #168]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b80      	cmp	r3, #128	; 0x80
 80023aa:	d105      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a25      	ldr	r2, [pc, #148]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 80023b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b6:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_RCC_ClockConfig+0x23c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d210      	bcs.n	80023e8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HAL_RCC_ClockConfig+0x23c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	491d      	ldr	r1, [pc, #116]	; (8002444 <HAL_RCC_ClockConfig+0x23c>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_RCC_ClockConfig+0x23c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e029      	b.n	800243c <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4911      	ldr	r1, [pc, #68]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4909      	ldr	r1, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002426:	f000 f8b3 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 800242a:	4603      	mov	r3, r0
 800242c:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_RCC_ClockConfig+0x248>)
 800242e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCC_ClockConfig+0x24c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fd59 	bl	8000eec <HAL_InitTick>
 800243a:	4603      	mov	r3, r0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40022000 	.word	0x40022000
 8002448:	40021000 	.word	0x40021000
 800244c:	04c4b400 	.word	0x04c4b400
 8002450:	20000000 	.word	0x20000000
 8002454:	20000004 	.word	0x20000004

08002458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002466:	4b47      	ldr	r3, [pc, #284]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002470:	4b44      	ldr	r3, [pc, #272]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x34>
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d121      	bne.n	80024ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d11e      	bne.n	80024ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800248c:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002498:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 800249a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e005      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024a8:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80024b4:	4a34      	ldr	r2, [pc, #208]	; (8002588 <HAL_RCC_GetSysClockFreq+0x130>)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024bc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10d      	bne.n	80024e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <HAL_RCC_GetSysClockFreq+0x134>)
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	e004      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <HAL_RCC_GetSysClockFreq+0x134>)
 80024de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d146      	bne.n	8002574 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024e6:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	3301      	adds	r3, #1
 80024fc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d003      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0xb4>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d00d      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0xce>
 800250a:	e019      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800250c:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_RCC_GetSysClockFreq+0x134>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	4a1b      	ldr	r2, [pc, #108]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002516:	68d2      	ldr	r2, [r2, #12]
 8002518:	0a12      	lsrs	r2, r2, #8
 800251a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
        break;
 8002524:	e019      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002526:	4a19      	ldr	r2, [pc, #100]	; (800258c <HAL_RCC_GetSysClockFreq+0x134>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	4a15      	ldr	r2, [pc, #84]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	0a12      	lsrs	r2, r2, #8
 8002534:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002538:	fb02 f303 	mul.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
        break;
 800253e:	e00c      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 800254a:	68d2      	ldr	r2, [r2, #12]
 800254c:	0a12      	lsrs	r2, r2, #8
 800254e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	617b      	str	r3, [r7, #20]
        break;
 8002558:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_GetSysClockFreq+0x12c>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	0e5b      	lsrs	r3, r3, #25
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	3301      	adds	r3, #1
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002574:	69bb      	ldr	r3, [r7, #24]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	080043ec 	.word	0x080043ec
 800258c:	00f42400 	.word	0x00f42400

08002590 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002594:	f7ff ff60 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetHCLKFreq+0x20>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	080043d4 	.word	0x080043d4

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff ffe8 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000
 80025dc:	080043e4 	.word	0x080043e4

080025e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e4:	f7ff ffd4 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0adb      	lsrs	r3, r3, #11
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	080043e4 	.word	0x080043e4

08002608 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002614:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002620:	f7ff f872 	bl	8001708 <HAL_PWREx_GetVoltageRange>
 8002624:	6138      	str	r0, [r7, #16]
 8002626:	e014      	b.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4a26      	ldr	r2, [pc, #152]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	6593      	str	r3, [r2, #88]	; 0x58
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002640:	f7ff f862 	bl	8001708 <HAL_PWREx_GetVoltageRange>
 8002644:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002650:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800265e:	d10b      	bne.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b80      	cmp	r3, #128	; 0x80
 8002664:	d919      	bls.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2ba0      	cmp	r3, #160	; 0xa0
 800266a:	d902      	bls.n	8002672 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800266c:	2302      	movs	r3, #2
 800266e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002670:	e013      	b.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002672:	2301      	movs	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002676:	e010      	b.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b80      	cmp	r3, #128	; 0x80
 800267c:	d902      	bls.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800267e:	2303      	movs	r3, #3
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e00a      	b.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b80      	cmp	r3, #128	; 0x80
 8002688:	d102      	bne.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800268a:	2302      	movs	r3, #2
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	e004      	b.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b70      	cmp	r3, #112	; 0x70
 8002694:	d101      	bne.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002696:	2301      	movs	r3, #1
 8002698:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 020f 	bic.w	r2, r3, #15
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40022000 	.word	0x40022000

080026d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80026da:	4b36      	ldr	r3, [pc, #216]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d118      	bne.n	8002718 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026e6:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d107      	bne.n	8002702 <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 80026f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e005      	b.n	800270e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800270e:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002716:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002718:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	3301      	adds	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d003      	beq.n	800273e <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d00d      	beq.n	8002758 <RCC_GetSysClockFreqFromPLLSource+0x88>
 800273c:	e019      	b.n	8002772 <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800273e:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002748:	68d2      	ldr	r2, [r2, #12]
 800274a:	0a12      	lsrs	r2, r2, #8
 800274c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	613b      	str	r3, [r7, #16]
      break;
 8002756:	e019      	b.n	800278c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <RCC_GetSysClockFreqFromPLLSource+0xec>)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002762:	68d2      	ldr	r2, [r2, #12]
 8002764:	0a12      	lsrs	r2, r2, #8
 8002766:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	613b      	str	r3, [r7, #16]
      break;
 8002770:	e00c      	b.n	800278c <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	0a12      	lsrs	r2, r2, #8
 8002780:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	613b      	str	r3, [r7, #16]
      break;
 800278a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0e5b      	lsrs	r3, r3, #25
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80027a6:	683b      	ldr	r3, [r7, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40021000 	.word	0x40021000
 80027b8:	080043ec 	.word	0x080043ec
 80027bc:	00f42400 	.word	0x00f42400

080027c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c8:	2300      	movs	r3, #0
 80027ca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027cc:	2300      	movs	r3, #0
 80027ce:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d040      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027e0:	2b80      	cmp	r3, #128	; 0x80
 80027e2:	d02a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d825      	bhi.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80027e8:	2b60      	cmp	r3, #96	; 0x60
 80027ea:	d026      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027ec:	2b60      	cmp	r3, #96	; 0x60
 80027ee:	d821      	bhi.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d006      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d81d      	bhi.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d009      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d010      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002800:	e018      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002802:	4b8f      	ldr	r3, [pc, #572]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4a8e      	ldr	r2, [pc, #568]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800280e:	e015      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fb56 	bl	8002ec8 <RCCEx_PLLSAI1_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002820:	e00c      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3320      	adds	r3, #32
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fc33 	bl	8003094 <RCCEx_PLLSAI2_Config>
 800282e:	4603      	mov	r3, r0
 8002830:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002832:	e003      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	77fb      	strb	r3, [r7, #31]
        break;
 8002838:	e000      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800283a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800283c:	7ffb      	ldrb	r3, [r7, #31]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10b      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002842:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002844:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002848:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002850:	497b      	ldr	r1, [pc, #492]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002858:	e001      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d047      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002872:	d030      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002878:	d82a      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800287a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800287e:	d02a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002884:	d824      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800288a:	d008      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800288c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002890:	d81e      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289a:	d010      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800289c:	e018      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800289e:	4b68      	ldr	r3, [pc, #416]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a67      	ldr	r2, [pc, #412]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80028aa:	e015      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fb08 	bl	8002ec8 <RCCEx_PLLSAI1_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80028bc:	e00c      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3320      	adds	r3, #32
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fbe5 	bl	8003094 <RCCEx_PLLSAI2_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80028ce:	e003      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	77fb      	strb	r3, [r7, #31]
        break;
 80028d4:	e000      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80028d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10b      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028de:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4954      	ldr	r1, [pc, #336]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80028f4:	e001      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f6:	7ffb      	ldrb	r3, [r7, #31]
 80028f8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80ab 	beq.w	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290c:	4b4c      	ldr	r3, [pc, #304]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	4a48      	ldr	r2, [pc, #288]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	6593      	str	r3, [r2, #88]	; 0x58
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002934:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a42      	ldr	r2, [pc, #264]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800293a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002940:	f7fe fb24 	bl	8000f8c <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002946:	e00f      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002948:	f7fe fb20 	bl	8000f8c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d908      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8002966:	e006      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0e9      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002974:	e000      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8002976:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8002978:	7ffb      	ldrb	r3, [r7, #31]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d164      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002988:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01f      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	429a      	cmp	r2, r3
 800299a:	d019      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800299c:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a6:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b8:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c8:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d01f      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fad7 	bl	8000f8c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e0:	e012      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fad3 	bl	8000f8c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d909      	bls.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8002a06:	e007      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0e5      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002a16:	e000      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8002a18:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	4903      	ldr	r1, [pc, #12]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a38:	e008      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a3a:	7ffb      	ldrb	r3, [r7, #31]
 8002a3c:	77bb      	strb	r3, [r7, #30]
 8002a3e:	e005      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7ffb      	ldrb	r3, [r7, #31]
 8002a4a:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d105      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a52:	4baf      	ldr	r3, [pc, #700]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	4aae      	ldr	r2, [pc, #696]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6a:	4ba9      	ldr	r3, [pc, #676]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f023 0203 	bic.w	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	49a5      	ldr	r1, [pc, #660]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a8c:	4ba0      	ldr	r3, [pc, #640]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f023 020c 	bic.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	499d      	ldr	r1, [pc, #628]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aae:	4b98      	ldr	r3, [pc, #608]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	4994      	ldr	r1, [pc, #592]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ad0:	4b8f      	ldr	r3, [pc, #572]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	498c      	ldr	r1, [pc, #560]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002af2:	4b87      	ldr	r3, [pc, #540]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	4983      	ldr	r1, [pc, #524]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b14:	4b7e      	ldr	r3, [pc, #504]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b22:	497b      	ldr	r1, [pc, #492]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b36:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	4972      	ldr	r1, [pc, #456]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b58:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b66:	496a      	ldr	r1, [pc, #424]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002b7a:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b88:	4961      	ldr	r1, [pc, #388]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d031      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002baa:	d814      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d015      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb6:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4a55      	ldr	r2, [pc, #340]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002bbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc0:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002bc2:	e00c      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f97c 	bl	8002ec8 <RCCEx_PLLSAI1_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8002bd4:	e003      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	77fb      	strb	r3, [r7, #31]
        break;
 8002bda:	e000      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8002bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bde:	7ffb      	ldrb	r3, [r7, #31]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002be4:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf2:	4947      	ldr	r1, [pc, #284]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bfa:	e001      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	7ffb      	ldrb	r3, [r7, #31]
 8002bfe:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0c:	4b40      	ldr	r3, [pc, #256]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	493d      	ldr	r1, [pc, #244]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c2e:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	4934      	ldr	r1, [pc, #208]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c50:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	492c      	ldr	r1, [pc, #176]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c72:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c78:	f023 0203 	bic.w	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	4923      	ldr	r1, [pc, #140]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d028      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x526>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca2:	491b      	ldr	r1, [pc, #108]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cbe:	60d3      	str	r3, [r2, #12]
 8002cc0:	e011      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x526>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f8f8 	bl	8002ec8 <RCCEx_PLLSAI1_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8002cdc:	7ffb      	ldrb	r3, [r7, #31]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x526>
        {
          /* set overall return value */
          status = ret;
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d04d      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cfa:	d10b      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d02:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002d0c:	e015      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d22:	4968      	ldr	r1, [pc, #416]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d2a:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d30:	4a64      	ldr	r2, [pc, #400]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d42:	d10d      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f8bc 	bl	8002ec8 <RCCEx_PLLSAI1_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002d54:	7ffb      	ldrb	r3, [r7, #31]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d019      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8002d5a:	7ffb      	ldrb	r3, [r7, #31]
 8002d5c:	77bb      	strb	r3, [r7, #30]
 8002d5e:	e016      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d68:	d106      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d6a:	4b56      	ldr	r3, [pc, #344]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4a55      	ldr	r2, [pc, #340]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d74:	60d3      	str	r3, [r2, #12]
 8002d76:	e00a      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d80:	d105      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d82:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	4a4f      	ldr	r2, [pc, #316]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d028      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da8:	4946      	ldr	r1, [pc, #280]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db8:	d106      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dba:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a41      	ldr	r2, [pc, #260]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dc4:	60d3      	str	r3, [r2, #12]
 8002dc6:	e011      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f875 	bl	8002ec8 <RCCEx_PLLSAI1_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002de2:	7ffb      	ldrb	r3, [r7, #31]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01e      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df8:	4b32      	ldr	r3, [pc, #200]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e08:	492e      	ldr	r1, [pc, #184]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	2102      	movs	r1, #2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f850 	bl	8002ec8 <RCCEx_PLLSAI1_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
 8002e34:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e48:	f023 0204 	bic.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e52:	491c      	ldr	r1, [pc, #112]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e6c:	f023 0218 	bic.w	r2, r3, #24
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4913      	ldr	r1, [pc, #76]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d017      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e9a:	490a      	ldr	r1, [pc, #40]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eac:	d105      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002eba:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d018      	beq.n	8002f10 <RCCEx_PLLSAI1_Config+0x48>
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d81f      	bhi.n	8002f22 <RCCEx_PLLSAI1_Config+0x5a>
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d002      	beq.n	8002eec <RCCEx_PLLSAI1_Config+0x24>
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d009      	beq.n	8002efe <RCCEx_PLLSAI1_Config+0x36>
 8002eea:	e01a      	b.n	8002f22 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eec:	4b65      	ldr	r3, [pc, #404]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d117      	bne.n	8002f28 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efc:	e014      	b.n	8002f28 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002efe:	4b61      	ldr	r3, [pc, #388]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d110      	bne.n	8002f2c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0e:	e00d      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002f10:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f20:	e006      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      break;
 8002f26:	e004      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002f30:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 809f 	bne.w	8003078 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f3a:	4b52      	ldr	r3, [pc, #328]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a51      	ldr	r2, [pc, #324]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f46:	f7fe f821 	bl	8000f8c <HAL_GetTick>
 8002f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f4c:	e00f      	b.n	8002f6e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f4e:	f7fe f81d 	bl	8000f8c <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d908      	bls.n	8002f6e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f5c:	4b49      	ldr	r3, [pc, #292]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f6c:	e006      	b.n	8002f7c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f6e:	4b45      	ldr	r3, [pc, #276]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1e9      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0x86>
 8002f7a:	e000      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8002f7c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d179      	bne.n	8003078 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <RCCEx_PLLSAI1_Config+0x1c0>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6892      	ldr	r2, [r2, #8]
 8002f96:	0211      	lsls	r1, r2, #8
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68d2      	ldr	r2, [r2, #12]
 8002f9c:	06d2      	lsls	r2, r2, #27
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6852      	ldr	r2, [r2, #4]
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	4311      	orrs	r1, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	4934      	ldr	r1, [pc, #208]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	610b      	str	r3, [r1, #16]
 8002fb6:	e033      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d118      	bne.n	8002ff0 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fbe:	4b31      	ldr	r3, [pc, #196]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	4b32      	ldr	r3, [pc, #200]	; (800308c <RCCEx_PLLSAI1_Config+0x1c4>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6892      	ldr	r2, [r2, #8]
 8002fca:	0211      	lsls	r1, r2, #8
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6912      	ldr	r2, [r2, #16]
 8002fd0:	0852      	lsrs	r2, r2, #1
 8002fd2:	3a01      	subs	r2, #1
 8002fd4:	0552      	lsls	r2, r2, #21
 8002fd6:	4311      	orrs	r1, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6852      	ldr	r2, [r2, #4]
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	4311      	orrs	r1, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	4926      	ldr	r1, [pc, #152]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	610b      	str	r3, [r1, #16]
 8002fee:	e017      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	4b26      	ldr	r3, [pc, #152]	; (8003090 <RCCEx_PLLSAI1_Config+0x1c8>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6892      	ldr	r2, [r2, #8]
 8002ffc:	0211      	lsls	r1, r2, #8
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6952      	ldr	r2, [r2, #20]
 8003002:	0852      	lsrs	r2, r2, #1
 8003004:	3a01      	subs	r2, #1
 8003006:	0652      	lsls	r2, r2, #25
 8003008:	4311      	orrs	r1, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6852      	ldr	r2, [r2, #4]
 800300e:	3a01      	subs	r2, #1
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	491a      	ldr	r1, [pc, #104]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a17      	ldr	r2, [pc, #92]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003026:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800302a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fd ffae 	bl	8000f8c <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003032:	e00f      	b.n	8003054 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003034:	f7fd ffaa 	bl	8000f8c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d908      	bls.n	8003054 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8003052:	e006      	b.n	8003062 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0e9      	beq.n	8003034 <RCCEx_PLLSAI1_Config+0x16c>
 8003060:	e000      	b.n	8003064 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8003062:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	4904      	ldr	r1, [pc, #16]	; (8003084 <RCCEx_PLLSAI1_Config+0x1bc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	07ff800c 	.word	0x07ff800c
 800308c:	ff9f800c 	.word	0xff9f800c
 8003090:	f9ff800c 	.word	0xf9ff800c

08003094 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d018      	beq.n	80030dc <RCCEx_PLLSAI2_Config+0x48>
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d81f      	bhi.n	80030ee <RCCEx_PLLSAI2_Config+0x5a>
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d002      	beq.n	80030b8 <RCCEx_PLLSAI2_Config+0x24>
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d009      	beq.n	80030ca <RCCEx_PLLSAI2_Config+0x36>
 80030b6:	e01a      	b.n	80030ee <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030b8:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d117      	bne.n	80030f4 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c8:	e014      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030ca:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d110      	bne.n	80030f8 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030da:	e00d      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80030dc:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e006      	b.n	80030fc <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
      break;
 80030f2:	e004      	b.n	80030fe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80030f4:	bf00      	nop
 80030f6:	e002      	b.n	80030fe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80030f8:	bf00      	nop
 80030fa:	e000      	b.n	80030fe <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80030fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d169      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003104:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a36      	ldr	r2, [pc, #216]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003110:	f7fd ff3c 	bl	8000f8c <HAL_GetTick>
 8003114:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003116:	e00f      	b.n	8003138 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003118:	f7fd ff38 	bl	8000f8c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d908      	bls.n	8003138 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003126:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003136:	e006      	b.n	8003146 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e9      	bne.n	8003118 <RCCEx_PLLSAI2_Config+0x84>
 8003144:	e000      	b.n	8003148 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8003146:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d144      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d115      	bne.n	8003180 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <RCCEx_PLLSAI2_Config+0x154>)
 800315a:	4013      	ands	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6892      	ldr	r2, [r2, #8]
 8003160:	0211      	lsls	r1, r2, #8
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68d2      	ldr	r2, [r2, #12]
 8003166:	06d2      	lsls	r2, r2, #27
 8003168:	4311      	orrs	r1, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6852      	ldr	r2, [r2, #4]
 800316e:	3a01      	subs	r2, #1
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	491a      	ldr	r1, [pc, #104]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 800317c:	4313      	orrs	r3, r2
 800317e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003180:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fd fefe 	bl	8000f8c <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003192:	e00f      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003194:	f7fd fefa 	bl	8000f8c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d908      	bls.n	80031b4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80031b2:	e006      	b.n	80031c2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0e9      	beq.n	8003194 <RCCEx_PLLSAI2_Config+0x100>
 80031c0:	e000      	b.n	80031c4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80031c2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	4904      	ldr	r1, [pc, #16]	; (80031e4 <RCCEx_PLLSAI2_Config+0x150>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	07ff800c 	.word	0x07ff800c

080031ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d05c      	beq.n	80032b8 <HAL_RTC_Init+0xcc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd fc5e 	bl	8000ad4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <HAL_RTC_Init+0xd8>)
 8003222:	22ca      	movs	r2, #202	; 0xca
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_RTC_Init+0xd8>)
 8003228:	2253      	movs	r2, #83	; 0x53
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f98d 	bl	800354c <RTC_EnterInitMode>
 8003232:	4603      	mov	r3, r0
 8003234:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d133      	bne.n	80032a4 <HAL_RTC_Init+0xb8>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800323c:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <HAL_RTC_Init+0xd8>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <HAL_RTC_Init+0xd8>)
 8003242:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800324a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RTC_Init+0xd8>)
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	4319      	orrs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	430b      	orrs	r3, r1
 8003260:	4918      	ldr	r1, [pc, #96]	; (80032c4 <HAL_RTC_Init+0xd8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	041b      	lsls	r3, r3, #16
 8003270:	4914      	ldr	r1, [pc, #80]	; (80032c4 <HAL_RTC_Init+0xd8>)
 8003272:	4313      	orrs	r3, r2
 8003274:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f99c 	bl	80035b4 <RTC_ExitInitMode>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <HAL_RTC_Init+0xb8>
      {
        MODIFY_REG(RTC->CR, \
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_RTC_Init+0xd8>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a19      	ldr	r1, [r3, #32]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4319      	orrs	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	430b      	orrs	r3, r1
 800329e:	4909      	ldr	r1, [pc, #36]	; (80032c4 <HAL_RTC_Init+0xd8>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a4:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <HAL_RTC_Init+0xd8>)
 80032a6:	22ff      	movs	r2, #255	; 0xff
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d103      	bne.n	80032b8 <HAL_RTC_Init+0xcc>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40002800 	.word	0x40002800

080032c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_RTC_SetTime+0x1a>
 80032de:	2302      	movs	r3, #2
 80032e0:	e081      	b.n	80033e6 <HAL_RTC_SetTime+0x11e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032f2:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 80032f4:	22ca      	movs	r2, #202	; 0xca
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24
 80032f8:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 80032fa:	2253      	movs	r2, #83	; 0x53
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f924 	bl	800354c <RTC_EnterInitMode>
 8003304:	4603      	mov	r3, r0
 8003306:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d15c      	bne.n	80033c8 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d125      	bne.n	8003360 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2200      	movs	r2, #0
 8003324:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f980 	bl	8003630 <RTC_ByteToBcd2>
 8003330:	4603      	mov	r3, r0
 8003332:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	785b      	ldrb	r3, [r3, #1]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f979 	bl	8003630 <RTC_ByteToBcd2>
 800333e:	4603      	mov	r3, r0
 8003340:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003342:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	789b      	ldrb	r3, [r3, #2]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f971 	bl	8003630 <RTC_ByteToBcd2>
 800334e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003350:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	78db      	ldrb	r3, [r3, #3]
 8003358:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e017      	b.n	8003390 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800337e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003384:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003390:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003398:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800339c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 80033a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a8:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	68d9      	ldr	r1, [r3, #12]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	430b      	orrs	r3, r1
 80033b8:	490d      	ldr	r1, [pc, #52]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f8f8 	bl	80035b4 <RTC_ExitInitMode>
 80033c4:	4603      	mov	r3, r0
 80033c6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_RTC_SetTime+0x128>)
 80033ca:	22ff      	movs	r2, #255	; 0xff
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d103      	bne.n	80033dc <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd90      	pop	{r4, r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40002800 	.word	0x40002800

080033f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_RTC_SetDate+0x1a>
 800340a:	2302      	movs	r3, #2
 800340c:	e071      	b.n	80034f2 <HAL_RTC_SetDate+0xfe>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10e      	bne.n	8003442 <HAL_RTC_SetDate+0x4e>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	f023 0310 	bic.w	r3, r3, #16
 8003438:	b2db      	uxtb	r3, r3
 800343a:	330a      	adds	r3, #10
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d11c      	bne.n	8003482 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	78db      	ldrb	r3, [r3, #3]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f8ef 	bl	8003630 <RTC_ByteToBcd2>
 8003452:	4603      	mov	r3, r0
 8003454:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	785b      	ldrb	r3, [r3, #1]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f8e8 	bl	8003630 <RTC_ByteToBcd2>
 8003460:	4603      	mov	r3, r0
 8003462:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003464:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	789b      	ldrb	r3, [r3, #2]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f8e0 	bl	8003630 <RTC_ByteToBcd2>
 8003470:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003472:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e00e      	b.n	80034a0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	78db      	ldrb	r3, [r3, #3]
 8003486:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800348e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003494:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034a0:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HAL_RTC_SetDate+0x108>)
 80034a2:	22ca      	movs	r2, #202	; 0xca
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <HAL_RTC_SetDate+0x108>)
 80034a8:	2253      	movs	r2, #83	; 0x53
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f84d 	bl	800354c <RTC_EnterInitMode>
 80034b2:	4603      	mov	r3, r0
 80034b4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80034bc:	4a0f      	ldr	r2, [pc, #60]	; (80034fc <HAL_RTC_SetDate+0x108>)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f872 	bl	80035b4 <RTC_ExitInitMode>
 80034d0:	4603      	mov	r3, r0
 80034d2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_RTC_SetDate+0x108>)
 80034d6:	22ff      	movs	r2, #255	; 0xff
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80034da:	7cfb      	ldrb	r3, [r7, #19]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d103      	bne.n	80034e8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40002800 	.word	0x40002800

08003500 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_RTC_WaitForSynchro+0x48>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <HAL_RTC_WaitForSynchro+0x48>)
 800350e:	f023 0320 	bic.w	r3, r3, #32
 8003512:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003514:	f7fd fd3a 	bl	8000f8c <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800351a:	e009      	b.n	8003530 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800351c:	f7fd fd36 	bl	8000f8c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800352a:	d901      	bls.n	8003530 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e006      	b.n	800353e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RTC_WaitForSynchro+0x48>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0ef      	beq.n	800351c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40002800 	.word	0x40002800

0800354c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <RTC_EnterInitMode+0x64>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d120      	bne.n	80035a6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <RTC_EnterInitMode+0x64>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a11      	ldr	r2, [pc, #68]	; (80035b0 <RTC_EnterInitMode+0x64>)
 800356a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003570:	f7fd fd0c 	bl	8000f8c <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003576:	e00d      	b.n	8003594 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003578:	f7fd fd08 	bl	8000f8c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003586:	d905      	bls.n	8003594 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2203      	movs	r2, #3
 8003590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <RTC_EnterInitMode+0x64>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <RTC_EnterInitMode+0x5a>
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d1e8      	bne.n	8003578 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40002800 	.word	0x40002800

080035b4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <RTC_ExitInitMode+0x78>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <RTC_ExitInitMode+0x78>)
 80035c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ca:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80035cc:	4b17      	ldr	r3, [pc, #92]	; (800362c <RTC_ExitInitMode+0x78>)
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10c      	bne.n	80035f2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff91 	bl	8003500 <HAL_RTC_WaitForSynchro>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01e      	beq.n	8003622 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2203      	movs	r2, #3
 80035e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	e017      	b.n	8003622 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <RTC_ExitInitMode+0x78>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	4a0d      	ldr	r2, [pc, #52]	; (800362c <RTC_ExitInitMode+0x78>)
 80035f8:	f023 0320 	bic.w	r3, r3, #32
 80035fc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff7e 	bl	8003500 <HAL_RTC_WaitForSynchro>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2203      	movs	r2, #3
 800360e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <RTC_ExitInitMode+0x78>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	4a04      	ldr	r2, [pc, #16]	; (800362c <RTC_ExitInitMode+0x78>)
 800361c:	f043 0320 	orr.w	r3, r3, #32
 8003620:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003622:	7bfb      	ldrb	r3, [r7, #15]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40002800 	.word	0x40002800

08003630 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003642:	e005      	b.n	8003650 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3301      	adds	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800364a:	7afb      	ldrb	r3, [r7, #11]
 800364c:	3b0a      	subs	r3, #10
 800364e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003650:	7afb      	ldrb	r3, [r7, #11]
 8003652:	2b09      	cmp	r3, #9
 8003654:	d8f6      	bhi.n	8003644 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	b2da      	uxtb	r2, r3
 800365e:	7afb      	ldrb	r3, [r7, #11]
 8003660:	4313      	orrs	r3, r2
 8003662:	b2db      	uxtb	r3, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	490f      	ldr	r1, [pc, #60]	; (80036c0 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8003684:	4313      	orrs	r3, r2
 8003686:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	490c      	ldr	r1, [pc, #48]	; (80036c4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8003692:	4313      	orrs	r3, r2
 8003694:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6919      	ldr	r1, [r3, #16]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	430b      	orrs	r3, r1
 80036aa:	4906      	ldr	r1, [pc, #24]	; (80036c4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40002800 	.word	0x40002800
 80036c4:	40003400 	.word	0x40003400

080036c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e095      	b.n	8003806 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d108      	bne.n	80036f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ea:	d009      	beq.n	8003700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
 80036f2:	e005      	b.n	8003700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd fa18 	bl	8000b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003736:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003740:	d902      	bls.n	8003748 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	e002      	b.n	800374e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800374c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003756:	d007      	beq.n	8003768 <HAL_SPI_Init+0xa0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003760:	d002      	beq.n	8003768 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	ea42 0103 	orr.w	r1, r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	0c1b      	lsrs	r3, r3, #16
 80037c4:	f003 0204 	and.w	r2, r3, #4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037e4:	ea42 0103 	orr.w	r1, r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	460b      	mov	r3, r1
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e05b      	b.n	80038de <HAL_MultiProcessor_Init+0xd0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <HAL_MultiProcessor_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f7fd f9cd 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2224      	movs	r2, #36	; 0x24
 8003842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0201 	bic.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f846 	bl	80038e8 <UART_SetConfig>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_MultiProcessor_Init+0x58>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e03b      	b.n	80038de <HAL_MultiProcessor_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_MultiProcessor_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fb08 	bl	8003e84 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003892:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389a:	d10a      	bne.n	80038b2 <HAL_MultiProcessor_Init+0xa4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80038a6:	7afb      	ldrb	r3, [r7, #11]
 80038a8:	061a      	lsls	r2, r3, #24
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb76 	bl	8003fc8 <UART_CheckIdleState>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e8:	b5b0      	push	{r4, r5, r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	4313      	orrs	r3, r2
 800390a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4bb1      	ldr	r3, [pc, #708]	; (8003bd8 <UART_SetConfig+0x2f0>)
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	69f9      	ldr	r1, [r7, #28]
 800391c:	430b      	orrs	r3, r1
 800391e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4aa6      	ldr	r2, [pc, #664]	; (8003bdc <UART_SetConfig+0x2f4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	4313      	orrs	r3, r2
 800394e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800395a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	69f9      	ldr	r1, [r7, #28]
 8003964:	430b      	orrs	r3, r1
 8003966:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	f023 010f 	bic.w	r1, r3, #15
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a97      	ldr	r2, [pc, #604]	; (8003be0 <UART_SetConfig+0x2f8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d120      	bne.n	80039ca <UART_SetConfig+0xe2>
 8003988:	4b96      	ldr	r3, [pc, #600]	; (8003be4 <UART_SetConfig+0x2fc>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b03      	cmp	r3, #3
 8003994:	d816      	bhi.n	80039c4 <UART_SetConfig+0xdc>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <UART_SetConfig+0xb4>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039b9 	.word	0x080039b9
 80039a4:	080039b3 	.word	0x080039b3
 80039a8:	080039bf 	.word	0x080039bf
 80039ac:	2301      	movs	r3, #1
 80039ae:	76fb      	strb	r3, [r7, #27]
 80039b0:	e0e7      	b.n	8003b82 <UART_SetConfig+0x29a>
 80039b2:	2302      	movs	r3, #2
 80039b4:	76fb      	strb	r3, [r7, #27]
 80039b6:	e0e4      	b.n	8003b82 <UART_SetConfig+0x29a>
 80039b8:	2304      	movs	r3, #4
 80039ba:	76fb      	strb	r3, [r7, #27]
 80039bc:	e0e1      	b.n	8003b82 <UART_SetConfig+0x29a>
 80039be:	2308      	movs	r3, #8
 80039c0:	76fb      	strb	r3, [r7, #27]
 80039c2:	e0de      	b.n	8003b82 <UART_SetConfig+0x29a>
 80039c4:	2310      	movs	r3, #16
 80039c6:	76fb      	strb	r3, [r7, #27]
 80039c8:	e0db      	b.n	8003b82 <UART_SetConfig+0x29a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a86      	ldr	r2, [pc, #536]	; (8003be8 <UART_SetConfig+0x300>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d132      	bne.n	8003a3a <UART_SetConfig+0x152>
 80039d4:	4b83      	ldr	r3, [pc, #524]	; (8003be4 <UART_SetConfig+0x2fc>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d828      	bhi.n	8003a34 <UART_SetConfig+0x14c>
 80039e2:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0x100>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003a35 	.word	0x08003a35
 80039f0:	08003a35 	.word	0x08003a35
 80039f4:	08003a35 	.word	0x08003a35
 80039f8:	08003a29 	.word	0x08003a29
 80039fc:	08003a35 	.word	0x08003a35
 8003a00:	08003a35 	.word	0x08003a35
 8003a04:	08003a35 	.word	0x08003a35
 8003a08:	08003a23 	.word	0x08003a23
 8003a0c:	08003a35 	.word	0x08003a35
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a35 	.word	0x08003a35
 8003a18:	08003a2f 	.word	0x08003a2f
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	76fb      	strb	r3, [r7, #27]
 8003a20:	e0af      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a22:	2302      	movs	r3, #2
 8003a24:	76fb      	strb	r3, [r7, #27]
 8003a26:	e0ac      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	76fb      	strb	r3, [r7, #27]
 8003a2c:	e0a9      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	76fb      	strb	r3, [r7, #27]
 8003a32:	e0a6      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a34:	2310      	movs	r3, #16
 8003a36:	76fb      	strb	r3, [r7, #27]
 8003a38:	e0a3      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6b      	ldr	r2, [pc, #428]	; (8003bec <UART_SetConfig+0x304>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d120      	bne.n	8003a86 <UART_SetConfig+0x19e>
 8003a44:	4b67      	ldr	r3, [pc, #412]	; (8003be4 <UART_SetConfig+0x2fc>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a4e:	2b30      	cmp	r3, #48	; 0x30
 8003a50:	d013      	beq.n	8003a7a <UART_SetConfig+0x192>
 8003a52:	2b30      	cmp	r3, #48	; 0x30
 8003a54:	d814      	bhi.n	8003a80 <UART_SetConfig+0x198>
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d009      	beq.n	8003a6e <UART_SetConfig+0x186>
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d810      	bhi.n	8003a80 <UART_SetConfig+0x198>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <UART_SetConfig+0x180>
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d006      	beq.n	8003a74 <UART_SetConfig+0x18c>
 8003a66:	e00b      	b.n	8003a80 <UART_SetConfig+0x198>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	76fb      	strb	r3, [r7, #27]
 8003a6c:	e089      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	76fb      	strb	r3, [r7, #27]
 8003a72:	e086      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a74:	2304      	movs	r3, #4
 8003a76:	76fb      	strb	r3, [r7, #27]
 8003a78:	e083      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	76fb      	strb	r3, [r7, #27]
 8003a7e:	e080      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a80:	2310      	movs	r3, #16
 8003a82:	76fb      	strb	r3, [r7, #27]
 8003a84:	e07d      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a59      	ldr	r2, [pc, #356]	; (8003bf0 <UART_SetConfig+0x308>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d120      	bne.n	8003ad2 <UART_SetConfig+0x1ea>
 8003a90:	4b54      	ldr	r3, [pc, #336]	; (8003be4 <UART_SetConfig+0x2fc>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a9c:	d013      	beq.n	8003ac6 <UART_SetConfig+0x1de>
 8003a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003aa0:	d814      	bhi.n	8003acc <UART_SetConfig+0x1e4>
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d009      	beq.n	8003aba <UART_SetConfig+0x1d2>
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d810      	bhi.n	8003acc <UART_SetConfig+0x1e4>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <UART_SetConfig+0x1cc>
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d006      	beq.n	8003ac0 <UART_SetConfig+0x1d8>
 8003ab2:	e00b      	b.n	8003acc <UART_SetConfig+0x1e4>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	76fb      	strb	r3, [r7, #27]
 8003ab8:	e063      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003aba:	2302      	movs	r3, #2
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e060      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e05d      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e05a      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003acc:	2310      	movs	r3, #16
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	e057      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a47      	ldr	r2, [pc, #284]	; (8003bf4 <UART_SetConfig+0x30c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d125      	bne.n	8003b28 <UART_SetConfig+0x240>
 8003adc:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <UART_SetConfig+0x2fc>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aea:	d017      	beq.n	8003b1c <UART_SetConfig+0x234>
 8003aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af0:	d817      	bhi.n	8003b22 <UART_SetConfig+0x23a>
 8003af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af6:	d00b      	beq.n	8003b10 <UART_SetConfig+0x228>
 8003af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afc:	d811      	bhi.n	8003b22 <UART_SetConfig+0x23a>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <UART_SetConfig+0x222>
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b06:	d006      	beq.n	8003b16 <UART_SetConfig+0x22e>
 8003b08:	e00b      	b.n	8003b22 <UART_SetConfig+0x23a>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	76fb      	strb	r3, [r7, #27]
 8003b0e:	e038      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b10:	2302      	movs	r3, #2
 8003b12:	76fb      	strb	r3, [r7, #27]
 8003b14:	e035      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b16:	2304      	movs	r3, #4
 8003b18:	76fb      	strb	r3, [r7, #27]
 8003b1a:	e032      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	76fb      	strb	r3, [r7, #27]
 8003b20:	e02f      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b22:	2310      	movs	r3, #16
 8003b24:	76fb      	strb	r3, [r7, #27]
 8003b26:	e02c      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <UART_SetConfig+0x2f4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d125      	bne.n	8003b7e <UART_SetConfig+0x296>
 8003b32:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <UART_SetConfig+0x2fc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b40:	d017      	beq.n	8003b72 <UART_SetConfig+0x28a>
 8003b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b46:	d817      	bhi.n	8003b78 <UART_SetConfig+0x290>
 8003b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4c:	d00b      	beq.n	8003b66 <UART_SetConfig+0x27e>
 8003b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b52:	d811      	bhi.n	8003b78 <UART_SetConfig+0x290>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <UART_SetConfig+0x278>
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5c:	d006      	beq.n	8003b6c <UART_SetConfig+0x284>
 8003b5e:	e00b      	b.n	8003b78 <UART_SetConfig+0x290>
 8003b60:	2300      	movs	r3, #0
 8003b62:	76fb      	strb	r3, [r7, #27]
 8003b64:	e00d      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b66:	2302      	movs	r3, #2
 8003b68:	76fb      	strb	r3, [r7, #27]
 8003b6a:	e00a      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	76fb      	strb	r3, [r7, #27]
 8003b70:	e007      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b72:	2308      	movs	r3, #8
 8003b74:	76fb      	strb	r3, [r7, #27]
 8003b76:	e004      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	76fb      	strb	r3, [r7, #27]
 8003b7c:	e001      	b.n	8003b82 <UART_SetConfig+0x29a>
 8003b7e:	2310      	movs	r3, #16
 8003b80:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <UART_SetConfig+0x2f4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	f040 80a3 	bne.w	8003cd4 <UART_SetConfig+0x3ec>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b8e:	7efb      	ldrb	r3, [r7, #27]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d83b      	bhi.n	8003c0c <UART_SetConfig+0x324>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <UART_SetConfig+0x2b4>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003bc9 	.word	0x08003bc9
 8003ba4:	08003bd1 	.word	0x08003bd1
 8003ba8:	08003c0d 	.word	0x08003c0d
 8003bac:	08003bfd 	.word	0x08003bfd
 8003bb0:	08003c0d 	.word	0x08003c0d
 8003bb4:	08003c0d 	.word	0x08003c0d
 8003bb8:	08003c0d 	.word	0x08003c0d
 8003bbc:	08003c05 	.word	0x08003c05
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc0:	f7fe fcfa 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	6178      	str	r0, [r7, #20]
        break;
 8003bc6:	e026      	b.n	8003c16 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc8:	f7fe fd0a 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 8003bcc:	6178      	str	r0, [r7, #20]
        break;
 8003bce:	e022      	b.n	8003c16 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <UART_SetConfig+0x310>)
 8003bd2:	617b      	str	r3, [r7, #20]
        break;
 8003bd4:	e01f      	b.n	8003c16 <UART_SetConfig+0x32e>
 8003bd6:	bf00      	nop
 8003bd8:	cfff69f3 	.word	0xcfff69f3
 8003bdc:	40008000 	.word	0x40008000
 8003be0:	40013800 	.word	0x40013800
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40004400 	.word	0x40004400
 8003bec:	40004800 	.word	0x40004800
 8003bf0:	40004c00 	.word	0x40004c00
 8003bf4:	40005000 	.word	0x40005000
 8003bf8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfc:	f7fe fc2c 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8003c00:	6178      	str	r0, [r7, #20]
        break;
 8003c02:	e008      	b.n	8003c16 <UART_SetConfig+0x32e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c08:	617b      	str	r3, [r7, #20]
        break;
 8003c0a:	e004      	b.n	8003c16 <UART_SetConfig+0x32e>
      default:
        pclk = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	76bb      	strb	r3, [r7, #26]
        break;
 8003c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 811b 	beq.w	8003e54 <UART_SetConfig+0x56c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	4a96      	ldr	r2, [pc, #600]	; (8003e7c <UART_SetConfig+0x594>)
 8003c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c30:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d305      	bcc.n	8003c4e <UART_SetConfig+0x366>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d902      	bls.n	8003c54 <UART_SetConfig+0x36c>
      {
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	76bb      	strb	r3, [r7, #26]
 8003c52:	e0ff      	b.n	8003e54 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f04f 0100 	mov.w	r1, #0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	4a86      	ldr	r2, [pc, #536]	; (8003e7c <UART_SetConfig+0x594>)
 8003c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	f7fc fae2 	bl	8000234 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	020b      	lsls	r3, r1, #8
 8003c82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c86:	0202      	lsls	r2, r0, #8
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	6849      	ldr	r1, [r1, #4]
 8003c8c:	0849      	lsrs	r1, r1, #1
 8003c8e:	4608      	mov	r0, r1
 8003c90:	f04f 0100 	mov.w	r1, #0
 8003c94:	1814      	adds	r4, r2, r0
 8003c96:	eb43 0501 	adc.w	r5, r3, r1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	f7fc fac4 	bl	8000234 <__aeabi_uldivmod>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cba:	d308      	bcc.n	8003cce <UART_SetConfig+0x3e6>
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc2:	d204      	bcs.n	8003cce <UART_SetConfig+0x3e6>
        {
          huart->Instance->BRR = usartdiv;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	60da      	str	r2, [r3, #12]
 8003ccc:	e0c2      	b.n	8003e54 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	76bb      	strb	r3, [r7, #26]
 8003cd2:	e0bf      	b.n	8003e54 <UART_SetConfig+0x56c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cdc:	d165      	bne.n	8003daa <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 8003cde:	7efb      	ldrb	r3, [r7, #27]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d828      	bhi.n	8003d36 <UART_SetConfig+0x44e>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <UART_SetConfig+0x404>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003d11 	.word	0x08003d11
 8003cf0:	08003d19 	.word	0x08003d19
 8003cf4:	08003d21 	.word	0x08003d21
 8003cf8:	08003d37 	.word	0x08003d37
 8003cfc:	08003d27 	.word	0x08003d27
 8003d00:	08003d37 	.word	0x08003d37
 8003d04:	08003d37 	.word	0x08003d37
 8003d08:	08003d37 	.word	0x08003d37
 8003d0c:	08003d2f 	.word	0x08003d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d10:	f7fe fc52 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8003d14:	6178      	str	r0, [r7, #20]
        break;
 8003d16:	e013      	b.n	8003d40 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d18:	f7fe fc62 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 8003d1c:	6178      	str	r0, [r7, #20]
        break;
 8003d1e:	e00f      	b.n	8003d40 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d20:	4b57      	ldr	r3, [pc, #348]	; (8003e80 <UART_SetConfig+0x598>)
 8003d22:	617b      	str	r3, [r7, #20]
        break;
 8003d24:	e00c      	b.n	8003d40 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d26:	f7fe fb97 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8003d2a:	6178      	str	r0, [r7, #20]
        break;
 8003d2c:	e008      	b.n	8003d40 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d32:	617b      	str	r3, [r7, #20]
        break;
 8003d34:	e004      	b.n	8003d40 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	76bb      	strb	r3, [r7, #26]
        break;
 8003d3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8086 	beq.w	8003e54 <UART_SetConfig+0x56c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	4a4b      	ldr	r2, [pc, #300]	; (8003e7c <UART_SetConfig+0x594>)
 8003d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d52:	461a      	mov	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d5a:	005a      	lsls	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	441a      	add	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b0f      	cmp	r3, #15
 8003d74:	d916      	bls.n	8003da4 <UART_SetConfig+0x4bc>
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d212      	bcs.n	8003da4 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f023 030f 	bic.w	r3, r3, #15
 8003d86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	89fb      	ldrh	r3, [r7, #14]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	89fa      	ldrh	r2, [r7, #14]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	e057      	b.n	8003e54 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	76bb      	strb	r3, [r7, #26]
 8003da8:	e054      	b.n	8003e54 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003daa:	7efb      	ldrb	r3, [r7, #27]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d828      	bhi.n	8003e02 <UART_SetConfig+0x51a>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0x4d0>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	08003e03 	.word	0x08003e03
 8003dc8:	08003df3 	.word	0x08003df3
 8003dcc:	08003e03 	.word	0x08003e03
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e03 	.word	0x08003e03
 8003dd8:	08003dfb 	.word	0x08003dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7fe fbec 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8003de0:	6178      	str	r0, [r7, #20]
        break;
 8003de2:	e013      	b.n	8003e0c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe fbfc 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 8003de8:	6178      	str	r0, [r7, #20]
        break;
 8003dea:	e00f      	b.n	8003e0c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <UART_SetConfig+0x598>)
 8003dee:	617b      	str	r3, [r7, #20]
        break;
 8003df0:	e00c      	b.n	8003e0c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe fb31 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8003df6:	6178      	str	r0, [r7, #20]
        break;
 8003df8:	e008      	b.n	8003e0c <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfe:	617b      	str	r3, [r7, #20]
        break;
 8003e00:	e004      	b.n	8003e0c <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	76bb      	strb	r3, [r7, #26]
        break;
 8003e0a:	bf00      	nop
    }

    if (pclk != 0U)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d020      	beq.n	8003e54 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <UART_SetConfig+0x594>)
 8003e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	441a      	add	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b0f      	cmp	r3, #15
 8003e3c:	d908      	bls.n	8003e50 <UART_SetConfig+0x568>
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e44:	d204      	bcs.n	8003e50 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	e001      	b.n	8003e54 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003e70:	7ebb      	ldrb	r3, [r7, #26]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bdb0      	pop	{r4, r5, r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	0800442c 	.word	0x0800442c
 8003e80:	00f42400 	.word	0x00f42400

08003e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01a      	beq.n	8003f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f82:	d10a      	bne.n	8003f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	605a      	str	r2, [r3, #4]
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fd8:	f7fc ffd8 	bl	8000f8c <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d10e      	bne.n	800400a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f82f 	bl	800405e <UART_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e025      	b.n	8004056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b04      	cmp	r3, #4
 8004016:	d10e      	bne.n	8004036 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f819 	bl	800405e <UART_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e00f      	b.n	8004056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406e:	e062      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d05e      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004078:	f7fc ff88 	bl	8000f8c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	429a      	cmp	r2, r3
 8004086:	d302      	bcc.n	800408e <UART_WaitOnFlagUntilTimeout+0x30>
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11d      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800409c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e045      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d02e      	beq.n	8004136 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040e6:	d126      	bne.n	8004136 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004100:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2220      	movs	r2, #32
 8004126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e00f      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	429a      	cmp	r2, r3
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	429a      	cmp	r2, r3
 8004152:	d08d      	beq.n	8004070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_UARTEx_DisableFifoMode+0x16>
 8004170:	2302      	movs	r3, #2
 8004172:	e027      	b.n	80041c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80041a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e02d      	b.n	8004244 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	; 0x24
 80041f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0201 	bic.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f84f 	bl	80042c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004260:	2302      	movs	r3, #2
 8004262:	e02d      	b.n	80042c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	; 0x24
 8004270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f811 	bl	80042c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d108      	bne.n	80042ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042e8:	e031      	b.n	800434e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042ea:	2308      	movs	r3, #8
 80042ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042ee:	2308      	movs	r3, #8
 80042f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	0e5b      	lsrs	r3, r3, #25
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	0f5b      	lsrs	r3, r3, #29
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004312:	7bbb      	ldrb	r3, [r7, #14]
 8004314:	7b3a      	ldrb	r2, [r7, #12]
 8004316:	4911      	ldr	r1, [pc, #68]	; (800435c <UARTEx_SetNbDataToProcess+0x94>)
 8004318:	5c8a      	ldrb	r2, [r1, r2]
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	7b3a      	ldrb	r2, [r7, #12]
 8004320:	490f      	ldr	r1, [pc, #60]	; (8004360 <UARTEx_SetNbDataToProcess+0x98>)
 8004322:	5c8a      	ldrb	r2, [r1, r2]
 8004324:	fb93 f3f2 	sdiv	r3, r3, r2
 8004328:	b29a      	uxth	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	7b7a      	ldrb	r2, [r7, #13]
 8004334:	4909      	ldr	r1, [pc, #36]	; (800435c <UARTEx_SetNbDataToProcess+0x94>)
 8004336:	5c8a      	ldrb	r2, [r1, r2]
 8004338:	fb02 f303 	mul.w	r3, r2, r3
 800433c:	7b7a      	ldrb	r2, [r7, #13]
 800433e:	4908      	ldr	r1, [pc, #32]	; (8004360 <UARTEx_SetNbDataToProcess+0x98>)
 8004340:	5c8a      	ldrb	r2, [r1, r2]
 8004342:	fb93 f3f2 	sdiv	r3, r3, r2
 8004346:	b29a      	uxth	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	08004444 	.word	0x08004444
 8004360:	0800444c 	.word	0x0800444c

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4d0d      	ldr	r5, [pc, #52]	; (800439c <__libc_init_array+0x38>)
 8004368:	2600      	movs	r6, #0
 800436a:	4c0d      	ldr	r4, [pc, #52]	; (80043a0 <__libc_init_array+0x3c>)
 800436c:	1b64      	subs	r4, r4, r5
 800436e:	10a4      	asrs	r4, r4, #2
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	4d0b      	ldr	r5, [pc, #44]	; (80043a4 <__libc_init_array+0x40>)
 8004376:	2600      	movs	r6, #0
 8004378:	4c0b      	ldr	r4, [pc, #44]	; (80043a8 <__libc_init_array+0x44>)
 800437a:	f000 f81f 	bl	80043bc <_init>
 800437e:	1b64      	subs	r4, r4, r5
 8004380:	10a4      	asrs	r4, r4, #2
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f855 3b04 	ldr.w	r3, [r5], #4
 800438c:	3601      	adds	r6, #1
 800438e:	4798      	blx	r3
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f855 3b04 	ldr.w	r3, [r5], #4
 8004396:	3601      	adds	r6, #1
 8004398:	4798      	blx	r3
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	0800445c 	.word	0x0800445c
 80043a0:	0800445c 	.word	0x0800445c
 80043a4:	0800445c 	.word	0x0800445c
 80043a8:	08004460 	.word	0x08004460

080043ac <memset>:
 80043ac:	4402      	add	r2, r0
 80043ae:	4603      	mov	r3, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d100      	bne.n	80043b6 <memset+0xa>
 80043b4:	4770      	bx	lr
 80043b6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ba:	e7f9      	b.n	80043b0 <memset+0x4>

080043bc <_init>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	bf00      	nop
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr

080043c8 <_fini>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	bf00      	nop
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr
