
tracker_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800320c  0800320c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003214  08003214  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003214  08003214  00013214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800321c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08003228  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003228  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c21b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cd6  00000000  00000000  0002c24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002df28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001391e  00000000  00000000  0002f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5df  00000000  00000000  0004300e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a57c  00000000  00000000  000515ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cbb69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c40  00000000  00000000  000cbbbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003188 	.word	0x08003188

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003188 	.word	0x08003188

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fb5e 	bl	8000b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f820 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f9a2 	bl	80007f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ac:	f000 f892 	bl	80005d4 <MX_I2C1_Init>
  MX_RTC_Init();
 80004b0:	f000 f8d0 	bl	8000654 <MX_RTC_Init>
  MX_SPI1_Init();
 80004b4:	f000 f932 	bl	800071c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004b8:	f000 f968 	bl	800078c <MX_USART1_UART_Init>
	  HAL_Delay(50000);
	  noise(0);
*/


		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 80004bc:	23a0      	movs	r3, #160	; 0xa0
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2201      	movs	r2, #1
 80004c2:	2102      	movs	r1, #2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fe09 	bl	80010dc <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <main+0x48>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fbb7 	bl	8000c40 <HAL_Delay>
	  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2200      	movs	r2, #0
 80004d8:	2102      	movs	r1, #2
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fdfe 	bl	80010dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 80004e0:	e7ec      	b.n	80004bc <main+0x20>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	00001388 	.word	0x00001388

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b09d      	sub	sp, #116	; 0x74
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	2438      	movs	r4, #56	; 0x38
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2338      	movs	r3, #56	; 0x38
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f002 fe3d 	bl	8003178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	2324      	movs	r3, #36	; 0x24
 8000500:	18fb      	adds	r3, r7, r3
 8000502:	0018      	movs	r0, r3
 8000504:	2314      	movs	r3, #20
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f002 fe35 	bl	8003178 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	0018      	movs	r0, r3
 8000512:	2320      	movs	r3, #32
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f002 fe2e 	bl	8003178 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <SystemClock_Config+0xe4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a2b      	ldr	r2, [pc, #172]	; (80005d0 <SystemClock_Config+0xe8>)
 8000522:	401a      	ands	r2, r3
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <SystemClock_Config+0xe4>)
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0109      	lsls	r1, r1, #4
 800052a:	430a      	orrs	r2, r1
 800052c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800052e:	0021      	movs	r1, r4
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2218      	movs	r2, #24
 8000534:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2201      	movs	r2, #1
 800053a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2201      	movs	r2, #1
 8000540:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	22a0      	movs	r2, #160	; 0xa0
 800054c:	0212      	lsls	r2, r2, #8
 800054e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	187b      	adds	r3, r7, r1
 8000558:	0018      	movs	r0, r3
 800055a:	f000 ff0b 	bl	8001374 <HAL_RCC_OscConfig>
 800055e:	1e03      	subs	r3, r0, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000562:	f000 f9b9 	bl	80008d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000566:	2124      	movs	r1, #36	; 0x24
 8000568:	187b      	adds	r3, r7, r1
 800056a:	220f      	movs	r2, #15
 800056c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fab6 	bl	8001afc <HAL_RCC_ClockConfig>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000594:	f000 f9a0 	bl	80008d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2229      	movs	r2, #41	; 0x29
 800059c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	0292      	lsls	r2, r2, #10
 80005b0:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fcc5 	bl	8001f44 <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005be:	f000 f98b 	bl	80008d8 <Error_Handler>
  }
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b01d      	add	sp, #116	; 0x74
 80005c8:	bd90      	pop	{r4, r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40007000 	.word	0x40007000
 80005d0:	ffffe7ff 	.word	0xffffe7ff

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_I2C1_Init+0x78>)
 80005da:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <MX_I2C1_Init+0x7c>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_I2C1_Init+0x78>)
 80005e0:	22e1      	movs	r2, #225	; 0xe1
 80005e2:	00d2      	lsls	r2, r2, #3
 80005e4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_I2C1_Init+0x78>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_I2C1_Init+0x78>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_I2C1_Init+0x78>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_I2C1_Init+0x78>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_I2C1_Init+0x78>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C1_Init+0x78>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_I2C1_Init+0x78>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_I2C1_Init+0x78>)
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fd80 	bl	8001118 <HAL_I2C_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 f95c 	bl	80008d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_I2C1_Init+0x78>)
 8000622:	2100      	movs	r1, #0
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fe0d 	bl	8001244 <HAL_I2CEx_ConfigAnalogFilter>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800062e:	f000 f953 	bl	80008d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_I2C1_Init+0x78>)
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f000 fe50 	bl	80012dc <HAL_I2CEx_ConfigDigitalFilter>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000640:	f000 f94a 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	20000028 	.word	0x20000028
 8000650:	40005400 	.word	0x40005400

08000654 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	0018      	movs	r0, r3
 800065e:	2314      	movs	r3, #20
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f002 fd88 	bl	8003178 <memset>
  RTC_DateTypeDef sDate = {0};
 8000668:	003b      	movs	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <MX_RTC_Init+0xc0>)
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <MX_RTC_Init+0xc4>)
 8000672:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <MX_RTC_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <MX_RTC_Init+0xc0>)
 800067c:	227f      	movs	r2, #127	; 0x7f
 800067e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_RTC_Init+0xc0>)
 8000682:	22ff      	movs	r2, #255	; 0xff
 8000684:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <MX_RTC_Init+0xc0>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_RTC_Init+0xc0>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_RTC_Init+0xc0>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_RTC_Init+0xc0>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_RTC_Init+0xc0>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fd95 	bl	80021d0 <HAL_RTC_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80006aa:	f000 f915 	bl	80008d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006cc:	1d39      	adds	r1, r7, #4
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_RTC_Init+0xc0>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fe1a 	bl	800230c <HAL_RTC_SetTime>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80006dc:	f000 f8fc 	bl	80008d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006e0:	003b      	movs	r3, r7
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2201      	movs	r2, #1
 80006ea:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2201      	movs	r2, #1
 80006f0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006f8:	0039      	movs	r1, r7
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_RTC_Init+0xc0>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fec8 	bl	8002494 <HAL_RTC_SetDate>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000708:	f000 f8e6 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b006      	add	sp, #24
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000f8 	.word	0x200000f8
 8000718:	40002800 	.word	0x40002800

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <MX_SPI1_Init+0x6c>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_SPI1_Init+0x68>)
 8000728:	2282      	movs	r2, #130	; 0x82
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_SPI1_Init+0x68>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_SPI1_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_SPI1_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_SPI1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SPI1_Init+0x68>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	02d2      	lsls	r2, r2, #11
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <MX_SPI1_Init+0x68>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_SPI1_Init+0x68>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_SPI1_Init+0x68>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_SPI1_Init+0x68>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_SPI1_Init+0x68>)
 8000768:	2207      	movs	r2, #7
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_SPI1_Init+0x68>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 ffb8 	bl	80026e4 <HAL_SPI_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f8ae 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	2000011c 	.word	0x2000011c
 8000788:	40013000 	.word	0x40013000

0800078c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_USART1_UART_Init+0x60>)
 8000794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 8000798:	2296      	movs	r2, #150	; 0x96
 800079a:	0192      	lsls	r2, r2, #6
 800079c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART1_UART_Init+0x5c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 f819 	bl	800280c <HAL_MultiProcessor_Init>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80007de:	f000 f87b 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000074 	.word	0x20000074
 80007ec:	40013800 	.word	0x40013800

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	240c      	movs	r4, #12
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	2314      	movs	r3, #20
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f002 fcb9 	bl	8003178 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <MX_GPIO_Init+0xdc>)
 800080c:	2104      	movs	r1, #4
 800080e:	430a      	orrs	r2, r1
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000816:	2204      	movs	r2, #4
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000824:	2101      	movs	r1, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_GPIO_Init+0xdc>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_GPIO_Init+0xdc>)
 800083c:	2102      	movs	r1, #2
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	2202      	movs	r2, #2
 8000848:	4013      	ands	r3, r2
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|SSR_Pin|RESET_LORA_Pin|GPS_RESET_Pin
 800084e:	4920      	ldr	r1, [pc, #128]	; (80008d0 <MX_GPIO_Init+0xe0>)
 8000850:	23a0      	movs	r3, #160	; 0xa0
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	2200      	movs	r2, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fc40 	bl	80010dc <HAL_GPIO_WritePin>
                          |GPS_WAKE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUZZER_Pin SSR_Pin RESET_LORA_Pin GPS_RESET_Pin
                           GPS_WAKE_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|SSR_Pin|RESET_LORA_Pin|GPS_RESET_Pin
 800085c:	193b      	adds	r3, r7, r4
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <MX_GPIO_Init+0xe0>)
 8000860:	601a      	str	r2, [r3, #0]
                          |GPS_WAKE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2201      	movs	r2, #1
 8000866:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	193a      	adds	r2, r7, r4
 8000876:	23a0      	movs	r3, #160	; 0xa0
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	0011      	movs	r1, r2
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fab7 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8000882:	193b      	adds	r3, r7, r4
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0152      	lsls	r2, r2, #5
 8000888:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8000896:	193a      	adds	r2, r7, r4
 8000898:	23a0      	movs	r3, #160	; 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 faa6 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIS_INT_Pin LIS_INT1_Pin */
  GPIO_InitStruct.Pin = LIS_INT_Pin|LIS_INT1_Pin;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <MX_GPIO_Init+0xe4>)
 80008ba:	0019      	movs	r1, r3
 80008bc:	0010      	movs	r0, r2
 80008be:	f000 fa97 	bl	8000df0 <HAL_GPIO_Init>

}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b009      	add	sp, #36	; 0x24
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000
 80008d0:	0000090b 	.word	0x0000090b
 80008d4:	50000400 	.word	0x50000400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <HAL_MspInit+0x24>)
 80008ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x24>)
 80008ee:	2101      	movs	r1, #1
 80008f0:	430a      	orrs	r2, r1
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <HAL_MspInit+0x24>)
 80008f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <HAL_MspInit+0x24>)
 80008fa:	2180      	movs	r1, #128	; 0x80
 80008fc:	0549      	lsls	r1, r1, #21
 80008fe:	430a      	orrs	r2, r1
 8000900:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	240c      	movs	r4, #12
 8000916:	193b      	adds	r3, r7, r4
 8000918:	0018      	movs	r0, r3
 800091a:	2314      	movs	r3, #20
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 fc2a 	bl	8003178 <memset>
  if(hi2c->Instance==I2C1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_I2C_MspInit+0x7c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d128      	bne.n	8000980 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_I2C_MspInit+0x80>)
 8000930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <HAL_I2C_MspInit+0x80>)
 8000934:	2102      	movs	r1, #2
 8000936:	430a      	orrs	r2, r1
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_I2C_MspInit+0x80>)
 800093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093e:	2202      	movs	r2, #2
 8000940:	4013      	ands	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000946:	0021      	movs	r1, r4
 8000948:	187b      	adds	r3, r7, r1
 800094a:	22c0      	movs	r2, #192	; 0xc0
 800094c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2212      	movs	r2, #18
 8000952:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2201      	movs	r2, #1
 8000958:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2203      	movs	r2, #3
 800095e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2201      	movs	r2, #1
 8000964:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	187b      	adds	r3, r7, r1
 8000968:	4a09      	ldr	r2, [pc, #36]	; (8000990 <HAL_I2C_MspInit+0x84>)
 800096a:	0019      	movs	r1, r3
 800096c:	0010      	movs	r0, r2
 800096e:	f000 fa3f 	bl	8000df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_I2C_MspInit+0x80>)
 8000974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_I2C_MspInit+0x80>)
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	0389      	lsls	r1, r1, #14
 800097c:	430a      	orrs	r2, r1
 800097e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b009      	add	sp, #36	; 0x24
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40005400 	.word	0x40005400
 800098c:	40021000 	.word	0x40021000
 8000990:	50000400 	.word	0x50000400

08000994 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_RTC_MspInit+0x28>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d106      	bne.n	80009b4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_RTC_MspInit+0x2c>)
 80009a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_RTC_MspInit+0x2c>)
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	02c9      	lsls	r1, r1, #11
 80009b0:	430a      	orrs	r2, r1
 80009b2:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	b002      	add	sp, #8
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40002800 	.word	0x40002800
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	240c      	movs	r4, #12
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	0018      	movs	r0, r3
 80009d2:	2314      	movs	r3, #20
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f002 fbce 	bl	8003178 <memset>
  if(hspi->Instance==SPI1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <HAL_SPI_MspInit+0x80>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d129      	bne.n	8000a3a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <HAL_SPI_MspInit+0x84>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_SPI_MspInit+0x84>)
 80009ec:	2180      	movs	r1, #128	; 0x80
 80009ee:	0149      	lsls	r1, r1, #5
 80009f0:	430a      	orrs	r2, r1
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_SPI_MspInit+0x84>)
 80009f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <HAL_SPI_MspInit+0x84>)
 80009fa:	2101      	movs	r1, #1
 80009fc:	430a      	orrs	r2, r1
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_SPI_MspInit+0x84>)
 8000a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a04:	2201      	movs	r2, #1
 8000a06:	4013      	ands	r3, r2
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a0c:	0021      	movs	r1, r4
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	22f0      	movs	r2, #240	; 0xf0
 8000a12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2202      	movs	r2, #2
 8000a18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2203      	movs	r2, #3
 8000a24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	187a      	adds	r2, r7, r1
 8000a2e:	23a0      	movs	r3, #160	; 0xa0
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 f9db 	bl	8000df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b009      	add	sp, #36	; 0x24
 8000a40:	bd90      	pop	{r4, r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	40013000 	.word	0x40013000
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	240c      	movs	r4, #12
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	0018      	movs	r0, r3
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f002 fb8a 	bl	8003178 <memset>
  if(huart->Instance==USART1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a18      	ldr	r2, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x80>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12a      	bne.n	8000ac4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	01c9      	lsls	r1, r1, #7
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	430a      	orrs	r2, r1
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x84>)
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4013      	ands	r3, r2
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	22c0      	movs	r2, #192	; 0xc0
 8000a98:	00d2      	lsls	r2, r2, #3
 8000a9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	0021      	movs	r1, r4
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2212      	movs	r2, #18
 8000aa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2203      	movs	r2, #3
 8000aae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	187a      	adds	r2, r7, r1
 8000ab8:	23a0      	movs	r3, #160	; 0xa0
 8000aba:	05db      	lsls	r3, r3, #23
 8000abc:	0011      	movs	r1, r2
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 f996 	bl	8000df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b009      	add	sp, #36	; 0x24
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	40013800 	.word	0x40013800
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f886 	bl	8000c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490e      	ldr	r1, [pc, #56]	; (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0b      	ldr	r4, [pc, #44]	; (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b36:	f7ff ffe4 	bl	8000b02 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f002 faf9 	bl	8003130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3e:	f7ff fcad 	bl	800049c <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
   ldr   r0, =_estack
 8000b44:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b50:	0800321c 	.word	0x0800321c
  ldr r2, =_sbss
 8000b54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b58:	20000178 	.word	0x20000178

08000b5c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_COMP_IRQHandler>
	...

08000b60 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_Init+0x3c>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_Init+0x3c>)
 8000b72:	2140      	movs	r1, #64	; 0x40
 8000b74:	430a      	orrs	r2, r1
 8000b76:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 f811 	bl	8000ba0 <HAL_InitTick>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e001      	b.n	8000b8e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8a:	f7ff feab 	bl	80008e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_InitTick+0x5c>)
 8000baa:	681c      	ldr	r4, [r3, #0]
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_InitTick+0x60>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	23fa      	movs	r3, #250	; 0xfa
 8000bb4:	0098      	lsls	r0, r3, #2
 8000bb6:	f7ff faa7 	bl	8000108 <__udivsi3>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	0020      	movs	r0, r4
 8000bc0:	f7ff faa2 	bl	8000108 <__udivsi3>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f905 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e00f      	b.n	8000bf4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d80b      	bhi.n	8000bf2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	425b      	negs	r3, r3
 8000be0:	2200      	movs	r2, #0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 f8e2 	bl	8000dac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_InitTick+0x64>)
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bd90      	pop	{r4, r7, pc}
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000004 	.word	0x20000004

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	001a      	movs	r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x20>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	18d2      	adds	r2, r2, r3
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <HAL_IncTick+0x20>)
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000174 	.word	0x20000174

08000c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <HAL_GetTick+0x10>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	20000174 	.word	0x20000174

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff fff0 	bl	8000c2c <HAL_GetTick>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	001a      	movs	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	189b      	adds	r3, r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	f7ff ffe0 	bl	8000c2c <HAL_GetTick>
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b004      	add	sp, #16
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000008 	.word	0x20000008

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	0002      	movs	r2, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c9c:	d828      	bhi.n	8000cf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c9e:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <__NVIC_SetPriority+0xd4>)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	33c0      	adds	r3, #192	; 0xc0
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	589b      	ldr	r3, [r3, r2]
 8000cae:	1dfa      	adds	r2, r7, #7
 8000cb0:	7812      	ldrb	r2, [r2, #0]
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	00d2      	lsls	r2, r2, #3
 8000cba:	21ff      	movs	r1, #255	; 0xff
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	000a      	movs	r2, r1
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	22ff      	movs	r2, #255	; 0xff
 8000ccc:	401a      	ands	r2, r3
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	4003      	ands	r3, r0
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cdc:	481f      	ldr	r0, [pc, #124]	; (8000d5c <__NVIC_SetPriority+0xd4>)
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	33c0      	adds	r3, #192	; 0xc0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cee:	e031      	b.n	8000d54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <__NVIC_SetPriority+0xd8>)
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	3b08      	subs	r3, #8
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3306      	adds	r3, #6
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	3304      	adds	r3, #4
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1dfa      	adds	r2, r7, #7
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	0011      	movs	r1, r2
 8000d10:	2203      	movs	r2, #3
 8000d12:	400a      	ands	r2, r1
 8000d14:	00d2      	lsls	r2, r2, #3
 8000d16:	21ff      	movs	r1, #255	; 0xff
 8000d18:	4091      	lsls	r1, r2
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	019b      	lsls	r3, r3, #6
 8000d26:	22ff      	movs	r2, #255	; 0xff
 8000d28:	401a      	ands	r2, r3
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	2303      	movs	r3, #3
 8000d32:	4003      	ands	r3, r0
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d38:	4809      	ldr	r0, [pc, #36]	; (8000d60 <__NVIC_SetPriority+0xd8>)
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	001c      	movs	r4, r3
 8000d40:	230f      	movs	r3, #15
 8000d42:	4023      	ands	r3, r4
 8000d44:	3b08      	subs	r3, #8
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	3306      	adds	r3, #6
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	18c3      	adds	r3, r0, r3
 8000d50:	3304      	adds	r3, #4
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b003      	add	sp, #12
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	1e5a      	subs	r2, r3, #1
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	045b      	lsls	r3, r3, #17
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d301      	bcc.n	8000d7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e010      	b.n	8000d9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <SysTick_Config+0x44>)
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	3a01      	subs	r2, #1
 8000d82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d84:	2301      	movs	r3, #1
 8000d86:	425b      	negs	r3, r3
 8000d88:	2103      	movs	r1, #3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff ff7c 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x44>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x44>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	0018      	movs	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	210f      	movs	r1, #15
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	1c02      	adds	r2, r0, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff ff5d 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b004      	add	sp, #16
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff ffbf 	bl	8000d64 <SysTick_Config>
 8000de6:	0003      	movs	r3, r0
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e06:	e14f      	b.n	80010a8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d100      	bne.n	8000e20 <HAL_GPIO_Init+0x30>
 8000e1e:	e140      	b.n	80010a2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d00b      	beq.n	8000e40 <HAL_GPIO_Init+0x50>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e34:	2b11      	cmp	r3, #17
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b12      	cmp	r3, #18
 8000e3e:	d130      	bne.n	8000ea2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	409a      	lsls	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e76:	2201      	movs	r2, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0xf2>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	58d3      	ldr	r3, [r2, r3]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2107      	movs	r1, #7
 8000f0e:	400b      	ands	r3, r1
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	6939      	ldr	r1, [r7, #16]
 8000f28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2203      	movs	r2, #3
 8000f48:	401a      	ands	r2, r3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	055b      	lsls	r3, r3, #21
 8000f66:	4013      	ands	r3, r2
 8000f68:	d100      	bne.n	8000f6c <HAL_GPIO_Init+0x17c>
 8000f6a:	e09a      	b.n	80010a2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f70:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <HAL_GPIO_Init+0x2d0>)
 8000f72:	2101      	movs	r1, #1
 8000f74:	430a      	orrs	r2, r1
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f78:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_GPIO_Init+0x2d4>)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3302      	adds	r3, #2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	589b      	ldr	r3, [r3, r2]
 8000f84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	43da      	mvns	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	23a0      	movs	r3, #160	; 0xa0
 8000fa0:	05db      	lsls	r3, r3, #23
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x1ea>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a47      	ldr	r2, [pc, #284]	; (80010c8 <HAL_GPIO_Init+0x2d8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x1e6>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a46      	ldr	r2, [pc, #280]	; (80010cc <HAL_GPIO_Init+0x2dc>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x1e2>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a45      	ldr	r2, [pc, #276]	; (80010d0 <HAL_GPIO_Init+0x2e0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x1de>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <HAL_GPIO_Init+0x2e4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x1da>
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	e008      	b.n	8000fdc <HAL_GPIO_Init+0x1ec>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x1ec>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x1ec>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x1ec>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x1ec>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	2103      	movs	r1, #3
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fec:	4935      	ldr	r1, [pc, #212]	; (80010c4 <HAL_GPIO_Init+0x2d4>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffa:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	025b      	lsls	r3, r3, #9
 8001012:	4013      	ands	r3, r2
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	4013      	ands	r3, r2
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	035b      	lsls	r3, r3, #13
 8001066:	4013      	ands	r3, r2
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	039b      	lsls	r3, r3, #14
 8001090:	4013      	ands	r3, r2
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_GPIO_Init+0x2e8>)
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	40da      	lsrs	r2, r3
 80010b0:	1e13      	subs	r3, r2, #0
 80010b2:	d000      	beq.n	80010b6 <HAL_GPIO_Init+0x2c6>
 80010b4:	e6a8      	b.n	8000e08 <HAL_GPIO_Init+0x18>
  }
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b006      	add	sp, #24
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000
 80010c8:	50000400 	.word	0x50000400
 80010cc:	50000800 	.word	0x50000800
 80010d0:	50000c00 	.word	0x50000c00
 80010d4:	50001c00 	.word	0x50001c00
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	0008      	movs	r0, r1
 80010e6:	0011      	movs	r1, r2
 80010e8:	1cbb      	adds	r3, r7, #2
 80010ea:	1c02      	adds	r2, r0, #0
 80010ec:	801a      	strh	r2, [r3, #0]
 80010ee:	1c7b      	adds	r3, r7, #1
 80010f0:	1c0a      	adds	r2, r1, #0
 80010f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f4:	1c7b      	adds	r3, r7, #1
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010fc:	1cbb      	adds	r3, r7, #2
 80010fe:	881a      	ldrh	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001104:	e003      	b.n	800110e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001106:	1cbb      	adds	r3, r7, #2
 8001108:	881a      	ldrh	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e082      	b.n	8001230 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2241      	movs	r2, #65	; 0x41
 800112e:	5c9b      	ldrb	r3, [r3, r2]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d107      	bne.n	8001146 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2240      	movs	r2, #64	; 0x40
 800113a:	2100      	movs	r1, #0
 800113c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff fbe3 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2241      	movs	r2, #65	; 0x41
 800114a:	2124      	movs	r1, #36	; 0x24
 800114c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	438a      	bics	r2, r1
 800115c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4934      	ldr	r1, [pc, #208]	; (8001238 <HAL_I2C_Init+0x120>)
 8001168:	400a      	ands	r2, r1
 800116a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4931      	ldr	r1, [pc, #196]	; (800123c <HAL_I2C_Init+0x124>)
 8001178:	400a      	ands	r2, r1
 800117a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d108      	bne.n	8001196 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	0209      	lsls	r1, r1, #8
 8001190:	430a      	orrs	r2, r1
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	e007      	b.n	80011a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2184      	movs	r1, #132	; 0x84
 80011a0:	0209      	lsls	r1, r1, #8
 80011a2:	430a      	orrs	r2, r1
 80011a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d104      	bne.n	80011b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	491f      	ldr	r1, [pc, #124]	; (8001240 <HAL_I2C_Init+0x128>)
 80011c4:	430a      	orrs	r2, r1
 80011c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	491a      	ldr	r1, [pc, #104]	; (800123c <HAL_I2C_Init+0x124>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	0011      	movs	r1, r2
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	021a      	lsls	r2, r3, #8
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	430a      	orrs	r2, r1
 80011f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69d9      	ldr	r1, [r3, #28]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1a      	ldr	r2, [r3, #32]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2241      	movs	r2, #65	; 0x41
 800121c:	2120      	movs	r1, #32
 800121e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2242      	movs	r2, #66	; 0x42
 800122a:	2100      	movs	r1, #0
 800122c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}
 8001238:	f0ffffff 	.word	0xf0ffffff
 800123c:	ffff7fff 	.word	0xffff7fff
 8001240:	02008000 	.word	0x02008000

08001244 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2241      	movs	r2, #65	; 0x41
 8001252:	5c9b      	ldrb	r3, [r3, r2]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b20      	cmp	r3, #32
 8001258:	d138      	bne.n	80012cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2240      	movs	r2, #64	; 0x40
 800125e:	5c9b      	ldrb	r3, [r3, r2]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001264:	2302      	movs	r3, #2
 8001266:	e032      	b.n	80012ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2240      	movs	r2, #64	; 0x40
 800126c:	2101      	movs	r1, #1
 800126e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2241      	movs	r2, #65	; 0x41
 8001274:	2124      	movs	r1, #36	; 0x24
 8001276:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2101      	movs	r1, #1
 8001284:	438a      	bics	r2, r1
 8001286:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4911      	ldr	r1, [pc, #68]	; (80012d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001294:	400a      	ands	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2101      	movs	r1, #1
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2241      	movs	r2, #65	; 0x41
 80012bc:	2120      	movs	r1, #32
 80012be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2240      	movs	r2, #64	; 0x40
 80012c4:	2100      	movs	r1, #0
 80012c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e000      	b.n	80012ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012cc:	2302      	movs	r3, #2
  }
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	ffffefff 	.word	0xffffefff

080012dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2241      	movs	r2, #65	; 0x41
 80012ea:	5c9b      	ldrb	r3, [r3, r2]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b20      	cmp	r3, #32
 80012f0:	d139      	bne.n	8001366 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	5c9b      	ldrb	r3, [r3, r2]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e033      	b.n	8001368 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2240      	movs	r2, #64	; 0x40
 8001304:	2101      	movs	r1, #1
 8001306:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2241      	movs	r2, #65	; 0x41
 800130c:	2124      	movs	r1, #36	; 0x24
 800130e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2101      	movs	r1, #1
 800131c:	438a      	bics	r2, r1
 800131e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2241      	movs	r2, #65	; 0x41
 8001356:	2120      	movs	r1, #32
 8001358:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	2100      	movs	r1, #0
 8001360:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001366:	2302      	movs	r3, #2
  }
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b004      	add	sp, #16
 800136e:	bd80      	pop	{r7, pc}
 8001370:	fffff0ff 	.word	0xfffff0ff

08001374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	f000 fbaf 	bl	8001ae6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001388:	4bcf      	ldr	r3, [pc, #828]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	220c      	movs	r2, #12
 800138e:	4013      	ands	r3, r2
 8001390:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001392:	4bcd      	ldr	r3, [pc, #820]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	4013      	ands	r3, r2
 800139c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x36>
 80013a8:	e07e      	b.n	80014a8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d007      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d112      	bne.n	80013dc <HAL_RCC_OscConfig+0x68>
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	025b      	lsls	r3, r3, #9
 80013bc:	429a      	cmp	r2, r3
 80013be:	d10d      	bne.n	80013dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4bc1      	ldr	r3, [pc, #772]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x5a>
 80013cc:	e06b      	b.n	80014a6 <HAL_RCC_OscConfig+0x132>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d167      	bne.n	80014a6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f000 fb85 	bl	8001ae6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	025b      	lsls	r3, r3, #9
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d107      	bne.n	80013f8 <HAL_RCC_OscConfig+0x84>
 80013e8:	4bb7      	ldr	r3, [pc, #732]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4bb6      	ldr	r3, [pc, #728]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80013ee:	2180      	movs	r1, #128	; 0x80
 80013f0:	0249      	lsls	r1, r1, #9
 80013f2:	430a      	orrs	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e027      	b.n	8001448 <HAL_RCC_OscConfig+0xd4>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	23a0      	movs	r3, #160	; 0xa0
 80013fe:	02db      	lsls	r3, r3, #11
 8001400:	429a      	cmp	r2, r3
 8001402:	d10e      	bne.n	8001422 <HAL_RCC_OscConfig+0xae>
 8001404:	4bb0      	ldr	r3, [pc, #704]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4baf      	ldr	r3, [pc, #700]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	02c9      	lsls	r1, r1, #11
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	4bad      	ldr	r3, [pc, #692]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4bac      	ldr	r3, [pc, #688]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	0249      	lsls	r1, r1, #9
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e012      	b.n	8001448 <HAL_RCC_OscConfig+0xd4>
 8001422:	4ba9      	ldr	r3, [pc, #676]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4ba8      	ldr	r3, [pc, #672]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001428:	49a8      	ldr	r1, [pc, #672]	; (80016cc <HAL_RCC_OscConfig+0x358>)
 800142a:	400a      	ands	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	4ba6      	ldr	r3, [pc, #664]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4ba2      	ldr	r3, [pc, #648]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001442:	49a3      	ldr	r1, [pc, #652]	; (80016d0 <HAL_RCC_OscConfig+0x35c>)
 8001444:	400a      	ands	r2, r1
 8001446:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d015      	beq.n	800147c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fbec 	bl	8000c2c <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001458:	e009      	b.n	800146e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800145a:	f7ff fbe7 	bl	8000c2c <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b64      	cmp	r3, #100	; 0x64
 8001466:	d902      	bls.n	800146e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	f000 fb3c 	bl	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800146e:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	029b      	lsls	r3, r3, #10
 8001476:	4013      	ands	r3, r2
 8001478:	d0ef      	beq.n	800145a <HAL_RCC_OscConfig+0xe6>
 800147a:	e015      	b.n	80014a8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fbd6 	bl	8000c2c <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001486:	f7ff fbd1 	bl	8000c2c <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e326      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001498:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x112>
 80014a4:	e000      	b.n	80014a8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2202      	movs	r2, #2
 80014ae:	4013      	ands	r3, r2
 80014b0:	d100      	bne.n	80014b4 <HAL_RCC_OscConfig+0x140>
 80014b2:	e08b      	b.n	80015cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d13e      	bne.n	8001544 <HAL_RCC_OscConfig+0x1d0>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d13b      	bne.n	8001544 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014cc:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2204      	movs	r2, #4
 80014d2:	4013      	ands	r3, r2
 80014d4:	d004      	beq.n	80014e0 <HAL_RCC_OscConfig+0x16c>
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e302      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b79      	ldr	r3, [pc, #484]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a7b      	ldr	r2, [pc, #492]	; (80016d4 <HAL_RCC_OscConfig+0x360>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	021a      	lsls	r2, r3, #8
 80014f0:	4b75      	ldr	r3, [pc, #468]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014f6:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2209      	movs	r2, #9
 80014fc:	4393      	bics	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	4b71      	ldr	r3, [pc, #452]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001508:	f000 fc40 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 800150c:	0001      	movs	r1, r0
 800150e:	4b6e      	ldr	r3, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	220f      	movs	r2, #15
 8001516:	4013      	ands	r3, r2
 8001518:	4a6f      	ldr	r2, [pc, #444]	; (80016d8 <HAL_RCC_OscConfig+0x364>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	000a      	movs	r2, r1
 800151e:	40da      	lsrs	r2, r3
 8001520:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <HAL_RCC_OscConfig+0x368>)
 8001522:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001524:	4b6e      	ldr	r3, [pc, #440]	; (80016e0 <HAL_RCC_OscConfig+0x36c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2513      	movs	r5, #19
 800152a:	197c      	adds	r4, r7, r5
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff fb37 	bl	8000ba0 <HAL_InitTick>
 8001532:	0003      	movs	r3, r0
 8001534:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001536:	197b      	adds	r3, r7, r5
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d046      	beq.n	80015cc <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800153e:	197b      	adds	r3, r7, r5
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	e2d0      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d027      	beq.n	800159a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800154a:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2209      	movs	r2, #9
 8001550:	4393      	bics	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	4b5c      	ldr	r3, [pc, #368]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fb66 	bl	8000c2c <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fb61 	bl	8000c2c <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e2b6      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001578:	4b53      	ldr	r3, [pc, #332]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2204      	movs	r2, #4
 800157e:	4013      	ands	r3, r2
 8001580:	d0f1      	beq.n	8001566 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b51      	ldr	r3, [pc, #324]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a53      	ldr	r2, [pc, #332]	; (80016d4 <HAL_RCC_OscConfig+0x360>)
 8001588:	4013      	ands	r3, r2
 800158a:	0019      	movs	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	021a      	lsls	r2, r3, #8
 8001592:	4b4d      	ldr	r3, [pc, #308]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	e018      	b.n	80015cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159a:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b4a      	ldr	r3, [pc, #296]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80015a0:	2101      	movs	r1, #1
 80015a2:	438a      	bics	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff fb41 	bl	8000c2c <HAL_GetTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff fb3c 	bl	8000c2c <HAL_GetTick>
 80015b4:	0002      	movs	r2, r0
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e291      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2204      	movs	r2, #4
 80015c8:	4013      	ands	r3, r2
 80015ca:	d1f1      	bne.n	80015b0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2210      	movs	r2, #16
 80015d2:	4013      	ands	r3, r2
 80015d4:	d100      	bne.n	80015d8 <HAL_RCC_OscConfig+0x264>
 80015d6:	e0a1      	b.n	800171c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d140      	bne.n	8001660 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x282>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e277      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a3a      	ldr	r2, [pc, #232]	; (80016e4 <HAL_RCC_OscConfig+0x370>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	0a19      	lsrs	r1, r3, #8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	061a      	lsls	r2, r3, #24
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	0b5b      	lsrs	r3, r3, #13
 8001624:	3301      	adds	r3, #1
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	0212      	lsls	r2, r2, #8
 800162a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	210f      	movs	r1, #15
 8001634:	400b      	ands	r3, r1
 8001636:	4928      	ldr	r1, [pc, #160]	; (80016d8 <HAL_RCC_OscConfig+0x364>)
 8001638:	5ccb      	ldrb	r3, [r1, r3]
 800163a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x368>)
 800163e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_RCC_OscConfig+0x36c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2513      	movs	r5, #19
 8001646:	197c      	adds	r4, r7, r5
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff faa9 	bl	8000ba0 <HAL_InitTick>
 800164e:	0003      	movs	r3, r0
 8001650:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001652:	197b      	adds	r3, r7, r5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d060      	beq.n	800171c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800165a:	197b      	adds	r3, r7, r5
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	e242      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d03f      	beq.n	80016e8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0049      	lsls	r1, r1, #1
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fad9 	bl	8000c2c <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001680:	f7ff fad4 	bl	8000c2c <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e229      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <HAL_RCC_OscConfig+0x370>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	0a19      	lsrs	r1, r3, #8
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	061a      	lsls	r2, r3, #24
 80016c0:	4b01      	ldr	r3, [pc, #4]	; (80016c8 <HAL_RCC_OscConfig+0x354>)
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	e029      	b.n	800171c <HAL_RCC_OscConfig+0x3a8>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	fffeffff 	.word	0xfffeffff
 80016d0:	fffbffff 	.word	0xfffbffff
 80016d4:	ffffe0ff 	.word	0xffffe0ff
 80016d8:	080031a0 	.word	0x080031a0
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000004 	.word	0x20000004
 80016e4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016e8:	4bbd      	ldr	r3, [pc, #756]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4bbc      	ldr	r3, [pc, #752]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80016ee:	49bd      	ldr	r1, [pc, #756]	; (80019e4 <HAL_RCC_OscConfig+0x670>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fa9a 	bl	8000c2c <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016fe:	f7ff fa95 	bl	8000c2c <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1ea      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001710:	4bb3      	ldr	r3, [pc, #716]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4013      	ands	r3, r2
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2208      	movs	r2, #8
 8001722:	4013      	ands	r3, r2
 8001724:	d036      	beq.n	8001794 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d019      	beq.n	8001762 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172e:	4bac      	ldr	r3, [pc, #688]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001732:	4bab      	ldr	r3, [pc, #684]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001734:	2101      	movs	r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff fa77 	bl	8000c2c <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff fa72 	bl	8000c2c <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1c7      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001756:	4ba2      	ldr	r3, [pc, #648]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175a:	2202      	movs	r2, #2
 800175c:	4013      	ands	r3, r2
 800175e:	d0f1      	beq.n	8001744 <HAL_RCC_OscConfig+0x3d0>
 8001760:	e018      	b.n	8001794 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	4b9f      	ldr	r3, [pc, #636]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001766:	4b9e      	ldr	r3, [pc, #632]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001768:	2101      	movs	r1, #1
 800176a:	438a      	bics	r2, r1
 800176c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff fa5d 	bl	8000c2c <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff fa58 	bl	8000c2c <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1ad      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800178a:	4b95      	ldr	r3, [pc, #596]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 800178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d1f1      	bne.n	8001778 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2204      	movs	r2, #4
 800179a:	4013      	ands	r3, r2
 800179c:	d100      	bne.n	80017a0 <HAL_RCC_OscConfig+0x42c>
 800179e:	e0ae      	b.n	80018fe <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a0:	2027      	movs	r0, #39	; 0x27
 80017a2:	183b      	adds	r3, r7, r0
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a8:	4b8d      	ldr	r3, [pc, #564]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80017aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	055b      	lsls	r3, r3, #21
 80017b0:	4013      	ands	r3, r2
 80017b2:	d109      	bne.n	80017c8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	4b8a      	ldr	r3, [pc, #552]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80017b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b8:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0549      	lsls	r1, r1, #21
 80017be:	430a      	orrs	r2, r1
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017c2:	183b      	adds	r3, r7, r0
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	4b87      	ldr	r3, [pc, #540]	; (80019e8 <HAL_RCC_OscConfig+0x674>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	d11a      	bne.n	800180a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d4:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <HAL_RCC_OscConfig+0x674>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b83      	ldr	r3, [pc, #524]	; (80019e8 <HAL_RCC_OscConfig+0x674>)
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	0049      	lsls	r1, r1, #1
 80017de:	430a      	orrs	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e2:	f7ff fa23 	bl	8000c2c <HAL_GetTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ec:	f7ff fa1e 	bl	8000c2c <HAL_GetTick>
 80017f0:	0002      	movs	r2, r0
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e173      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x674>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4013      	ands	r3, r2
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	429a      	cmp	r2, r3
 8001814:	d107      	bne.n	8001826 <HAL_RCC_OscConfig+0x4b2>
 8001816:	4b72      	ldr	r3, [pc, #456]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800181a:	4b71      	ldr	r3, [pc, #452]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0049      	lsls	r1, r1, #1
 8001820:	430a      	orrs	r2, r1
 8001822:	651a      	str	r2, [r3, #80]	; 0x50
 8001824:	e031      	b.n	800188a <HAL_RCC_OscConfig+0x516>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x4d4>
 800182e:	4b6c      	ldr	r3, [pc, #432]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001832:	4b6b      	ldr	r3, [pc, #428]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001834:	496b      	ldr	r1, [pc, #428]	; (80019e4 <HAL_RCC_OscConfig+0x670>)
 8001836:	400a      	ands	r2, r1
 8001838:	651a      	str	r2, [r3, #80]	; 0x50
 800183a:	4b69      	ldr	r3, [pc, #420]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 800183c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800183e:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001840:	496a      	ldr	r1, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x678>)
 8001842:	400a      	ands	r2, r1
 8001844:	651a      	str	r2, [r3, #80]	; 0x50
 8001846:	e020      	b.n	800188a <HAL_RCC_OscConfig+0x516>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	23a0      	movs	r3, #160	; 0xa0
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	429a      	cmp	r2, r3
 8001852:	d10e      	bne.n	8001872 <HAL_RCC_OscConfig+0x4fe>
 8001854:	4b62      	ldr	r3, [pc, #392]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001856:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001858:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 800185a:	2180      	movs	r1, #128	; 0x80
 800185c:	00c9      	lsls	r1, r1, #3
 800185e:	430a      	orrs	r2, r1
 8001860:	651a      	str	r2, [r3, #80]	; 0x50
 8001862:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001866:	4b5e      	ldr	r3, [pc, #376]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0049      	lsls	r1, r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	651a      	str	r2, [r3, #80]	; 0x50
 8001870:	e00b      	b.n	800188a <HAL_RCC_OscConfig+0x516>
 8001872:	4b5b      	ldr	r3, [pc, #364]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001876:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001878:	495a      	ldr	r1, [pc, #360]	; (80019e4 <HAL_RCC_OscConfig+0x670>)
 800187a:	400a      	ands	r2, r1
 800187c:	651a      	str	r2, [r3, #80]	; 0x50
 800187e:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001882:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001884:	4959      	ldr	r1, [pc, #356]	; (80019ec <HAL_RCC_OscConfig+0x678>)
 8001886:	400a      	ands	r2, r1
 8001888:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d015      	beq.n	80018be <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff f9cb 	bl	8000c2c <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800189a:	e009      	b.n	80018b0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff f9c6 	bl	8000c2c <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_RCC_OscConfig+0x67c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e11a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018b0:	4b4b      	ldr	r3, [pc, #300]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80018b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d0ef      	beq.n	800189c <HAL_RCC_OscConfig+0x528>
 80018bc:	e014      	b.n	80018e8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff f9b5 	bl	8000c2c <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018c6:	e009      	b.n	80018dc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff f9b0 	bl	8000c2c <HAL_GetTick>
 80018cc:	0002      	movs	r2, r0
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	4a47      	ldr	r2, [pc, #284]	; (80019f0 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e104      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018dc:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80018de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	d1ef      	bne.n	80018c8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018e8:	2327      	movs	r3, #39	; 0x27
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d105      	bne.n	80018fe <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80018f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80018f8:	493e      	ldr	r1, [pc, #248]	; (80019f4 <HAL_RCC_OscConfig+0x680>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2220      	movs	r2, #32
 8001904:	4013      	ands	r3, r2
 8001906:	d049      	beq.n	800199c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d026      	beq.n	800195e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001910:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001916:	2101      	movs	r1, #1
 8001918:	430a      	orrs	r2, r1
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 800191e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001920:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001922:	2101      	movs	r1, #1
 8001924:	430a      	orrs	r2, r1
 8001926:	635a      	str	r2, [r3, #52]	; 0x34
 8001928:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x684>)
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <HAL_RCC_OscConfig+0x684>)
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0189      	lsls	r1, r1, #6
 8001932:	430a      	orrs	r2, r1
 8001934:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f979 	bl	8000c2c <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001940:	f7ff f974 	bl	8000c2c <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0c9      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	d0f1      	beq.n	8001940 <HAL_RCC_OscConfig+0x5cc>
 800195c:	e01e      	b.n	800199c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001964:	2101      	movs	r1, #1
 8001966:	438a      	bics	r2, r1
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_RCC_OscConfig+0x684>)
 800196c:	6a1a      	ldr	r2, [r3, #32]
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_OscConfig+0x684>)
 8001970:	4922      	ldr	r1, [pc, #136]	; (80019fc <HAL_RCC_OscConfig+0x688>)
 8001972:	400a      	ands	r2, r1
 8001974:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff f959 	bl	8000c2c <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001980:	f7ff f954 	bl	8000c2c <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0a9      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d1f1      	bne.n	8001980 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x632>
 80019a4:	e09e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d100      	bne.n	80019ae <HAL_RCC_OscConfig+0x63a>
 80019ac:	e077      	b.n	8001a9e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d158      	bne.n	8001a68 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_OscConfig+0x66c>)
 80019bc:	4910      	ldr	r1, [pc, #64]	; (8001a00 <HAL_RCC_OscConfig+0x68c>)
 80019be:	400a      	ands	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff f933 	bl	8000c2c <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019ca:	e01b      	b.n	8001a04 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f92e 	bl	8000c2c <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d914      	bls.n	8001a04 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e083      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	40021000 	.word	0x40021000
 80019e4:	fffffeff 	.word	0xfffffeff
 80019e8:	40007000 	.word	0x40007000
 80019ec:	fffffbff 	.word	0xfffffbff
 80019f0:	00001388 	.word	0x00001388
 80019f4:	efffffff 	.word	0xefffffff
 80019f8:	40010000 	.word	0x40010000
 80019fc:	ffffdfff 	.word	0xffffdfff
 8001a00:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a04:	4b3a      	ldr	r3, [pc, #232]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	049b      	lsls	r3, r3, #18
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d1dd      	bne.n	80019cc <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a10:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4a37      	ldr	r2, [pc, #220]	; (8001af4 <HAL_RCC_OscConfig+0x780>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	0449      	lsls	r1, r1, #17
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f8f5 	bl	8000c2c <HAL_GetTick>
 8001a42:	0003      	movs	r3, r0
 8001a44:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f8f0 	bl	8000c2c <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e045      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a5a:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	049b      	lsls	r3, r3, #18
 8001a62:	4013      	ands	r3, r2
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x6d4>
 8001a66:	e03d      	b.n	8001ae4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a6e:	4922      	ldr	r1, [pc, #136]	; (8001af8 <HAL_RCC_OscConfig+0x784>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f8da 	bl	8000c2c <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff f8d5 	bl	8000c2c <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e02a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	049b      	lsls	r3, r3, #18
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x70a>
 8001a9c:	e022      	b.n	8001ae4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e01d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	025b      	lsls	r3, r3, #9
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d10f      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	23f0      	movs	r3, #240	; 0xf0
 8001ac4:	039b      	lsls	r3, r3, #14
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	23c0      	movs	r3, #192	; 0xc0
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b00a      	add	sp, #40	; 0x28
 8001aec:	bdb0      	pop	{r4, r5, r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	40021000 	.word	0x40021000
 8001af4:	ff02ffff 	.word	0xff02ffff
 8001af8:	feffffff 	.word	0xfeffffff

08001afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b5b0      	push	{r4, r5, r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e128      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b96      	ldr	r3, [pc, #600]	; (8001d6c <HAL_RCC_ClockConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2201      	movs	r2, #1
 8001b16:	4013      	ands	r3, r2
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d91e      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b93      	ldr	r3, [pc, #588]	; (8001d6c <HAL_RCC_ClockConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2201      	movs	r2, #1
 8001b24:	4393      	bics	r3, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	4b90      	ldr	r3, [pc, #576]	; (8001d6c <HAL_RCC_ClockConfig+0x270>)
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b30:	f7ff f87c 	bl	8000c2c <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b38:	e009      	b.n	8001b4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3a:	f7ff f877 	bl	8000c2c <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	4a8a      	ldr	r2, [pc, #552]	; (8001d70 <HAL_RCC_ClockConfig+0x274>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e109      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b87      	ldr	r3, [pc, #540]	; (8001d6c <HAL_RCC_ClockConfig+0x270>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	4013      	ands	r3, r2
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1ee      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2202      	movs	r2, #2
 8001b62:	4013      	ands	r3, r2
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b66:	4b83      	ldr	r3, [pc, #524]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	22f0      	movs	r2, #240	; 0xf0
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b7f      	ldr	r3, [pc, #508]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4013      	ands	r3, r2
 8001b82:	d100      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x8a>
 8001b84:	e089      	b.n	8001c9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b8e:	4b79      	ldr	r3, [pc, #484]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	029b      	lsls	r3, r3, #10
 8001b96:	4013      	ands	r3, r2
 8001b98:	d120      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0e1      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	049b      	lsls	r3, r3, #18
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d114      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0d5      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d106      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d109      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0ca      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bcc:	4b69      	ldr	r3, [pc, #420]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0c2      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bdc:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2203      	movs	r2, #3
 8001be2:	4393      	bics	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf0:	f7ff f81c 	bl	8000c2c <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d111      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c00:	e009      	b.n	8001c16 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c02:	f7ff f813 	bl	8000c2c <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_RCC_ClockConfig+0x274>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0a5      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c16:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d1ef      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x106>
 8001c22:	e03a      	b.n	8001c9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d111      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2c:	e009      	b.n	8001c42 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2e:	f7fe fffd 	bl	8000c2c <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	4a4d      	ldr	r2, [pc, #308]	; (8001d70 <HAL_RCC_ClockConfig+0x274>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e08f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	220c      	movs	r2, #12
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d1ef      	bne.n	8001c2e <HAL_RCC_ClockConfig+0x132>
 8001c4e:	e024      	b.n	8001c9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d11b      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5a:	f7fe ffe7 	bl	8000c2c <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4a42      	ldr	r2, [pc, #264]	; (8001d70 <HAL_RCC_ClockConfig+0x274>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e079      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	220c      	movs	r2, #12
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d1ef      	bne.n	8001c5a <HAL_RCC_ClockConfig+0x15e>
 8001c7a:	e00e      	b.n	8001c9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7fe ffd6 	bl	8000c2c <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	4a3a      	ldr	r2, [pc, #232]	; (8001d70 <HAL_RCC_ClockConfig+0x274>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e068      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c90:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	220c      	movs	r2, #12
 8001c96:	4013      	ands	r3, r2
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9a:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_RCC_ClockConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d21e      	bcs.n	8001ce6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_RCC_ClockConfig+0x270>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4393      	bics	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_RCC_ClockConfig+0x270>)
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cba:	f7fe ffb7 	bl	8000c2c <HAL_GetTick>
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	e009      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc4:	f7fe ffb2 	bl	8000c2c <HAL_GetTick>
 8001cc8:	0002      	movs	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	4a28      	ldr	r2, [pc, #160]	; (8001d70 <HAL_RCC_ClockConfig+0x274>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e044      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_RCC_ClockConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	4013      	ands	r3, r2
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d1ee      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2204      	movs	r2, #4
 8001cec:	4013      	ands	r3, r2
 8001cee:	d009      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x27c>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001d00:	430a      	orrs	r2, r1
 8001d02:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2208      	movs	r2, #8
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d00a      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	4a1a      	ldr	r2, [pc, #104]	; (8001d7c <HAL_RCC_ClockConfig+0x280>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	00da      	lsls	r2, r3, #3
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d24:	f000 f832 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d28:	0001      	movs	r1, r0
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_RCC_ClockConfig+0x278>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	220f      	movs	r2, #15
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <HAL_RCC_ClockConfig+0x284>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	000a      	movs	r2, r1
 8001d3a:	40da      	lsrs	r2, r3
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_RCC_ClockConfig+0x288>)
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_RCC_ClockConfig+0x28c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	250b      	movs	r5, #11
 8001d46:	197c      	adds	r4, r7, r5
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7fe ff29 	bl	8000ba0 <HAL_InitTick>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d52:	197b      	adds	r3, r7, r5
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d5a:	197b      	adds	r3, r7, r5
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	00001388 	.word	0x00001388
 8001d74:	40021000 	.word	0x40021000
 8001d78:	fffff8ff 	.word	0xfffff8ff
 8001d7c:	ffffc7ff 	.word	0xffffc7ff
 8001d80:	080031a0 	.word	0x080031a0
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b08e      	sub	sp, #56	; 0x38
 8001d90:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d92:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d014      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001da2:	d900      	bls.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001da4:	e07b      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x112>
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d002      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x24>
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d00b      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dae:	e076      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2210      	movs	r2, #16
 8001db6:	4013      	ands	r3, r2
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001dbe:	e07c      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001dc0:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x140>)
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc4:	e079      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc6:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dca:	e076      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	0c9a      	lsrs	r2, r3, #18
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	0d9a      	lsrs	r2, r3, #22
 8001dde:	2303      	movs	r3, #3
 8001de0:	4013      	ands	r3, r2
 8001de2:	3301      	adds	r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	025b      	lsls	r3, r3, #9
 8001dee:	4013      	ands	r3, r2
 8001df0:	d01a      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	69b8      	ldr	r0, [r7, #24]
 8001e00:	69f9      	ldr	r1, [r7, #28]
 8001e02:	f7fe fa2d 	bl	8000260 <__aeabi_lmul>
 8001e06:	0002      	movs	r2, r0
 8001e08:	000b      	movs	r3, r1
 8001e0a:	0010      	movs	r0, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f7fe fa01 	bl	8000220 <__aeabi_uldivmod>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	000b      	movs	r3, r1
 8001e22:	0013      	movs	r3, r2
 8001e24:	637b      	str	r3, [r7, #52]	; 0x34
 8001e26:	e037      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e28:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d01a      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	68b8      	ldr	r0, [r7, #8]
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	f7fe fa0d 	bl	8000260 <__aeabi_lmul>
 8001e46:	0002      	movs	r2, r0
 8001e48:	000b      	movs	r3, r1
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f7fe f9e1 	bl	8000220 <__aeabi_uldivmod>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	000b      	movs	r3, r1
 8001e62:	0013      	movs	r3, r2
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
 8001e66:	e017      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	0019      	movs	r1, r3
 8001e70:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x140>)
 8001e72:	2300      	movs	r3, #0
 8001e74:	f7fe f9f4 	bl	8000260 <__aeabi_lmul>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	000b      	movs	r3, r1
 8001e7c:	0010      	movs	r0, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	001c      	movs	r4, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	001d      	movs	r5, r3
 8001e88:	0022      	movs	r2, r4
 8001e8a:	002b      	movs	r3, r5
 8001e8c:	f7fe f9c8 	bl	8000220 <__aeabi_uldivmod>
 8001e90:	0002      	movs	r2, r0
 8001e92:	000b      	movs	r3, r1
 8001e94:	0013      	movs	r3, r2
 8001e96:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e9c:	e00d      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	0b5b      	lsrs	r3, r3, #13
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	3301      	adds	r3, #1
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	0212      	lsls	r2, r2, #8
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b00e      	add	sp, #56	; 0x38
 8001ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	003d0900 	.word	0x003d0900
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	007a1200 	.word	0x007a1200
 8001ed4:	080031b8 	.word	0x080031b8

08001ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef0:	f7ff fff2 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001ef4:	0001      	movs	r1, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	2207      	movs	r2, #7
 8001efe:	4013      	ands	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	40d9      	lsrs	r1, r3
 8001f06:	000b      	movs	r3, r1
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	40021000 	.word	0x40021000
 8001f14:	080031b0 	.word	0x080031b0

08001f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f1c:	f7ff ffdc 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001f20:	0001      	movs	r1, r0
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	0adb      	lsrs	r3, r3, #11
 8001f28:	2207      	movs	r2, #7
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	40d9      	lsrs	r1, r3
 8001f32:	000b      	movs	r3, r1
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	080031b0 	.word	0x080031b0

08001f44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f4c:	2017      	movs	r0, #23
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d100      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001f5e:	e0c2      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f60:	4b90      	ldr	r3, [pc, #576]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	055b      	lsls	r3, r3, #21
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d109      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	4b8d      	ldr	r3, [pc, #564]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f70:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	0549      	lsls	r1, r1, #21
 8001f76:	430a      	orrs	r2, r1
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f7a:	183b      	adds	r3, r7, r0
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d11a      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8c:	4b86      	ldr	r3, [pc, #536]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	0049      	lsls	r1, r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe fe47 	bl	8000c2c <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa4:	f7fe fe42 	bl	8000c2c <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0f2      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b7c      	ldr	r3, [pc, #496]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fc2:	4b78      	ldr	r3, [pc, #480]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	23c0      	movs	r3, #192	; 0xc0
 8001fc8:	039b      	lsls	r3, r3, #14
 8001fca:	4013      	ands	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	039b      	lsls	r3, r3, #14
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d013      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	23c0      	movs	r3, #192	; 0xc0
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	23c0      	movs	r3, #192	; 0xc0
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10a      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ff0:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	029b      	lsls	r3, r3, #10
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d101      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e0ca      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200a:	23c0      	movs	r3, #192	; 0xc0
 800200c:	029b      	lsls	r3, r3, #10
 800200e:	4013      	ands	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03b      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	23c0      	movs	r3, #192	; 0xc0
 800201e:	029b      	lsls	r3, r3, #10
 8002020:	4013      	ands	r3, r2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	d033      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2220      	movs	r2, #32
 800202e:	4013      	ands	r3, r2
 8002030:	d02e      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002032:	4b5c      	ldr	r3, [pc, #368]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002036:	4a5d      	ldr	r2, [pc, #372]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002040:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0309      	lsls	r1, r1, #12
 8002046:	430a      	orrs	r2, r1
 8002048:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800204a:	4b56      	ldr	r3, [pc, #344]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800204e:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002050:	4957      	ldr	r1, [pc, #348]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002052:	400a      	ands	r2, r1
 8002054:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4013      	ands	r3, r2
 8002064:	d014      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe fde1 	bl	8000c2c <HAL_GetTick>
 800206a:	0003      	movs	r3, r0
 800206c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800206e:	e009      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7fe fddc 	bl	8000c2c <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	4a4e      	ldr	r2, [pc, #312]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e08b      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d0ef      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	23c0      	movs	r3, #192	; 0xc0
 8002096:	029b      	lsls	r3, r3, #10
 8002098:	401a      	ands	r2, r3
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	029b      	lsls	r3, r3, #10
 800209e:	429a      	cmp	r2, r3
 80020a0:	d10c      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80020a2:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a44      	ldr	r2, [pc, #272]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	23c0      	movs	r3, #192	; 0xc0
 80020b2:	039b      	lsls	r3, r3, #14
 80020b4:	401a      	ands	r2, r3
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020be:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	23c0      	movs	r3, #192	; 0xc0
 80020c6:	029b      	lsls	r3, r3, #10
 80020c8:	401a      	ands	r2, r3
 80020ca:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020d0:	2317      	movs	r3, #23
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020da:	4b32      	ldr	r3, [pc, #200]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e0:	4936      	ldr	r1, [pc, #216]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80020e2:	400a      	ands	r2, r1
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4013      	ands	r3, r2
 80020ee:	d009      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	2203      	movs	r2, #3
 80020f6:	4393      	bics	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002100:	430a      	orrs	r2, r1
 8002102:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2202      	movs	r2, #2
 800210a:	4013      	ands	r3, r2
 800210c:	d009      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	220c      	movs	r2, #12
 8002114:	4393      	bics	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	430a      	orrs	r2, r1
 8002120:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002130:	4a23      	ldr	r2, [pc, #140]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	430a      	orrs	r2, r1
 800213e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2208      	movs	r2, #8
 8002146:	4013      	ands	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695a      	ldr	r2, [r3, #20]
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215a:	430a      	orrs	r2, r1
 800215c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	4013      	ands	r3, r2
 8002166:	d009      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800216e:	4013      	ands	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	430a      	orrs	r2, r1
 800217a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	4013      	ands	r3, r2
 8002184:	d009      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800218c:	4013      	ands	r3, r2
 800218e:	0019      	movs	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699a      	ldr	r2, [r3, #24]
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	430a      	orrs	r2, r1
 8002198:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b006      	add	sp, #24
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	fffcffff 	.word	0xfffcffff
 80021b0:	fff7ffff 	.word	0xfff7ffff
 80021b4:	00001388 	.word	0x00001388
 80021b8:	ffcfffff 	.word	0xffcfffff
 80021bc:	efffffff 	.word	0xefffffff
 80021c0:	fffff3ff 	.word	0xfffff3ff
 80021c4:	ffffcfff 	.word	0xffffcfff
 80021c8:	fbffffff 	.word	0xfbffffff
 80021cc:	fff3ffff 	.word	0xfff3ffff

080021d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e08e      	b.n	8002300 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2221      	movs	r2, #33	; 0x21
 80021e6:	5c9b      	ldrb	r3, [r3, r2]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d107      	bne.n	80021fe <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2220      	movs	r2, #32
 80021f2:	2100      	movs	r1, #0
 80021f4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7fe fbcb 	bl	8000994 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2221      	movs	r2, #33	; 0x21
 8002202:	2102      	movs	r1, #2
 8002204:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	22ca      	movs	r2, #202	; 0xca
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2253      	movs	r2, #83	; 0x53
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 fa10 	bl	800263e <RTC_EnterInitMode>
 800221e:	1e03      	subs	r3, r0, #0
 8002220:	d009      	beq.n	8002236 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22ff      	movs	r2, #255	; 0xff
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2221      	movs	r2, #33	; 0x21
 800222e:	2104      	movs	r1, #4
 8002230:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e064      	b.n	8002300 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4931      	ldr	r1, [pc, #196]	; (8002308 <HAL_RTC_Init+0x138>)
 8002242:	400a      	ands	r2, r1
 8002244:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68d2      	ldr	r2, [r2, #12]
 800226c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6919      	ldr	r1, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	041a      	lsls	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	438a      	bics	r2, r1
 8002290:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2103      	movs	r1, #3
 800229e:	438a      	bics	r2, r1
 80022a0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2220      	movs	r2, #32
 80022c2:	4013      	ands	r3, r2
 80022c4:	d113      	bne.n	80022ee <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0018      	movs	r0, r3
 80022ca:	f000 f991 	bl	80025f0 <HAL_RTC_WaitForSynchro>
 80022ce:	1e03      	subs	r3, r0, #0
 80022d0:	d00d      	beq.n	80022ee <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2221      	movs	r2, #33	; 0x21
 80022de:	2104      	movs	r1, #4
 80022e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	2100      	movs	r1, #0
 80022e8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e008      	b.n	8002300 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	22ff      	movs	r2, #255	; 0xff
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2221      	movs	r2, #33	; 0x21
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022fe:	2300      	movs	r3, #0
  }
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}
 8002308:	ff8fffbf 	.word	0xff8fffbf

0800230c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	5c9b      	ldrb	r3, [r3, r2]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_RTC_SetTime+0x1a>
 8002322:	2302      	movs	r3, #2
 8002324:	e0ad      	b.n	8002482 <HAL_RTC_SetTime+0x176>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2221      	movs	r2, #33	; 0x21
 8002332:	2102      	movs	r1, #2
 8002334:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d125      	bne.n	8002388 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	4013      	ands	r3, r2
 8002346:	d102      	bne.n	800234e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	0018      	movs	r0, r3
 8002354:	f000 f99d 	bl	8002692 <RTC_ByteToBcd2>
 8002358:	0003      	movs	r3, r0
 800235a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	785b      	ldrb	r3, [r3, #1]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 f996 	bl	8002692 <RTC_ByteToBcd2>
 8002366:	0003      	movs	r3, r0
 8002368:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800236a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	789b      	ldrb	r3, [r3, #2]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f98e 	bl	8002692 <RTC_ByteToBcd2>
 8002376:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002378:	0022      	movs	r2, r4
 800237a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	78db      	ldrb	r3, [r3, #3]
 8002380:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e017      	b.n	80023b8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2240      	movs	r2, #64	; 0x40
 8002390:	4013      	ands	r3, r2
 8002392:	d102      	bne.n	800239a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2200      	movs	r2, #0
 8002398:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	785b      	ldrb	r3, [r3, #1]
 80023a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80023a6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80023ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	78db      	ldrb	r3, [r3, #3]
 80023b2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80023b4:	4313      	orrs	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	22ca      	movs	r2, #202	; 0xca
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2253      	movs	r2, #83	; 0x53
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 f937 	bl	800263e <RTC_EnterInitMode>
 80023d0:	1e03      	subs	r3, r0, #0
 80023d2:	d00d      	beq.n	80023f0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2221      	movs	r2, #33	; 0x21
 80023e0:	2104      	movs	r1, #4
 80023e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	2100      	movs	r1, #0
 80023ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e048      	b.n	8002482 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4925      	ldr	r1, [pc, #148]	; (800248c <HAL_RTC_SetTime+0x180>)
 80023f8:	400a      	ands	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4922      	ldr	r1, [pc, #136]	; (8002490 <HAL_RTC_SetTime+0x184>)
 8002408:	400a      	ands	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	431a      	orrs	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	438a      	bics	r2, r1
 8002432:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2220      	movs	r2, #32
 800243c:	4013      	ands	r3, r2
 800243e:	d113      	bne.n	8002468 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	0018      	movs	r0, r3
 8002444:	f000 f8d4 	bl	80025f0 <HAL_RTC_WaitForSynchro>
 8002448:	1e03      	subs	r3, r0, #0
 800244a:	d00d      	beq.n	8002468 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2221      	movs	r2, #33	; 0x21
 8002458:	2104      	movs	r1, #4
 800245a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	2100      	movs	r1, #0
 8002462:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e00c      	b.n	8002482 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	22ff      	movs	r2, #255	; 0xff
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2221      	movs	r2, #33	; 0x21
 8002474:	2101      	movs	r1, #1
 8002476:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	2100      	movs	r1, #0
 800247e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
  }
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b007      	add	sp, #28
 8002488:	bd90      	pop	{r4, r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	007f7f7f 	.word	0x007f7f7f
 8002490:	fffbffff 	.word	0xfffbffff

08002494 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	5c9b      	ldrb	r3, [r3, r2]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_RTC_SetDate+0x1a>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e099      	b.n	80025e2 <HAL_RTC_SetDate+0x14e>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2220      	movs	r2, #32
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2221      	movs	r2, #33	; 0x21
 80024ba:	2102      	movs	r1, #2
 80024bc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10e      	bne.n	80024e2 <HAL_RTC_SetDate+0x4e>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	001a      	movs	r2, r3
 80024ca:	2310      	movs	r3, #16
 80024cc:	4013      	ands	r3, r2
 80024ce:	d008      	beq.n	80024e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	2210      	movs	r2, #16
 80024d6:	4393      	bics	r3, r2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	330a      	adds	r3, #10
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d11c      	bne.n	8002522 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	78db      	ldrb	r3, [r3, #3]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f000 f8d0 	bl	8002692 <RTC_ByteToBcd2>
 80024f2:	0003      	movs	r3, r0
 80024f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	0018      	movs	r0, r3
 80024fc:	f000 f8c9 	bl	8002692 <RTC_ByteToBcd2>
 8002500:	0003      	movs	r3, r0
 8002502:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002504:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	789b      	ldrb	r3, [r3, #2]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f8c1 	bl	8002692 <RTC_ByteToBcd2>
 8002510:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002512:	0022      	movs	r2, r4
 8002514:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e00e      	b.n	8002540 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	78db      	ldrb	r3, [r3, #3]
 8002526:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800252e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002534:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	22ca      	movs	r2, #202	; 0xca
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2253      	movs	r2, #83	; 0x53
 800254e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 f873 	bl	800263e <RTC_EnterInitMode>
 8002558:	1e03      	subs	r3, r0, #0
 800255a:	d00d      	beq.n	8002578 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	22ff      	movs	r2, #255	; 0xff
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2221      	movs	r2, #33	; 0x21
 8002568:	2104      	movs	r1, #4
 800256a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	2100      	movs	r1, #0
 8002572:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e034      	b.n	80025e2 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	491b      	ldr	r1, [pc, #108]	; (80025ec <HAL_RTC_SetDate+0x158>)
 8002580:	400a      	ands	r2, r1
 8002582:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	438a      	bics	r2, r1
 8002592:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2220      	movs	r2, #32
 800259c:	4013      	ands	r3, r2
 800259e:	d113      	bne.n	80025c8 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f824 	bl	80025f0 <HAL_RTC_WaitForSynchro>
 80025a8:	1e03      	subs	r3, r0, #0
 80025aa:	d00d      	beq.n	80025c8 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	22ff      	movs	r2, #255	; 0xff
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2221      	movs	r2, #33	; 0x21
 80025b8:	2104      	movs	r1, #4
 80025ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	2100      	movs	r1, #0
 80025c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e00c      	b.n	80025e2 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	22ff      	movs	r2, #255	; 0xff
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2221      	movs	r2, #33	; 0x21
 80025d4:	2101      	movs	r1, #1
 80025d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	2100      	movs	r1, #0
 80025de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
  }
}
 80025e2:	0018      	movs	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b007      	add	sp, #28
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	00ffff3f 	.word	0x00ffff3f

080025f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	21a0      	movs	r1, #160	; 0xa0
 8002604:	438a      	bics	r2, r1
 8002606:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002608:	f7fe fb10 	bl	8000c2c <HAL_GetTick>
 800260c:	0003      	movs	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002610:	e00a      	b.n	8002628 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002612:	f7fe fb0b 	bl	8000c2c <HAL_GetTick>
 8002616:	0002      	movs	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad2      	subs	r2, r2, r3
 800261c:	23fa      	movs	r3, #250	; 0xfa
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	429a      	cmp	r2, r3
 8002622:	d901      	bls.n	8002628 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e006      	b.n	8002636 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	4013      	ands	r3, r2
 8002632:	d0ee      	beq.n	8002612 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bd80      	pop	{r7, pc}

0800263e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	4013      	ands	r3, r2
 8002650:	d11a      	bne.n	8002688 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	4252      	negs	r2, r2
 800265a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800265c:	f7fe fae6 	bl	8000c2c <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002664:	e00a      	b.n	800267c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002666:	f7fe fae1 	bl	8000c2c <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad2      	subs	r2, r2, r3
 8002670:	23fa      	movs	r3, #250	; 0xfa
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	429a      	cmp	r2, r3
 8002676:	d901      	bls.n	800267c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e006      	b.n	800268a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	4013      	ands	r3, r2
 8002686:	d0ee      	beq.n	8002666 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b004      	add	sp, #16
 8002690:	bd80      	pop	{r7, pc}

08002692 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	0002      	movs	r2, r0
 800269a:	1dfb      	adds	r3, r7, #7
 800269c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80026a2:	230b      	movs	r3, #11
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	1dfa      	adds	r2, r7, #7
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80026ac:	e008      	b.n	80026c0 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3301      	adds	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80026b4:	220b      	movs	r2, #11
 80026b6:	18bb      	adds	r3, r7, r2
 80026b8:	18ba      	adds	r2, r7, r2
 80026ba:	7812      	ldrb	r2, [r2, #0]
 80026bc:	3a0a      	subs	r2, #10
 80026be:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80026c0:	210b      	movs	r1, #11
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b09      	cmp	r3, #9
 80026c8:	d8f1      	bhi.n	80026ae <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	187b      	adds	r3, r7, r1
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b2db      	uxtb	r3, r3
}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b004      	add	sp, #16
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e083      	b.n	80027fe <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	2382      	movs	r3, #130	; 0x82
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	429a      	cmp	r2, r3
 8002708:	d009      	beq.n	800271e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	61da      	str	r2, [r3, #28]
 8002710:	e005      	b.n	800271e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2251      	movs	r2, #81	; 0x51
 8002728:	5c9b      	ldrb	r3, [r3, r2]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2250      	movs	r2, #80	; 0x50
 8002734:	2100      	movs	r1, #0
 8002736:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f7fe f942 	bl	80009c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2251      	movs	r2, #81	; 0x51
 8002744:	2102      	movs	r1, #2
 8002746:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2140      	movs	r1, #64	; 0x40
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	2382      	movs	r3, #130	; 0x82
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	401a      	ands	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	2384      	movs	r3, #132	; 0x84
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	400b      	ands	r3, r1
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68d9      	ldr	r1, [r3, #12]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	400b      	ands	r3, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2102      	movs	r1, #2
 8002780:	400b      	ands	r3, r1
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	2101      	movs	r1, #1
 800278a:	400b      	ands	r3, r1
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6999      	ldr	r1, [r3, #24]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	400b      	ands	r3, r1
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	2138      	movs	r1, #56	; 0x38
 80027a0:	400b      	ands	r3, r1
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	400b      	ands	r3, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	0011      	movs	r1, r2
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	019b      	lsls	r3, r3, #6
 80027b8:	401a      	ands	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	0c1b      	lsrs	r3, r3, #16
 80027c8:	2204      	movs	r2, #4
 80027ca:	4013      	ands	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2210      	movs	r2, #16
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69da      	ldr	r2, [r3, #28]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4907      	ldr	r1, [pc, #28]	; (8002808 <HAL_SPI_Init+0x124>)
 80027ea:	400a      	ands	r2, r1
 80027ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2251      	movs	r2, #81	; 0x51
 80027f8:	2101      	movs	r1, #1
 80027fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	fffff7ff 	.word	0xfffff7ff

0800280c <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	230b      	movs	r3, #11
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	1c0a      	adds	r2, r1, #0
 800281c:	701a      	strb	r2, [r3, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_MultiProcessor_Init+0x1c>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e061      	b.n	80028ec <HAL_MultiProcessor_Init+0xe0>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_MultiProcessor_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2274      	movs	r2, #116	; 0x74
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	0018      	movs	r0, r3
 800283c:	f7fe f906 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	438a      	bics	r2, r1
 8002854:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	0018      	movs	r0, r3
 800285a:	f000 f84f 	bl	80028fc <UART_SetConfig>
 800285e:	0003      	movs	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_MultiProcessor_Init+0x5c>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e041      	b.n	80028ec <HAL_MultiProcessor_Init+0xe0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_MultiProcessor_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fae2 	bl	8002e3c <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	491c      	ldr	r1, [pc, #112]	; (80028f4 <HAL_MultiProcessor_Init+0xe8>)
 8002884:	400a      	ands	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	212a      	movs	r1, #42	; 0x2a
 8002894:	438a      	bics	r2, r1
 8002896:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	429a      	cmp	r2, r3
 80028a0:	d10c      	bne.n	80028bc <HAL_MultiProcessor_Init+0xb0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	021b      	lsls	r3, r3, #8
 80028aa:	0a19      	lsrs	r1, r3, #8
 80028ac:	230b      	movs	r3, #11
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	061a      	lsls	r2, r3, #24
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <HAL_MultiProcessor_Init+0xec>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	430a      	orrs	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f000 fb5d 	bl	8002fa4 <UART_CheckIdleState>
 80028ea:	0003      	movs	r3, r0
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b004      	add	sp, #16
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	ffffb7ff 	.word	0xffffb7ff
 80028f8:	fffff7ff 	.word	0xfffff7ff

080028fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028fc:	b5b0      	push	{r4, r5, r7, lr}
 80028fe:	b08e      	sub	sp, #56	; 0x38
 8002900:	af00      	add	r7, sp, #0
 8002902:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002904:	231a      	movs	r3, #26
 8002906:	2218      	movs	r2, #24
 8002908:	4694      	mov	ip, r2
 800290a:	44bc      	add	ip, r7
 800290c:	4463      	add	r3, ip
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	431a      	orrs	r2, r3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	431a      	orrs	r2, r3
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	4313      	orrs	r3, r2
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4ac1      	ldr	r2, [pc, #772]	; (8002c38 <UART_SetConfig+0x33c>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4abd      	ldr	r2, [pc, #756]	; (8002c3c <UART_SetConfig+0x340>)
 8002948:	4013      	ands	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4ab7      	ldr	r2, [pc, #732]	; (8002c40 <UART_SetConfig+0x344>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296e:	4313      	orrs	r3, r2
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4ab2      	ldr	r2, [pc, #712]	; (8002c44 <UART_SetConfig+0x348>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4aae      	ldr	r2, [pc, #696]	; (8002c48 <UART_SetConfig+0x34c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d136      	bne.n	8002a00 <UART_SetConfig+0x104>
 8002992:	4bae      	ldr	r3, [pc, #696]	; (8002c4c <UART_SetConfig+0x350>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	2203      	movs	r2, #3
 8002998:	4013      	ands	r3, r2
 800299a:	2b03      	cmp	r3, #3
 800299c:	d020      	beq.n	80029e0 <UART_SetConfig+0xe4>
 800299e:	d827      	bhi.n	80029f0 <UART_SetConfig+0xf4>
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d00d      	beq.n	80029c0 <UART_SetConfig+0xc4>
 80029a4:	d824      	bhi.n	80029f0 <UART_SetConfig+0xf4>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <UART_SetConfig+0xb4>
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d010      	beq.n	80029d0 <UART_SetConfig+0xd4>
 80029ae:	e01f      	b.n	80029f0 <UART_SetConfig+0xf4>
 80029b0:	231b      	movs	r3, #27
 80029b2:	2218      	movs	r2, #24
 80029b4:	4694      	mov	ip, r2
 80029b6:	44bc      	add	ip, r7
 80029b8:	4463      	add	r3, ip
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e0ab      	b.n	8002b18 <UART_SetConfig+0x21c>
 80029c0:	231b      	movs	r3, #27
 80029c2:	2218      	movs	r2, #24
 80029c4:	4694      	mov	ip, r2
 80029c6:	44bc      	add	ip, r7
 80029c8:	4463      	add	r3, ip
 80029ca:	2202      	movs	r2, #2
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e0a3      	b.n	8002b18 <UART_SetConfig+0x21c>
 80029d0:	231b      	movs	r3, #27
 80029d2:	2218      	movs	r2, #24
 80029d4:	4694      	mov	ip, r2
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	2204      	movs	r2, #4
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e09b      	b.n	8002b18 <UART_SetConfig+0x21c>
 80029e0:	231b      	movs	r3, #27
 80029e2:	2218      	movs	r2, #24
 80029e4:	4694      	mov	ip, r2
 80029e6:	44bc      	add	ip, r7
 80029e8:	4463      	add	r3, ip
 80029ea:	2208      	movs	r2, #8
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e093      	b.n	8002b18 <UART_SetConfig+0x21c>
 80029f0:	231b      	movs	r3, #27
 80029f2:	2218      	movs	r2, #24
 80029f4:	4694      	mov	ip, r2
 80029f6:	44bc      	add	ip, r7
 80029f8:	4463      	add	r3, ip
 80029fa:	2210      	movs	r2, #16
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e08b      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a92      	ldr	r2, [pc, #584]	; (8002c50 <UART_SetConfig+0x354>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d136      	bne.n	8002a78 <UART_SetConfig+0x17c>
 8002a0a:	4b90      	ldr	r3, [pc, #576]	; (8002c4c <UART_SetConfig+0x350>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	220c      	movs	r2, #12
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d020      	beq.n	8002a58 <UART_SetConfig+0x15c>
 8002a16:	d827      	bhi.n	8002a68 <UART_SetConfig+0x16c>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d00d      	beq.n	8002a38 <UART_SetConfig+0x13c>
 8002a1c:	d824      	bhi.n	8002a68 <UART_SetConfig+0x16c>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <UART_SetConfig+0x12c>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d010      	beq.n	8002a48 <UART_SetConfig+0x14c>
 8002a26:	e01f      	b.n	8002a68 <UART_SetConfig+0x16c>
 8002a28:	231b      	movs	r3, #27
 8002a2a:	2218      	movs	r2, #24
 8002a2c:	4694      	mov	ip, r2
 8002a2e:	44bc      	add	ip, r7
 8002a30:	4463      	add	r3, ip
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e06f      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002a38:	231b      	movs	r3, #27
 8002a3a:	2218      	movs	r2, #24
 8002a3c:	4694      	mov	ip, r2
 8002a3e:	44bc      	add	ip, r7
 8002a40:	4463      	add	r3, ip
 8002a42:	2202      	movs	r2, #2
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e067      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	2218      	movs	r2, #24
 8002a4c:	4694      	mov	ip, r2
 8002a4e:	44bc      	add	ip, r7
 8002a50:	4463      	add	r3, ip
 8002a52:	2204      	movs	r2, #4
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e05f      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002a58:	231b      	movs	r3, #27
 8002a5a:	2218      	movs	r2, #24
 8002a5c:	4694      	mov	ip, r2
 8002a5e:	44bc      	add	ip, r7
 8002a60:	4463      	add	r3, ip
 8002a62:	2208      	movs	r2, #8
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e057      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002a68:	231b      	movs	r3, #27
 8002a6a:	2218      	movs	r2, #24
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	44bc      	add	ip, r7
 8002a70:	4463      	add	r3, ip
 8002a72:	2210      	movs	r2, #16
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e04f      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a70      	ldr	r2, [pc, #448]	; (8002c40 <UART_SetConfig+0x344>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d143      	bne.n	8002b0a <UART_SetConfig+0x20e>
 8002a82:	4b72      	ldr	r3, [pc, #456]	; (8002c4c <UART_SetConfig+0x350>)
 8002a84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a86:	23c0      	movs	r3, #192	; 0xc0
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	22c0      	movs	r2, #192	; 0xc0
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d02a      	beq.n	8002aea <UART_SetConfig+0x1ee>
 8002a94:	22c0      	movs	r2, #192	; 0xc0
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d82e      	bhi.n	8002afa <UART_SetConfig+0x1fe>
 8002a9c:	2280      	movs	r2, #128	; 0x80
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d012      	beq.n	8002aca <UART_SetConfig+0x1ce>
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d826      	bhi.n	8002afa <UART_SetConfig+0x1fe>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <UART_SetConfig+0x1be>
 8002ab0:	2280      	movs	r2, #128	; 0x80
 8002ab2:	00d2      	lsls	r2, r2, #3
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d010      	beq.n	8002ada <UART_SetConfig+0x1de>
 8002ab8:	e01f      	b.n	8002afa <UART_SetConfig+0x1fe>
 8002aba:	231b      	movs	r3, #27
 8002abc:	2218      	movs	r2, #24
 8002abe:	4694      	mov	ip, r2
 8002ac0:	44bc      	add	ip, r7
 8002ac2:	4463      	add	r3, ip
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e026      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002aca:	231b      	movs	r3, #27
 8002acc:	2218      	movs	r2, #24
 8002ace:	4694      	mov	ip, r2
 8002ad0:	44bc      	add	ip, r7
 8002ad2:	4463      	add	r3, ip
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e01e      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002ada:	231b      	movs	r3, #27
 8002adc:	2218      	movs	r2, #24
 8002ade:	4694      	mov	ip, r2
 8002ae0:	44bc      	add	ip, r7
 8002ae2:	4463      	add	r3, ip
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e016      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002aea:	231b      	movs	r3, #27
 8002aec:	2218      	movs	r2, #24
 8002aee:	4694      	mov	ip, r2
 8002af0:	44bc      	add	ip, r7
 8002af2:	4463      	add	r3, ip
 8002af4:	2208      	movs	r2, #8
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e00e      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002afa:	231b      	movs	r3, #27
 8002afc:	2218      	movs	r2, #24
 8002afe:	4694      	mov	ip, r2
 8002b00:	44bc      	add	ip, r7
 8002b02:	4463      	add	r3, ip
 8002b04:	2210      	movs	r2, #16
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e006      	b.n	8002b18 <UART_SetConfig+0x21c>
 8002b0a:	231b      	movs	r3, #27
 8002b0c:	2218      	movs	r2, #24
 8002b0e:	4694      	mov	ip, r2
 8002b10:	44bc      	add	ip, r7
 8002b12:	4463      	add	r3, ip
 8002b14:	2210      	movs	r2, #16
 8002b16:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a48      	ldr	r2, [pc, #288]	; (8002c40 <UART_SetConfig+0x344>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d000      	beq.n	8002b24 <UART_SetConfig+0x228>
 8002b22:	e09b      	b.n	8002c5c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b24:	231b      	movs	r3, #27
 8002b26:	2218      	movs	r2, #24
 8002b28:	4694      	mov	ip, r2
 8002b2a:	44bc      	add	ip, r7
 8002b2c:	4463      	add	r3, ip
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d01d      	beq.n	8002b70 <UART_SetConfig+0x274>
 8002b34:	dc20      	bgt.n	8002b78 <UART_SetConfig+0x27c>
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d015      	beq.n	8002b66 <UART_SetConfig+0x26a>
 8002b3a:	dc1d      	bgt.n	8002b78 <UART_SetConfig+0x27c>
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <UART_SetConfig+0x24a>
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d005      	beq.n	8002b50 <UART_SetConfig+0x254>
 8002b44:	e018      	b.n	8002b78 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b46:	f7ff f9d1 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b4e:	e01d      	b.n	8002b8c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b50:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <UART_SetConfig+0x350>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2210      	movs	r2, #16
 8002b56:	4013      	ands	r3, r2
 8002b58:	d002      	beq.n	8002b60 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b5a:	4b3e      	ldr	r3, [pc, #248]	; (8002c54 <UART_SetConfig+0x358>)
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b5e:	e015      	b.n	8002b8c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8002b60:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <UART_SetConfig+0x35c>)
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b64:	e012      	b.n	8002b8c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b66:	f7ff f911 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b6e:	e00d      	b.n	8002b8c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b76:	e009      	b.n	8002b8c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b7c:	231a      	movs	r3, #26
 8002b7e:	2218      	movs	r2, #24
 8002b80:	4694      	mov	ip, r2
 8002b82:	44bc      	add	ip, r7
 8002b84:	4463      	add	r3, ip
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
        break;
 8002b8a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d100      	bne.n	8002b94 <UART_SetConfig+0x298>
 8002b92:	e139      	b.n	8002e08 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	0013      	movs	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d305      	bcc.n	8002bb0 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d907      	bls.n	8002bc0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002bb0:	231a      	movs	r3, #26
 8002bb2:	2218      	movs	r2, #24
 8002bb4:	4694      	mov	ip, r2
 8002bb6:	44bc      	add	ip, r7
 8002bb8:	4463      	add	r3, ip
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e123      	b.n	8002e08 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	6939      	ldr	r1, [r7, #16]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	000b      	movs	r3, r1
 8002bce:	0e1b      	lsrs	r3, r3, #24
 8002bd0:	0010      	movs	r0, r2
 8002bd2:	0205      	lsls	r5, r0, #8
 8002bd4:	431d      	orrs	r5, r3
 8002bd6:	000b      	movs	r3, r1
 8002bd8:	021c      	lsls	r4, r3, #8
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	60bb      	str	r3, [r7, #8]
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68b8      	ldr	r0, [r7, #8]
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	1900      	adds	r0, r0, r4
 8002bec:	4169      	adcs	r1, r5
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f7fd fb10 	bl	8000220 <__aeabi_uldivmod>
 8002c00:	0002      	movs	r2, r0
 8002c02:	000b      	movs	r3, r1
 8002c04:	0013      	movs	r3, r2
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0a:	23c0      	movs	r3, #192	; 0xc0
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d309      	bcc.n	8002c26 <UART_SetConfig+0x32a>
 8002c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	035b      	lsls	r3, r3, #13
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d204      	bcs.n	8002c26 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	e0f0      	b.n	8002e08 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c26:	231a      	movs	r3, #26
 8002c28:	2218      	movs	r2, #24
 8002c2a:	4694      	mov	ip, r2
 8002c2c:	44bc      	add	ip, r7
 8002c2e:	4463      	add	r3, ip
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e0e8      	b.n	8002e08 <UART_SetConfig+0x50c>
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	efff69f3 	.word	0xefff69f3
 8002c3c:	ffffcfff 	.word	0xffffcfff
 8002c40:	40004800 	.word	0x40004800
 8002c44:	fffff4ff 	.word	0xfffff4ff
 8002c48:	40013800 	.word	0x40013800
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40004400 	.word	0x40004400
 8002c54:	003d0900 	.word	0x003d0900
 8002c58:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d000      	beq.n	8002c6a <UART_SetConfig+0x36e>
 8002c68:	e074      	b.n	8002d54 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002c6a:	231b      	movs	r3, #27
 8002c6c:	2218      	movs	r2, #24
 8002c6e:	4694      	mov	ip, r2
 8002c70:	44bc      	add	ip, r7
 8002c72:	4463      	add	r3, ip
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d822      	bhi.n	8002cc0 <UART_SetConfig+0x3c4>
 8002c7a:	009a      	lsls	r2, r3, #2
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <UART_SetConfig+0x52c>)
 8002c7e:	18d3      	adds	r3, r2, r3
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c84:	f7ff f932 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c8c:	e022      	b.n	8002cd4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c8e:	f7ff f943 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8002c92:	0003      	movs	r3, r0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c96:	e01d      	b.n	8002cd4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c98:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <UART_SetConfig+0x530>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d002      	beq.n	8002ca8 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <UART_SetConfig+0x534>)
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ca6:	e015      	b.n	8002cd4 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8002ca8:	4b62      	ldr	r3, [pc, #392]	; (8002e34 <UART_SetConfig+0x538>)
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cac:	e012      	b.n	8002cd4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cae:	f7ff f86d 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cb6:	e00d      	b.n	8002cd4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cbe:	e009      	b.n	8002cd4 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002cc4:	231a      	movs	r3, #26
 8002cc6:	2218      	movs	r2, #24
 8002cc8:	4694      	mov	ip, r2
 8002cca:	44bc      	add	ip, r7
 8002ccc:	4463      	add	r3, ip
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
        break;
 8002cd2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d100      	bne.n	8002cdc <UART_SetConfig+0x3e0>
 8002cda:	e095      	b.n	8002e08 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cde:	005a      	lsls	r2, r3, #1
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	18d2      	adds	r2, r2, r3
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0019      	movs	r1, r3
 8002cee:	0010      	movs	r0, r2
 8002cf0:	f7fd fa0a 	bl	8000108 <__udivsi3>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	2b0f      	cmp	r3, #15
 8002cfe:	d921      	bls.n	8002d44 <UART_SetConfig+0x448>
 8002d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	025b      	lsls	r3, r3, #9
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d21c      	bcs.n	8002d44 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	200e      	movs	r0, #14
 8002d10:	2418      	movs	r4, #24
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	181b      	adds	r3, r3, r0
 8002d16:	210f      	movs	r1, #15
 8002d18:	438a      	bics	r2, r1
 8002d1a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2207      	movs	r2, #7
 8002d24:	4013      	ands	r3, r2
 8002d26:	b299      	uxth	r1, r3
 8002d28:	193b      	adds	r3, r7, r4
 8002d2a:	181b      	adds	r3, r3, r0
 8002d2c:	193a      	adds	r2, r7, r4
 8002d2e:	1812      	adds	r2, r2, r0
 8002d30:	8812      	ldrh	r2, [r2, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	193a      	adds	r2, r7, r4
 8002d3c:	1812      	adds	r2, r2, r0
 8002d3e:	8812      	ldrh	r2, [r2, #0]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e061      	b.n	8002e08 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d44:	231a      	movs	r3, #26
 8002d46:	2218      	movs	r2, #24
 8002d48:	4694      	mov	ip, r2
 8002d4a:	44bc      	add	ip, r7
 8002d4c:	4463      	add	r3, ip
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e059      	b.n	8002e08 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d54:	231b      	movs	r3, #27
 8002d56:	2218      	movs	r2, #24
 8002d58:	4694      	mov	ip, r2
 8002d5a:	44bc      	add	ip, r7
 8002d5c:	4463      	add	r3, ip
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d822      	bhi.n	8002daa <UART_SetConfig+0x4ae>
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <UART_SetConfig+0x53c>)
 8002d68:	18d3      	adds	r3, r2, r3
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d6e:	f7ff f8bd 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002d72:	0003      	movs	r3, r0
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d76:	e022      	b.n	8002dbe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d78:	f7ff f8ce 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d80:	e01d      	b.n	8002dbe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <UART_SetConfig+0x530>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2210      	movs	r2, #16
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d002      	beq.n	8002d92 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d8c:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <UART_SetConfig+0x534>)
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d90:	e015      	b.n	8002dbe <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002d92:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <UART_SetConfig+0x538>)
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d96:	e012      	b.n	8002dbe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d98:	f7fe fff8 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002da0:	e00d      	b.n	8002dbe <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002da8:	e009      	b.n	8002dbe <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002dae:	231a      	movs	r3, #26
 8002db0:	2218      	movs	r2, #24
 8002db2:	4694      	mov	ip, r2
 8002db4:	44bc      	add	ip, r7
 8002db6:	4463      	add	r3, ip
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
        break;
 8002dbc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d021      	beq.n	8002e08 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	085a      	lsrs	r2, r3, #1
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	18d2      	adds	r2, r2, r3
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	0010      	movs	r0, r2
 8002dd6:	f7fd f997 	bl	8000108 <__udivsi3>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	d909      	bls.n	8002dfa <UART_SetConfig+0x4fe>
 8002de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	025b      	lsls	r3, r3, #9
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d204      	bcs.n	8002dfa <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	e006      	b.n	8002e08 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dfa:	231a      	movs	r3, #26
 8002dfc:	2218      	movs	r2, #24
 8002dfe:	4694      	mov	ip, r2
 8002e00:	44bc      	add	ip, r7
 8002e02:	4463      	add	r3, ip
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	2200      	movs	r2, #0
 8002e12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e14:	231a      	movs	r3, #26
 8002e16:	2218      	movs	r2, #24
 8002e18:	4694      	mov	ip, r2
 8002e1a:	44bc      	add	ip, r7
 8002e1c:	4463      	add	r3, ip
 8002e1e:	781b      	ldrb	r3, [r3, #0]
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b00e      	add	sp, #56	; 0x38
 8002e26:	bdb0      	pop	{r4, r5, r7, pc}
 8002e28:	080031c4 	.word	0x080031c4
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	003d0900 	.word	0x003d0900
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	080031e8 	.word	0x080031e8

08002e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a4a      	ldr	r2, [pc, #296]	; (8002f80 <UART_AdvFeatureConfig+0x144>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d00b      	beq.n	8002e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4a43      	ldr	r2, [pc, #268]	; (8002f84 <UART_AdvFeatureConfig+0x148>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d00b      	beq.n	8002eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4a3b      	ldr	r2, [pc, #236]	; (8002f88 <UART_AdvFeatureConfig+0x14c>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	2208      	movs	r2, #8
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <UART_AdvFeatureConfig+0x150>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <UART_AdvFeatureConfig+0x154>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d00b      	beq.n	8002f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <UART_AdvFeatureConfig+0x158>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	4013      	ands	r3, r2
 8002f18:	d01d      	beq.n	8002f56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <UART_AdvFeatureConfig+0x15c>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	0019      	movs	r1, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	035b      	lsls	r3, r3, #13
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d10b      	bne.n	8002f56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <UART_AdvFeatureConfig+0x160>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d00b      	beq.n	8002f78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a0e      	ldr	r2, [pc, #56]	; (8002fa0 <UART_AdvFeatureConfig+0x164>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	605a      	str	r2, [r3, #4]
  }
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	fffdffff 	.word	0xfffdffff
 8002f84:	fffeffff 	.word	0xfffeffff
 8002f88:	fffbffff 	.word	0xfffbffff
 8002f8c:	ffff7fff 	.word	0xffff7fff
 8002f90:	ffffefff 	.word	0xffffefff
 8002f94:	ffffdfff 	.word	0xffffdfff
 8002f98:	ffefffff 	.word	0xffefffff
 8002f9c:	ff9fffff 	.word	0xff9fffff
 8002fa0:	fff7ffff 	.word	0xfff7ffff

08002fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fb4:	f7fd fe3a 	bl	8000c2c <HAL_GetTick>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d10c      	bne.n	8002fe4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	0391      	lsls	r1, r2, #14
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4a17      	ldr	r2, [pc, #92]	; (8003030 <UART_CheckIdleState+0x8c>)
 8002fd4:	9200      	str	r2, [sp, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f000 f82c 	bl	8003034 <UART_WaitOnFlagUntilTimeout>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e021      	b.n	8003028 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d10c      	bne.n	800300c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	03d1      	lsls	r1, r2, #15
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <UART_CheckIdleState+0x8c>)
 8002ffc:	9200      	str	r2, [sp, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f000 f818 	bl	8003034 <UART_WaitOnFlagUntilTimeout>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e00d      	b.n	8003028 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2274      	movs	r2, #116	; 0x74
 8003022:	2100      	movs	r1, #0
 8003024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b004      	add	sp, #16
 800302e:	bd80      	pop	{r7, pc}
 8003030:	01ffffff 	.word	0x01ffffff

08003034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003044:	e05e      	b.n	8003104 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	3301      	adds	r3, #1
 800304a:	d05b      	beq.n	8003104 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7fd fdee 	bl	8000c2c <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	d302      	bcc.n	8003062 <UART_WaitOnFlagUntilTimeout+0x2e>
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11b      	bne.n	800309a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	492f      	ldr	r1, [pc, #188]	; (800312c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800306e:	400a      	ands	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	438a      	bics	r2, r1
 8003080:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2274      	movs	r2, #116	; 0x74
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e044      	b.n	8003124 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2204      	movs	r2, #4
 80030a2:	4013      	ands	r3, r2
 80030a4:	d02e      	beq.n	8003104 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	401a      	ands	r2, r3
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d124      	bne.n	8003104 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4917      	ldr	r1, [pc, #92]	; (800312c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	2120      	movs	r1, #32
 80030f6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2274      	movs	r2, #116	; 0x74
 80030fc:	2100      	movs	r1, #0
 80030fe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e00f      	b.n	8003124 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	425a      	negs	r2, r3
 8003114:	4153      	adcs	r3, r2
 8003116:	b2db      	uxtb	r3, r3
 8003118:	001a      	movs	r2, r3
 800311a:	1dfb      	adds	r3, r7, #7
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d091      	beq.n	8003046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	0018      	movs	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	b004      	add	sp, #16
 800312a:	bd80      	pop	{r7, pc}
 800312c:	fffffe5f 	.word	0xfffffe5f

08003130 <__libc_init_array>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	2600      	movs	r6, #0
 8003134:	4d0c      	ldr	r5, [pc, #48]	; (8003168 <__libc_init_array+0x38>)
 8003136:	4c0d      	ldr	r4, [pc, #52]	; (800316c <__libc_init_array+0x3c>)
 8003138:	1b64      	subs	r4, r4, r5
 800313a:	10a4      	asrs	r4, r4, #2
 800313c:	42a6      	cmp	r6, r4
 800313e:	d109      	bne.n	8003154 <__libc_init_array+0x24>
 8003140:	2600      	movs	r6, #0
 8003142:	f000 f821 	bl	8003188 <_init>
 8003146:	4d0a      	ldr	r5, [pc, #40]	; (8003170 <__libc_init_array+0x40>)
 8003148:	4c0a      	ldr	r4, [pc, #40]	; (8003174 <__libc_init_array+0x44>)
 800314a:	1b64      	subs	r4, r4, r5
 800314c:	10a4      	asrs	r4, r4, #2
 800314e:	42a6      	cmp	r6, r4
 8003150:	d105      	bne.n	800315e <__libc_init_array+0x2e>
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	00b3      	lsls	r3, r6, #2
 8003156:	58eb      	ldr	r3, [r5, r3]
 8003158:	4798      	blx	r3
 800315a:	3601      	adds	r6, #1
 800315c:	e7ee      	b.n	800313c <__libc_init_array+0xc>
 800315e:	00b3      	lsls	r3, r6, #2
 8003160:	58eb      	ldr	r3, [r5, r3]
 8003162:	4798      	blx	r3
 8003164:	3601      	adds	r6, #1
 8003166:	e7f2      	b.n	800314e <__libc_init_array+0x1e>
 8003168:	08003214 	.word	0x08003214
 800316c:	08003214 	.word	0x08003214
 8003170:	08003214 	.word	0x08003214
 8003174:	08003218 	.word	0x08003218

08003178 <memset>:
 8003178:	0003      	movs	r3, r0
 800317a:	1882      	adds	r2, r0, r2
 800317c:	4293      	cmp	r3, r2
 800317e:	d100      	bne.n	8003182 <memset+0xa>
 8003180:	4770      	bx	lr
 8003182:	7019      	strb	r1, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	e7f9      	b.n	800317c <memset+0x4>

08003188 <_init>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr

08003194 <_fini>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr
